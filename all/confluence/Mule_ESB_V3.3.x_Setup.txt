title: Mule ESB V3.3.x Setup
body:   

## 1\. Mule Studio

Mule's free, Eclipse-based graphical IDE which enables you to quickly model,
configure, debug and deploy applications. Download to test drive Mule's
lightweight integration software.  
comes bundled with an embedded runtime  
comes bundled with the ability to deploy your applications to a trial account
on CloudHub  
supports Community and Enterprise versions of Mule runtimes so that you can
easily switch between runtimes when creating a new project  
[Edit this
section](https://i3dev.easyredmine.com/projects/integration/wiki/Mule_ESB_V331_Setup/edit?section=3)

  

## 2\. Mule ESB - Community Edition (CE)

  
  

  

## 3\. Mule ESB - Enterprise Edition (EE)

  
  

  

## 4\. Mule ESB - Installation and Setup Steps

Refer RedMine wiki URL:  
<http://redmine.infoimage.com/projects/integration/wiki/DEV_Server_-
_Configuation_Setup>  
  

  

## 5\. Mule ESB - Running Mule as a Daemon

By default, the mule command runs Mule in the foreground. To run Mule in the
background as a daemon, enter the following command instead, using start,
stop, or restart as the first parameter as needed:  
`mule [start|stop|restart]`  
  

  

## 5\. Mule ESB - Deployment

You can now modify your configuration files and custom classes and have them
reloaded without having to restart Mule.

 **A. Outline of a Deployment**

Here is a quick summary for deploying an app 'myApp':  
 Create a directory under $MULE_HOME/apps/myApp  
 Jar custom classes (if any), and put them under $MULE_HOME/apps/myApp/lib  
 Place the master Mule config file at $MULE_HOME/apps/myApp/mule-config.xml  
 Start your app with mule -app myApp

As a bonus, application's master config file is monitored, so if there are any
class changes you want to pick up or simply modify the config, save or touch
mule-config.xml and Mule will hot-reload the application.

 **B. How Hot Deployment works**

Mule checks every three seconds for updated configuration files under the
$MULE_HOME/apps directory, and when it finds one, it reloads the configuration
file and the JARs in that applications lib directory.

Therefore, if you want to change one of your custom classes, you modify and
rejar it, copy the updated JAR to the lib directory, and then touch or save
the configuration file. Currently, Mule checks only the first configuration
file in your application's directory, so right now hot deployment works best
with applications that have a single configuration file.

 **C. Deploying Applications**

Mule applications, either zipped or exploded can be dropped into
$MULE_HOME/apps. If Mule is already running, the application will be deployed
dynamically.

> All applications in Mule are unpacked at runtime and original zip removed.
> This means, e.g. that dropping a zip file into 'apps' dir will create a new
> folder with the same name (sans 'zip' extension) and delete the zip.

A successful app deployment is confirmed by:  
 Having an unpacked application folder in the apps dir. E.g. for
stockTrader.zip- $MULE_HOME/apps/stockTrader.  
 An anchor file created for a running app, e.g. $MULE_HOME/apps/stockTrader-
anchor.txt

> If you wish to store your applications in a different location, you can do
> this on Unix-based systems by creating a symlink to your application
> directory from $MULE_HOME/apps

 **D. Undeploying Applications**

It is recommended one doesn't delete the application folder directly, but
rather an app's anchor file only:  
 Prevents any interference from the hot-deployment layer and doesn't leave
room for concurrent conflicting actions.  
 Avoids potential application jar locking issues on some operation systems
and allows for clean shutdown and undeployment.

> E.g. if the stockTrader app is running (app folder is there as well as the
> $MULE_HOME/apps/stockTrader-anchor.txt file, just delete the anchor file to
> have the app removed from the Mule instance at runtime. Application folder
> will be removed once the app terminates.

 **E. Mule Application Format**

The deployment unit of a Mule application encapsulates everything an
application needs to function, such as libraries, custom code, configuration,
deployment descriptor and any environment properties accompanying the
application. It exists in one of two formats:  
 zip file (a regular archive with a 'zip' extension)  
 unpacked version of the same .zip file (exploded app)

>  
>
>  
>  
>      \- classes                // application-specific expanded resources
> (e.g. logging configuration files, properties, etc <BR>
>      |- lib                     // application-specific jars<BR>
>      |- mule-config.xml         // Main Mule configuration file, also
> monitored for changes <BR>
>      |- mule-deploy.properties  // Application deployment descriptor
> (optional)
>      |- mule-app.properties     // custom properties to be added to the
> registry instance used by the application (optional)
>      |- *.grf files             // produced by DataMapper to plot its data
> mapping
>  
>
>  
>

Mule supports the deployment of both packaged (zipped) and exploded (unzipped)
applications.  
  

  

### Mule Service Configuration

Start mule by running <MULE_HOME>/bin/mule or starting Mule as a service. By
default, applications in the <MULE_HOME>/apps directory will be deployed.

> Start Mule by specifying an app to run:
>  
>  
>     mule -app myApp@
>
>  
> `where myApp is a Mule app at $MULE_HOME/apps/myApp.`
>
>  
>

 **G. Configuring Mule as a Linux Service**  
 Create soft-link for the Mule daemon to your daemon init script directory

    
    
       $ sudo ln -s /opt/muleEE3.3.2/bin/mule /etc/init.d/mule_ee332
       Make Mule startup at boot-time: 
         $ sudo update-rc.d mule_ee332 start 67 2 3 4 5 . stop 67 0 1 6 .
       Startup Mule manually: 
         $ sudo service ee332 start
       Stop Mule service: 
         $ sudo service ee332 start
       Check status of Mule service: 
         $ sudo service ee332 start
    

  

tip.  **Useful commands:**  
 To verify if Mule is running use the command:  
$ sudo service mule_ee332 status  
 To restart Mule use the command:  
$ sudo service mule_ee332 restart  
 To stop Mule use the command:  
$ sudo service mule_ee332 stop  
 To uninstall the Mule service, do the following:  
$ sudo update-rc.d -f mule_ee332 remove  
$ sudo rm /etc/init.d/mule_ee332

 **G. Configuring Mule as a Windows NT Service**

 To install Mule as a Windows NT Service, type  
`mule install`

 To remove Mule from your services, type:  
`mule remove`

 Once you have installed Mule as a service, you can invoke the service
exactly as you did before, but with an additional parameter:  
`mule [start|stop|restart]`

 You can also use the Windows net utility:  
`net [start|stop] mule`

 **Unintentional Application Deletion**

When you deploy an app by copying a zip or folder into the apps directory and
then running mule, Mule will launch it and then create a text file called
'$APP_NAME-anchor.text'. If you delete this file, Mule will "undeploy this app
in a clean way".  
What isn't noted by this is that it will delete the corresponding zip/folder.
So be careful not to accidentally delete your whole project.

 **Maven Support for MuleStudio**

MuleStudio 3.3 has feature to upload the file to repository through MMC.  
This can be done when right-clicking the project and select "Mule Management
Console - Publish Application to Repository".  
Using maven build script (pom.xml), it can install the application directly to
the server not only to MMC repository.

URL:  
<http://www.mulesoft.org/documentation/display/current/Installation+Guide>  
[Edit this
section](https://i3dev.easyredmine.com/projects/integration/wiki/Mule_ESB_V331_Setup/edit?section=9)

  

### TCat 7.x Server:

Prerequisite for Ubuntu Linux

For 64-bit Ubuntu installations, 32-bit compatibility libraries can be
installed via the command-line tool, apt-get:

    
    
    $ sudo -s
    # sudo apt-get install ia32-libs
    # exit 
    

  

Apache Tomcat home folder:  
/usr/local/apache-tomcat-7.0.37/webapps

MMC war file deployment folder:

/home/nirajt/Installer/mule/mmc-console-3.3.2.war

<http://10.8.9.57:8080/>  
<http://10.8.9.57:8080/mmc-console-3.3.2/login.jsp>

### Attachments

  


