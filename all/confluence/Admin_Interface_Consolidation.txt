title: Admin Interface Consolidation
body: # Admin UI Consolidation

[Existing Functionality Spec (As of
2013-01)](https://i3dev.easyredmine.com/projects/infotrac/wiki/Existing_func_spec_2012)

##  **Additional Items to be included in InfoTRAC 4.0**

Here are additional features we need to definitely include for the next
version of InfoTRAC based on customer and partner demand:

  * Ability for an admin to access the camera system to track individual mail pieces leaving our production facility (link of job tracking)
  * Connect MM to Banner and Email management for targeted messages
  * Mail Tracking for outbound mail once it leaves our facility based on the data extract received daily from the USPS
  * Provide API structure for the various InfoTRAC modules - at least the new ones we are implementing or consolidating
  * There may be some more coming from Safe - we have a discussion based on some of their concerns, will keep you posted

## WIP Projects:

### [User/Role/Feature
Management](https://i3dev.easyredmine.com/projects/urf_mgmt/wiki)

  1. [Question to dsi on 6/6/2013](https://i3dev.easyredmine.com/projects/urf_mgmt/wiki/06062013_question)

06/06/2013 question:

    1. General:
      1. Lots of methods are having 'void' return type. If so, how do you determine whether the method/operation success or fail?
      2. Will the parameter to methods be the entity/domain object? In this case, the object will be updated after perform the DB actions.
      3. Please include the class diagrams.
    2. FeatureAccessDao, how about any changes around the 'add' capability? If exist already, change to the params needed?
    3. UserRoleDao:
      1. findByUser: do we need findByRole()?
    4. ClientService:
      1. Should there be a getChildClients(parentClient)?
      2. getFeatureDefinitions: how exactly to handle/differentiate whether to "fetch all internal features also" vs "fetch features turned on for this client only"? Please clarify how this will work for different kind of users.
    5. RoleService:
      1. findByRole: Please be explicit for the method names: findUsersByRole
      2. Similarly, findByFeature: findRolesByFeature
      3. And given above two, wouldn't you need findFeatureByRole, findFeatureByUser also?
      4. deleteAlertsByRole: are we doing this by Role or by User now?
    6. UserService:
      1. getFeatureAccessByUserAndClient: from User, you should know Client already. Shouldn't need to pass in explicitly.
      2. getFeatureAccessByUserAndClient: in comments, you said this should not be used anymore. My suggestion is actually keep it but modify the logic inside it to get the featureAccess via Roles. Since I see this as a very commonly called method throughout the application for 'permission check' type of thing. Or introduce the method I propose below.
      3. updateFeatureAccess: comments indicate this method shouldn't be used anymore, planning to scrub through code to remove usage of this method? Please indicate the action item for this method.
      4. getManageableRoles & getManageableLevels: I'm not sure if you want to keep using these method. There shouldn't be differentiation between 'manageable' vs 'nonmanageable'. Also the 'levels' are not really applicable anymore. Code around these method should be cleaned up.
      5. Suggestion: add <Boolean> checkFeatureAccess(User, Feature). This would be call by functional modules quite commonly for ACL and show/hide certain things.
    7. Controller components
      1. I'm not quite clear why we need to use all these 'XXXXForm' objects around the controller classes?
    8. Models and JSP: Seems like still need work around these sessions.
  2. [Features & sub Features](https://i3dev.easyredmine.com/projects/urf_mgmt/wiki/Feature_sub_feature)

Features and sub features

A feature can have sub-features with the foreign key (Parent_code reference
back to its parent's code in the feature_definition table). The Feature model
will be recursive and can be extended to multiple levels. The following are
the features and sub_features in the current code base and we need migrate
those in to database.

 **Feature**|  **Sub-Feature/Permission**|  **Type**|  **Comments**  
---|---|---|---  
ActivityTrac|  
|  
|  
  
  
| Access ActivityTrac| General|  
  
  
| Create new ActivityTrac form| InfoIMAGE only| Internal users are PC staffs
for this feature  
  
| Link additional insert with an inventory| InfoIMAGE only|  
  
  
| Modify created form| InfoIMAGE only|  
  
  
| Edit form| General|  
  
  
| Replace pdf for inventory insert| InfoIMAGE only|  
  
  
| Approve form| General|  
  
  
| Un-approve form| InfoIMAGE only|  
  
  
| Remove form| InfoIMAGE only|  
  
  
| View Detailed form| InfoIMAGE only| User with this permission will see 2
forms (paper and eStmt)  
  
| View form| General| Not include the users has permission of "View Detailed
form"  
Certified Mail|  
| General|  
  
  
| Access Certified Mail| General|  
  
Confirm Mail|  
| General| Not sure if it's used by any live production client. Keep
implementation in code and in 'Feature' table. Just that we won't turn this on
for any client at current time.  
Message Manager 2.2|  
|  
|  
  
  
| Access Message Manager| General|  
  
  
| Create MM campaign| General|  
  
  
| Edit campaign| General| including view samples, upload image messages and
etc)  
  
| Approve campaign| General|  
  
  
| Un-approve campaign| InfoIMAGE only|  
  
  
| Remove draft campaign| General  
  
| View approved campaign| General| including paper and eStmt  
Message Manager 3.0|  
|  
| same as "Message Manager 2.2" above  
Online Proofing|  
|  
|  
  
  
| Access Online Proofing| General|  
  
  
| Review the samples| General|  
  
  
| Release the samples| InfoIMAGE only| Internal users in Laser, DP and etc
departments  
  
| Approve/unapprove the samples| General|  
  
View Statements|  
| General| Not sure if it's used by any live production client. Keep
implementation in code and in 'Feature' table. Just that we won't turn this on
for any client at current time.  
Client Management|  
| InfoIMAGE only|  
  
  
| Access Client Mgmt| InfoIMAGE only|  
  
  
| Create new client| InfoIMAGE only|  
  
  
| Update existing client| InfoIMAGE only| include disabling client  
  
| Feature Access| InfoIMAGE only|  
  
  
|  ~~Sub-client access~~|  InfoIMAGE only| only if whole sale client  
Feature Setup|  
| InfoIMAGE only|  
  
  
| Access Feature Setup| InfoIMAGE only|  
  
  
| Message Manager Setup Read| InfoIMAGE only|  
  
  
| Message Manager Setup Edit| InfoIMAGE only|  
  
 ~~Home~~|  
|  General| Home Screen is available to everybody. So we will not setup this
as a feature. However, the content displayed for the user depends on the
client type of the user. InfoImage and whole sale user will see the sub-client
list when login (view 1), and to navigate to a client, the user need click on
that client. Basic client's user will see the content regarding that client
directly (view 2). The modules shown within the Home screen (for a client --
view 2) depends on corresponding functional module is enabled for the CID/User
or not. e.g. if 'Job Tracking' module is enabled for a client, a corresponding
'Job Status' module would be shown inside the Home screen. If a module will
not display, the whole box (section) will be removed from displaying.  
Inventory|  
| General| No permission details needed. Only enable/disable on CID level  
Job Status|  
| General| No permission details needed. Only enable/disable on CID level  
Production Report|  
| General| Not ready for any live production client yet. Keep implementation
in code and in 'Feature' table. Just that we won't turn this on for any client
at current time.  
Account Center|  
| General|  
  
  
| Access Account Center| General|  
  
Role Management|  
| General| to control showing the sub-tab in UI or not, disabling this in
Permission view, automatically disable the corresponding permission below via
JS  
  
| Access Role Mgmt| General|  
  
  
| Create new role| General|  
  
  
| Update existing role| General| including disable roles and manage
role/permission mapping  
User Management|  
| General| to control showing the sub-tab in UI or not, disabling this in
Permission view, automatically disable the corresponding permission below via
JS  
  
| Access User Mgmt| General|  
  
  
| Create a new user| General|  
  
  
| Update existing user| General| including disable user  
  
| Manage user/roles mapping| General|  
  
  
| Manage alerts| General|  
  
  
According to Will's feedback, we may need enhance some logic based on client's
request, for example, password expiration logic per client, also disable logic
if a user didn't login for certain period of time, and display last login time
and etc.  
[Edit this
section](https://i3dev.easyredmine.com/projects/urf_mgmt/wiki/Feature_sub_feature/edit?section=2)

# Old Role Feature
Mapping:[](https://i3dev.easyredmine.com/projects/urf_mgmt/wiki/Feature_sub_feature#Old-
Role-Feature-Mapping)

There were some static Role in old code base as follows (in
com.infoimage.infotrac.system.domain.Role.java)-

    
            public static final Role CUSTOMER = new Role(Integer.valueOf("1", 2),"CUSTOMER","Customer");
        public static final Role WHOLESALE = new Role(Integer.valueOf("10", 2),"WHOLESALE","Wholesale");
        public static final Role STAFF = new Role(Integer.valueOf("100", 2), "STAFF", "Staff");
        public static final Role SALES = new Role(Integer.valueOf("1100", 2), "SALES", "Sales");
        public static final Role ACCT = new Role(Integer.valueOf("10100", 2), "ACCT", "Accounting");
        public static final Role OPS = new Role(Integer.valueOf("100100", 2),"OPS","Operations");
        public static final Role DP = new Role(Integer.valueOf("1000100", 2), "DP", "Data Processing");
        public static final Role PC = new Role(Integer.valueOf("10000100", 2),"PC","Production Control");
        public static final Role AS = new Role(Integer.valueOf("100000100", 2),"AS","Account Services");
        public static final Role AM = new Role(Integer.valueOf("1000000100", 2),"AM","Account Managers");
        public static final Role IMP = new Role(Integer.valueOf("10000000100", 2),"IMP","Implementation");
        public static final Role IS = new Role(Integer.valueOf("100000000100", 2), "IS", "Information Systems");
        public static final Role ISD = new Role(Integer.valueOf("1000000000100", 2),"ISD","Internet Services");
        public static final Role ADMIN = new Role(Integer.valueOf("1111111111111", 2),"ADMIN","Administrator");
    

An Array ALL was populated with all of these static role -

    
            public static final Role[] ALL = new Role[] { 
            ADMIN, ISD, IS, IMP, AM, AS, PC, DP, OPS, ACCT, SALES, STAFF, WHOLESALE, CUSTOMER 
        };
    

**Feature**|  **File Name**|  **Mapped Permission**|  **Code Snippet**  
---|---|---|---  
CUSTOMER (Customer)| userProfileForm.jsp| Feature Access|

    
        <%--         
            <c:if test="${userProfileForm.user.role.code=='CUSTOMER' and userProfileForm.user.adminLevel.code=='BASIC'}">
                <div class="row">
                    <div class="view" style="width:160px;float:left;"><a href="${flowExecutionUrl}&_eventId=featureAccess">Feature Access</a></div>    
                </div>
            </c:if>
            --%>  
  
WHOLESALE (Wholesale)| secure.jsp| Show Client Name|

    
        <%-- 
        <c:if test="${USER.inRole['STAFF'] || USER.inRole['WHOLESALE']}">  
            <h1><c:out value="${CLIENT.name}"/></h1>  
        </c:if>  
        --%>  
        <h1 style="margin-top: 9px; margin-bottom: 9px; height: 16px;"><c:out value="${CLIENT.name}"/></h1>  
  
STAFF (Staff)| ../secure/emis/home.jsp| Show diffrent tables column (like
-Edit, Status, Creation Date, Form ID, Description etc) based on the 'STAFF'
role|

    
        <%-- 
                                        <c:when test="${USER.inRole['STAFF']}">
                                        --%>  
  
  
| listReport.jsp| Provide Delete and Replace permission|

    
        <%--<c:if test="${USER.inRole['STAFF']}">--%>
            <c:if test="${CLIENT.type.type=='R'}">
                <th><a href="${flowExecutionUrl}&_eventId=replace&ith=${status.index}">Replace</a></th>
                <th><a href="javascript:deleteReport('${flowExecutionUrl}&_eventId=delete&ith=${status.index}','${pr.report.name}')">Delete</a></th>
            </c:if>  
  
  
|  
| Provide Several permission|

    
        <%--<c:if test="${USER.inRole['STAFF']}">--%>
    <c:if test="${CLIENT.type.type=='R'}">  
  
  
| ../template/secure.jsp| Show client Name based on this Role|

    
        <%-- 
        <c:if test="${USER.inRole['STAFF'] || USER.inRole['WHOLESALE']}">
            <h1><c:out value="${CLIENT.name}"/></h1>
        </c:if>
        --%>
        <h1 style="margin-top: 9px; margin-bottom: 9px; height: 16px;"><c:out value="${CLIENT.name}"/></h1>  
  
SALES (Sales)|  
|  
|

    
          
      
  
ACCT (Accounting)|  
|  
|

    
          
      
  
OPS (Operations)| ../proofingMgmt/proofingList.jsp| Release Sample|

    
        <%--<c:if test="${USER.inRole['OPS'] or USER.inRole['DP'] or USER.inRole['ISD']}">--%>
    <%--     <c:if test="${(CLIENT.type.type=='R') and USER.hasAccess['releaseSample']}"> --%>
        <c:if test="${((USER.rootClient.type.type=='R') and USER.hasRootPermission['releaseSample'])}">
            <c:set var="admission" value="true" />
        </c:if>  
  
DP (Data Processing)| ../proofingMgmt/proofingList.jsp| Release Sample|

    
        <%--     <c:if test="${(CLIENT.type.type=='R') and USER.hasAccess['releaseSample']}"> --%>
        <c:if test="${((USER.rootClient.type.type=='R') and USER.hasRootPermission['releaseSample'])}">
            <c:set var="admission" value="true" />
        </c:if>  
  
PC (Production Control)| ../emis/link/linkInventory.jsp|  
|

    
        <c:when test="${USER.inRole['PC'] && 'Y'==emis.eSelIns}">  
  
  
|  
|  
|

    
        <c:when test="${!USER.inRole['PC']}">
                                You do not have permission to link between inserts and inventories. 
                                Only Production Control Staff can operate on linking inserts and inventories.
                            </c:when>  
  
  
| emisInventoryForm.jsp| Replace File|

    
        <%-- 
                                                <c:when test="${USER.inRole['PC']}">
                                                --%>
                                                <c:when test="${(CLIENT.type.type=='R') && USER.hasAccess['replacePdfTrac']}">
                                                    Replace the file:  <input type="file" name="emisInventoryForm.inserts[${status.index}].pdfFile.file" id="emisInventoryForm.inserts[${status.index}].pdfFile.file" />.
                                                    <br/><font color='red'>Note: The replacement will apply to all inserts from all forms refer to this inventory. </font>
                                                </c:when>  
  
  
| ../emis/home.jsp| Create Activity Log|

    
        <%-- 
                    <c:if test="${USER.inRole['PC']||USER.inRole['ADMIN']}">
                        <a href="/secure/emis/create.do"><img src="/images/buttons/CreateNewActivityLog.png" /></a> 
                    </c:if>
                    --%>
                    <c:if test="${(CLIENT.type.type=='R') and USER.hasAccess['createFormTrac']}">
                        <a href="/secure/emis/create.do"><img src="/images/buttons/CreateNewActivityLog.png" /></a> 
                    </c:if>  
  
  
|  
| Access Remove Update and Link column|

    
        <%-- 
                                              <c:if test="${USER.inRole['PC']}">
                                            <th width="40px">Remove</th>
                                            <th width="30px">Update</th>
                                            <th width="30px">Link</th>
                                              </c:if>
                                              --%>  
  
  
|  
| Access approval|

    
        <%-- 
                                                        <c:when test="${USER.inRole['PC']}">
                                                        --%>
                                                         <c:when test="${(CLIENT.type.type=='R') && USER.hasAccess['accessTrac']}">
                                                             <p class="centered_image"><img src="/images/icons/needApproval.png"/></p>
                                                         </c:when>  
  
  
|  
| Unapprove Activity Trac|

    
        <%--<c:when test="${USER.inRole['PC']}">--%>
                                                         <c:when test="${(CLIENT.type.type=='R') and USER.hasAccess['unapprovFormTrac']}">
                                                             <a href="/secure/emis/create.do?id=${list.id}&action=unapprove"><p class="centered_image"><img src="/images/icons/approvedIcon.png"></p></a>
                                                         </c:when>  
  
  
|  
|  
|

    
          
      
  
  
|  
|  
|

    
          
      
  
AS (Account Services)|  
|  
|

    
          
      
  
AM (Account Managers)|  
|  
|

    
          
      
  
IMP (Implementation)|  
|  
|

    
          
      
  
IS (Information Systems)|  
|  
|

    
          
      
  
ISD (Internet Services)| proofingList.jsp| Release Sample|

    
        <%--<c:if test="${USER.inRole['OPS'] or USER.inRole['DP'] or USER.inRole['ISD']}">--%>
    <%--     <c:if test="${(CLIENT.type.type=='R') and USER.hasAccess['releaseSample']}"> --%>
        <c:if test="${((USER.rootClient.type.type=='R') and USER.hasRootPermission['releaseSample'])}">
            <c:set var="admission" value="true" />
        </c:if>  
  
  
| ../template/secure.jsp| Access Feature Setup|

    
        <!--
                <template:menuItem id="featureSetupTab" cssClass="dropDwonMenuButton" href="#" label="Feature Setup" tab="featureSetup" display="${USER.inRole['ISD']}"/>
                -->
                <template:menuItem id="featureSetupTab" cssClass="dropDwonMenuButton" href="#" label="Feature Setup" tab="featureSetup" display="${USER.hasAccess['featureSetup']}"/>  
  
ADMIN (Administrator)| ../emis/home.jsp| Create Activity Log|

    
        <%-- 
                    <c:if test="${USER.inRole['PC']||USER.inRole['ADMIN']}">
                        <a href="/secure/emis/create.do"><img src="/images/buttons/CreateNewActivityLog.png" /></a> 
                    </c:if>
                    --%>
                    <c:if test="${(CLIENT.type.type=='R') and USER.hasAccess['createFormTrac']}">
                        <a href="/secure/emis/create.do"><img src="/images/buttons/CreateNewActivityLog.png" /></a>  
  
  

  3. [Meetings with DSI](https://i3dev.easyredmine.com/projects/urf_mgmt/wiki/Dsi_meeting)
    1. [06/06/2013 meeting](https://i3dev.easyredmine.com/projects/urf_mgmt/wiki/662013_meeting_):

      1. General:
        1. Lots of methods are having 'void' return type. If so, how do you determine whether the method/operation success or fail?  
 **SM: 'void' return types are mainly insertOrUpdate() or delete() from DAO
objects where an entity/domain object is passed as a parameter. For
insertOrUpdate(), success/failure can be detected by inspecting the method
parameter. For delete(), success/failure can be detected with additional
logic. We will also use the exception handling mechanism to detect
success/failure of such methods.**

        2. Will the parameter to methods be the entity/domain object? In this case, the object will be updated after perform the DB actions.  
 **SM: Method calls on DAO pass the corresponding Entity/Domain objects as
params.**

        3. Please include the class diagrams.  
 **SM: ok**

      2. FeatureAccessDao, how about any changes around the 'add' capability? If exist already, change to the params needed?  
 **SM: For the 'add' capability, the existing method signature public void
insertOrUpdate(List <FeatureAccess> access) needs no change.**

      3. UserRoleDao:
        1. findByUser: do we need findByRole()?  
 **SM: We need public List <UserRole> findByRole(Role role) also in
UserRoleDao. Design doc will be updated accordingly.**

      4. ClientService:
        1. Should there be a getChildClients(parentClient)?  
 **SM: The existing system does not define this method. We can include this
later if we find it necessary.**

        2. getFeatureDefinitions: how exactly to handle/differentiate whether to "fetch all internal features also" vs "fetch features turned on for this client only"? Please clarify how this will work for different kind of users.  
 **SM: getFeatureDefinitions() executes while creating a Basic client. This
method should return non-internal features only and must exclude internal
features. The user that create a Basic client is Root Admin or Root "PC"/"ISD"
user.**  
** ***LZ: After we introduce ROLE logic, only those users who have access to
"Client Management" feature can create a client. While "Client Management" is
a internal feature for Root users.**

      5. RoleService:
        1. findByRole: Please be explicit for the method names: findUsersByRole  
 **SM: ok. Design doc will be updated accordingly.**

        2. Similarly, findByFeature: findRolesByFeature  
 **SM: ok. Design doc will be updated accordingly.**

        3. And given above two, wouldn't you need findFeatureByRole, findFeatureByUser also?  
 **SM: List <FeatureDefinition> findFeatureByRole(Role role) is needed in
RoleService.  
List<FeatureDefinition> findFeatureByUser(User user) would be a useful method
in UserService.  
Design doc will be updated accordingly.**

        4. deleteAlertsByRole: are we doing this by Role or by User now?  
 **SM: deleteAlertsByRole() and deleteAlertsByFeature() should be removed from
RoleService. deleteAlert() will be added to UserService. Design doc will be
updated accordingly.**

      6. UserService:
        1. getFeatureAccessByUserAndClient: from User, you should know Client already. Shouldn't need to pass in explicitly.  
 **SM: ok**

        2. getFeatureAccessByUserAndClient: in comments, you said this should not be used anymore. My suggestion is actually keep it but modify the logic inside it to get the featureAccess via Roles. Since I see this as a very commonly called method throughout the application for 'permission check' type of thing. Or introduce the method I propose below.  
 **ok, we will implement the suggested method. Design doc will be updated
accordingly.**

        3. updateFeatureAccess: comments indicate this method shouldn't be used anymore, planning to scrub through code to remove usage of this method? Please indicate the action item for this method.  
 **SM: updateFeatureAccess() will be replaced by public void updateRoles(User
owner, List <UserRole> roles) in UserService.**

        4. getManageableRoles & getManageableLevels: I'm not sure if you want to keep using these method. There shouldn't be differentiation between 'manageable' vs 'nonmanageable'. Also the 'levels' are not really applicable anymore. Code around these method should be cleaned up.  
 **SM: ok**

        5. Suggestion: add <Boolean> checkFeatureAccess(User, Feature). This would be call by functional modules quite commonly for ACL and show/hide certain things.
      7. Controller components
        1. I'm not quite clear why we need to use all these 'XXXXForm' objects around the controller classes?  
 **SM: These methods exist in the controller components and are mainly used to
display the forms through UI.**

      8. Models and JSP: Seems like still need work around these sessions.
    2. [06/06/2013 meeting](https://i3dev.easyredmine.com/projects/urf_mgmt/wiki/662013_meeting_):
      1. ## Test cases:[](https://i3dev.easyredmine.com/projects/urf_mgmt/wiki/6132013_meeting#Test-cases)

The test cases are too brief, and I forwarded a sample from our message
manager integration for their reference.  
  

## Feature and Sub-Features:

Ben and I finalized the documentation, and we need review this internally with
the parties who are actually use infoTrac. Once we finalize this internally, I
will forward this to DSI. However, this shouldn't be a blocker for DSI to
start development. DSI can create any test roles to test their logic during
development.  
  

## Design doc:

Current design has lots of detail information in the application component
function details. For the current logic, their listed the flow and they
proposed the changes. Could you update the flow with sequence diagram for the
proposed flow?  
Also, please include the class diagram in the design doc. The following are
some questions that I had by reviewing the design doc.  
  

### 1.BRQ-01 (Client Management):

a.When assigning features to a client, will the default features which apply
to all user be included, for example, by default those features will be
checked and the check box will be editable? For example, Inventory & Job
Tracking and etc. are default features for all basic clients' users, and Alert
&update user profile and etc. are default to all users.  **How will you manage
those default features?**

 **SM:**  When assigning features to a client, default features will be
displayed as checked and those check boxes will be non-editable.
FEATURE_DEFINITION table has no column to identify a feature as 'default'.
Therefore it will identified with a method in the code.  
 **LZ:**  Please handle it as other features, and the user need check to turn
the permission on for that feature.  
 **SM:**  So, no feature should exist as default feature. All features will be
handled in the same way and the user needs to check to turn the permission on
for all features.  
 **LZ:**  At this moment, yes, we will treat them the same way and users need
turn the permissions on for the roles. Again, we will try to avoid the hard-
coded logic in future implementation.

### 2.BRQ-02 (User/Role Management):

a.*When a user creates another user, can he/she assign more roles than he/she
has to new created user?* For example, User UA under client C, and UA has
permission to create users. Under C, there is a role list "Manager",
"Production", "Developer", "Implementation" and etc. While UA has role of
"Manager", "Production", when UA create a new user UB, can UA assign other
roles such as "Developer", "Implementation" to UB?

 **SM:**  When a user creates a new user, the new user can be assigned any
role available for the corresponding client (as outlined in the given
example).  
 **LZ:**  Per Ben, this is OK.

b.*How will the roles be visible to the user themselves?* For example, when a
user login, when the user views its own profile (under home tab), will he/she
sees his/her roles? I understand the user may not able to modify his roles.

 **SM:**  Under home tab, a box will be included to display all roles assigned
to the logged in user.  
 **LZ** : Will this be included in the box on right top, together with user's
other information such as email, account manager and etc? Will the role be
extensible to see a list of features under that role, or you have any way to
display all the features that the user have permission to access?  
 **SM:**  The box on the right top on the Home tab will be used. The roles
will be extensible to display the features under it.  
 **LZ:**  Got it.

### 3.Work flows:

Could you list your new flows also. With the role entity was introduced, even
the flow doesn't change; the method signature may change also. Could you
update the flow accordingly? For example, for flow 6, create new user, the
method signature is still returning list of Feature and etc.

 **SM:**  All flows with their method signatures will be reviewed again.  
 **LZ:**  Ok.

### 4.Application Component functional details - workflow 1:

a.Create new client in "Changes required in data model": if feature setting is
no longer a part of client creation process,  **how will we manage the feature
setting for a client?**  When the features for a client will be saved?

 **SM:**  When a client gets created (without any feature setting), a link to
feature setting page appears at the bottom of the client profile page.
Therefore, assigning features to a client in "Feature Setting" page is treated
as updating the client.  
 **LZ** : Per Ben, creating client will not create the feature, and feature
creation is under update the client.

b.Under current workflow (The main steps in moving on to 'Feature Setting'
screen from 'Create Client' screen are the following- ): "feature setting" can
be accessed as the design doc mentioned, also, "feature setting" link can be
clickable to access "feature setting".

 **SM:**  yes

c.Also for the changes proposed to current workflow, if
"CreateClientController call to getFeatureDefinitions() on ClientService
should be removed and CreateClientController creates an instance of
CreateClientForm without List<FeatureDefinition>" (1 & 2), how will you setup
the features for a client? If no such setting, how will you manage roles to
access features only subscribed by that client?

 **SM:**  After creating the client, it can be assigned features by clicking
on "Feature Setting" link on client profile page. After selecting features,
save button will be clicked to execute client update in the background.  
 **LZ:**  Ok.

### 5.Workflow2:

didn't mention how the features for a client got solved. Also this is not
mentioned at workflow1. "Feature setting" should be able to update the feature
list for a client.

 **SM:**  Client update takes place in 2 ways. 1. Client info can be changed
in "Account Information" page and saved. 2. Client can also be updated by
adding/removing features in the "Feature Setting" page. Workflow 2 describes
case [#2](https://i3dev.easyredmine.com/issues/2 "Bug: test notif \(Closed\)")
where feature settings to a client are changed. When a client is created and
saved for the first time, no features are set for it. When the client is
updated with feature setting, the feature info gets saved in the database.  
 **LZ:**  got it.

### 6.Role entity:

a.Please add "created_time", "created_by", "last_modified", "updated_by" for
research purpose, where the updated_by and created_by should be usr_id (refer
to usr table)

 **SM:**  ok

b.It should contain a list of features for that role (refer to feature_access)

 **SM:**  Features are mapped to client and sub-features to role. In order to
keep the entity structure consistent with other entities and for ease of
implementation of many-to-many relationship between ROLE and
FEATURE_DEFINITION the list of features will be constructed dynamically rather
than declaring a property for it.  
 **LZ:**  OK  


### 7.UserRole entity:

similar to Role model, please add the above information.

 **SM:**  ok

### 8.Methods:

please fill in the parameters for the methods. For example in
FeatureAccessManager class "public List<FeatureDefinition>
getNonInternalFeatureDefinitions()".

 **SM:**  ok

### 9.FeatureDefinitionDao interface:

a.Is there a way to know this is a default feature apply to everyone or not,
for example, "Alert" and "update profile". Also, "job tracking" and
"inventory" default to all basic clients' user?

 **SM:**  A method will be added to identify default features.  
 **LZ:**  Ok

b.Which function you will call for InfoImage and wholesaler

 **SM:**  getAll() is for InfoImage and getAllNonInternalType() for
Wholesale/Basic clients.  
 **LZ:**  Ok

### 10.FeatureDao interface:

a.Which method you will call for InfoImage and wholesaler. Are handling
everything within the getAll()?

 **SM:**  Each Feature is identified by the corresponding Client and Feature
Definition. So this question does not apply for FeatureDao. It applies to
FeatureDefinitionDao and it has been answered there.  
 **LZ:**  will you also map the features in FEATURE_DEFINITION & CLIENT for
infoimage to FEATURE table?  
 **SM:**  We will map the feature definitions in FEATURE_DEFINITION to FEATURE
for infoimage.

### 11.RoleDao Interface:

a.Looks OK to me  
b.Please be advised when deleting a role, the user who is in this role will be
got affected and also the alerts corresponding to the features of this role
will be got affected.

 **SM:**  yes

### 12.FeatureAccessDao Interface:

a.You may need add insertOrUpdate(Role role, List<Feature> features) to insert
or update feature_access table.

 **SM:**  FeatureAccessDao already has a insertOrUpdate(List<FeatureAccess>
access) to insert or update feature_access table.  
 **LZ:**  This will also work.

### 13.UserRoleDao Interface:

a.deleteAllByUser(User user) ? please give me a case we need this method

 **SM:**  This method has no use and should be removed.  
 **LZ:**  Ok

b.deleteAllByRole(Role role) ? please give me a case we need this method

 **SM:**  A role can be deleted from the "Available Roles" page. When a role
gets deleted its corresponding userRoles can be deleted using this method.  
 **LZ:**  Ok  
  

### 14.ClientService:

a.public List<FeatureDefinition> getFeatureDefinitions() should return all the
available feature for the selected/created client. Please pay attention to
Root, Wholesale and basic client.

 **SM:**  yes

### 15.UserService

a.For the removed method, will you replace them with new method? For example:  
public void insert(User user, List<ClientAccess> clientAccess,
List<FeatureAccess> featureAccess, User creator)

can be replaced with

public void insert(User user, List<ClientAccess> clientAccess, List<Role>
roles, User creator)

 **SM:**  Each removed method will have its corresponding new method in the
component.  
 **LZ:**  Got it.

b.Is deleteAlert(Alert alert, User user) necessary? Currently existing system
also need remove alerts (un-check) for a user.

 **SM:**  The existing method updateAlerts(List<Alert> alerts) can be used to
remove alerts. So, this new method is not necessary.  
 **LZ:**  Ok.

### 16.FeatureAccessManager:

a.What is var in "public List<FeatureAccess> findByUserAndClient(User user,
Client client, boolean var)" (1st method)

 **SM:**  var stands for activeOnly parameter. The parameter name in the code
will remain unchanged.  
 **LZ:**  Ok

    3. 6/20/2013 meeting:

      1. please see 06202013 meeting for the detail.
    4.   

6/25/2013 meeting

We skipped today's meeting due to today is a holiday at DSI and we emailed
them regarding today's topic:

      1. Gave "OK" for DSI design document(with some minor modification), and they will start implementation starting 6/25.
      2. Request DSI to update the test cases and design documentation(according to attachment) before next Tuesday (7/2).
      3. Request DSI to update their timeline on redmine and provide the ownership for each component before this Thursday (6/27).
      4. Request them to use Spring MVC, instead of Web flow.
      5. Request the code drop every Tuesday (By the end of the day) and for the first code drop will be on next Tuesday (7/2).
      6. Request weekly demo every Thursday, and the first demo will be starting on 7/11 (since 7/4 is a holiday at InfoImage).
250

  

    5. # 6/27/2013 meeting

      1. Please estimate the work for re-factoring the code from web flow to MVC for the code that you touched such as client management, user management, user profile and etc, and update the timeline on redmine by the end of this week.
      2. Please update the timeline on redmine to include the whole cycle of this project (including testing at DSI and final delivery date to Infoimage) by the end of this week.
      3. Please update the tickets to include both start date and due date on redmine by the end of this week.
      4. Test cases is on redmine, we are going to review and provide feedback by 7/2.
      5. First code drop will be 7/4 and moving forward will be every Thursday
      6. First demo will be on 7/11 and moving forward will be every Thursday.
      7. Please finish the design document by next Tuesday(7/2)
    6. # 07/02/2013 meeting

      1. Ben discussed the time estimation with DSI and DSI will re-evaluate and provide the detail quota back to us by the end of this week.
      2. They updated the design doc and we will review it.
      3. Regard the feature migration (ex, migrate MM2.2 to MM3.0) they will do the estimation on UI & script level quota.
      4. Regarding ticket 517 on DSI redmine, it include all the hard-coded logic for role and features.
      5. For seleninum tool, we urged them to research on play around it, even for only recording and re-play for the regression testing purpose and we will come back to this topic after 2 weeks.
      6. Due to this Thursday is a holiday at Infoimage side, meeting has been cancelled and the first code drop and demo will be starting on 7/11, and we will need the external login for us to login and review the site.
      7. For the test cases, we will get Bhavani involved to review the cases, and she will probably need 2 weeks.
      8. Another item is for the existing Features and sub-feature definitions which are currently under the infoImage internal discussion, as we checked with DSI, this do not block DSI to start implementation.
    7. # 8/1/2013 meeting

# 250

  4. [Design docs](https://i3dev.easyredmine.com/projects/urf_mgmt/wiki/Urf_mgmt_design_doc)
    1. # Infotrac AI Technical Design Document

* * *

  
  

# Introduction

  

## Purpose/Objective Summary

Brief description of what this project/feature/enhancement is about  
  

## Scope

List of the itemized features of what's inside/outside of the scope of current
project/phase:  
  

## Assumptions

List of assumptions made during this design:  
 **IMPORTANT:**  All assumptions need to be confirmed with corresponding
stake-holder during design review. Assumptions would likely become
Dependencies upon confirmation/design-review  
  

## Dependencies

List of all dependency component/service/library needed for this design:

* * *

  

# Requirements

  
  

## Business Requirements & Use Cases

 **(Required)**  List of all needs/requirement from business/end-user
perspective.

ID| Title| Details| ScreenMock| Importance  
---|---|---|---|---  
BRQ-01| Client Management|  **Requirement:**  Allow InfoIMAGE administrator(s)
to Create/Update/Deactivate client(s) and control what functional component
(aka feature) does corresponding client(s) have access to. Only InfoIMAGE
employee should be allowed access to this capability.  
 **Use Case 1:**  A new client (ABCD, a basic client under infoImage) signed
contract with InfoIMAGE to use statement processing only. InfoIMAGE Account
Manager login to InfoTRAC and create a brand-new client ID (ABCD). Assign only
the 'ActivityTrac', but none other features.  
Going to Dashboard view should see the newly created ABCD show up.  
Clicking on the ABCD should allow InfoIMAGE admin to create initial user(s) &
role(s) under the ABCD client. (see BRQs below)  
 **Use case 2:**  InfoImage user creates a new wholesale client.  
 **Use case 3:**  InfoImage user creates a basic client under a new created
wholesale client.  
 **Use case 4:**  InfoImage user assigns features to a basic client.  
 **Use case 5:**  InfoImage user adds a new feature to a basic client.  
 **Use case 6:**  InfoImage User deletes/disable a feature for a basic client.  
 **Use case 7:**  InfoImage User upgrade a feature from A to B.  
For the above creating a client (case 1-3), please double check updating that
kind of client (includes delete/disable).  
 **Remarks:**  Ability of turning on/off features for client(s) should be
control via 'permission' as well. So that only the InfoIMAGE user(s) that have
certain role can perform such operation.  
Example:  
1) Two roles exists under InfoIMAGE: 'Account Manager', 'Production Control'  
2) Introduce feature/permission 'Client Mgmt' that control access to this view  
3) Only grant 'Client Mgmt' to 'Account Manager', NOT 'Production Control'|  
| P0 - Show Stopper  
BRQ-02| User/Role Management|  **Requirement:**  Allow any (InfoIMAGE/Client)
administrator(s) to Create/Update/Remove user accounts and roles under the
corresponding CID. Users/Roles created under a CID should be
accessible/utilized within that single CID only, no role/user sharing across
organization/CID should be allowed. Users created under a wholesaler/parent
CID should have access to child CID based on the role/permission specified
correspondingly. The ACL should be same as how BRQ-01 describes.  
A new view should be introduced to manager the many-to-many mapping between
users and roles created under a certain CID.  
 **Use Case 1:**  Create users within same organization  
1) User accounts '[john.doe@abcd.com](mailto:john.doe@abcd.com)',
'[jane.smith@abcd.com](mailto:jane.smith@abcd.com)',
'[big.boss@abcd.com](mailto:big.boss@abcd.com)' are created under ABCD.  
2) Roles 'manager', 'teller' created under ABCD.  
3) Assign '[john.doe@abcd.com](mailto:john.doe@abcd.com)' to have 'manager'
role, '[jane.smith@abcd.com](mailto:jane.smith@abcd.com)' to have 'teller'
role, '[big.boss@abcd.com](mailto:big.boss@abcd.com)' to have both 'manager'
and 'teller' roles.  
 **Use Case 2:**  InfoImage user create basic client's (under infoImage) user.  
 **Use case 3:**  InfoImage user create wholesale client's user. Please double
check the sub client access for wholesale user.  
 **Use case 4:**  Wholesale client's user create his basic client's user.  
 **Use case 5:**  InfoImage user create basic client's (under a wholesale)'
user  
In each of the above case, please consider assigning user with single and
multiple roles, and also roles with overlapping features and without. For each
kind of user (InfoImage, basic and wholesale), please verify updating a user
(includes delete/disable), include the current login user.  
 **Remarks:**  
1). In the existing system, the wholesale user can access the all features of
of a child client subscribed if this user has access to this child client.  
2). Current user login id is formated as "${cid}_${someUniqueName}".|  
| P0 - Show Stopper  
BRQ-03| Role/Permission Management|  **Requirement:**  1). Consolidate
InfoTrac code base's hard-coded Roles to database. 2). Create/Remove/Update
role(s) for a given client and assign zero, one or many features/permissions
to the role. Only the granted ones to the client should be shown in this GUI
view.  
 **Use Case: 1**  Grand access based on permissions  
1) Roles 'branch manager', 'marketing manager', 'teller' created under ABCD.  
2) Features 'ActivityTrac' and 'Message Manager' are granted for ABCD  
3) Permission of 'View Jobs', 'Approve Jobs' exists under 'ActivityTrac'  
4) Permission of 'View MM campaign', 'Create/Edit MM campaign', 'Approve MM
campaign' exists under 'Message Manager'  
5) Grant access of all permissions to 'branch manager'  
6) Grant access of only 'Create/Edit MM campaign' to 'marketing manager'  
7) Grant access of only 'View Jobs', 'View MM campaign' to 'teller'  
8) Results: 'teller' can only view job and MM campaigns, but cannot
create/edit anything. 'market manager' can only create MM campaign, but
require 'branch manager' to approve them.  
 **Use case 2:**  Add/enable a feature to a role.  
 **Use case 3:**  Delete/disable a feature from a role.|  
| P0 - Show Stopper|  
 **Use case 4:**  verify all the touched features such as MM, ActivityTrac and
etc.| BRQ-04| Migration|  **Requirement:**  Migrate Current InfoTrac user to
new model. Please prepare the procedure and programs to migrate current
InfoTrac user to new model.|  
| P0 - Show Stopper  
  
  

## Functional Requirements & Use Cases

 **(Required)**  List of all needs/requirement from engineering/functional
perspective.

ID| Title| Details| Bus. Req. Ref.| Importance  
---|---|---|---|---  
FRQ-01| Easy Feature/Permission Maintenance|  **Requirement:**  Allow
InfoIMAGE developers to easily add/update/remove Features/Permissions within
InfoTRAC application. No GUI is required for this. However, need to put
structure in place so that InfoIMAGE developers can easily administrate this
via either a ENUM class and/or database records. (e.g. database records with
corresponding ENUM values. So that java-code could just use the ENUM values
for implementation easily.  
 **Use Case:**  
1) Existing Feature 'Message Manager', Existing Permission 'Create/Edit MM
campaign'  
2) Enhancement request come and need to break the single permission down into
two separate permission of 'Create MM campaign' and 'Edit MM campaign'  
3) Developer should able to just following and be done with the change  
3a) add/update minimal database record(s)  
3b) add/update corresponding ENUM class value(s)  
3c) update corresponding MM code to check against new/updated ENUM values|  
| P0 - Show Stopper  
  
  

## Performance & Scalability Requirements (SLA)

 **(Required)**  List of all needs/requirement from Performance perspective.

ID| Title| Details| Importance  
---|---|---|---  
PRQ-01| Operation Efficiency| Since the user/role/permission check will be
happening on every single page request. Need to ensure such check is extremely
efficient. It shouldn't rely on the check to query DB every single request.
Probably cache the ACL information within memory (session or application
context) to ensure efficiency. Need to keep in mind any change of
role/permission settings need to be reflected correctly. It's okay to require
user to re-login in order to get most up-to-date ACL settings, but no further
than that.| P0 - Show Stopper  
  
  

## [QA/Test
Requirements](https://i3dev.easyredmine.com/projects/urf_mgmt/wiki/QATest_Requirements)

 **Test Specification Design ( _Outline only_ ):**  

List of all needs/requirement from QA/Testing perspective:

The test case document is attached with this document. All tests will be done
manually.  
\---  
  

# Design

## Architecture & Workflow

 **Workflow:**

1\. Create new client  
2\. Update client feature setting  
3\. Create new role  
4\. Update role  
5\. List roles  
6\. Create new user  
7\. Update user  
8\. View login user's profile

## Data Model changes (ER diagram & ddl.sql)

The data model is in the attachment.

## Application component functional details

### Workflow 1: Create New Client

 **Requirement:**

The following changes are required during creating a new 'Basic' client by the
Root Admin-  
1\. Currently the system displays 'Feature Setting' screen after clicking on
'Save' button on 'Create Client' screen. The system should not move on to
"Feature Setting' duruing creating a new Basic client and should save client
data in the database after clicking 'Save' button on 'Create Client' screen.

 **Current data model:**

The system saves client data in CLIENT table and clients' feature setting in
the FEATURE table.

 **Changes required in the data model:**

No changes are required in the CLIENT or FEATURE table. Since 'Feature
Setting' is no longer a part of create client process, no feature setting
record will be created during creating a client.

 **Current workflow:**

The main steps in displaying the "Create Client" screen are the following-  
1\. Browser sends request for 'Create new client' page  
2\. WebFlow component calls getCreateClientForm() on CreateClientController  
3\. CreateClientController calls getFeatureDefinitions() on ClientService that
returns List<FeatureDefinition>  
4\. CreateClientController creates an instance of CreateClientForm using the
List<FeatureDefinition>  
5\. CreateClientController returns CreateClientForm to WebFlow component  
6\. WebFlow component provides CreateClientForm to createClientForm.jsp  
7\. WebFlow component returns content to browser

The main steps in moving on to 'Feature Setting' screen from 'Create Client'
screen are the following-  
8\. Browser sends request to save client data  
9\. WebFlow component executes isBasicClient decision state that returns TRUE  
10.WebFlow component invokes updateFeatureSetting.jsp  
11.WebFlow component returns content to browser

The main steps in saving new client data are the following-  
12\. Browser sends request to save client data  
13\. WebFlow component calls create() on CreateClientController  
14\. CreateClientController calls insert() on ClientService  
15\. ClientService calls insert() on ClientManager to save client data  
16\. ClientService calls insertOrUpdate() on FeatureManager to save feature
setting data  
17\. WebFlow component invokes clientCreateConfirm.jsp  
18\. WebFlow component returns content to browser

 **Changes proposed to current workflow:**

The following steps from the current workflow needs to be changed-  
3\. ClientController call to getFeatureDefinitions() on ClientService should
be removed  
4\. ClientController creates an instance of CreateClientForm without
List<FeatureDefinition>  
9\. Framework calls create() on ClientController  
16\. ClientService call to insertOrUpdate() on FeatureManager should be
removed

 **Sequence Diagram of Workflow 1**

### Workflow 2: Update Client Feature Setting

 **Requirement:**

The following changes are required in the "Feature Setting" screen during
updating a Basic client by the Root Admin-  
1\. The system should allow the user to select features as shown in "Feature
Setting" mockup screen.  
2\. The system should not display features marked as 'internal'.

 **Current data model:**

The system displays features in "Feature Setting" screen based on data from
FEATURE_DEFINITION and FEATURE table.

FEATURE_DEFINITION table has the following limitations-  
1\. There is no column to indicate whether an entry is a feature or a sub-
feature.  
2\. There is no column to indicate whether an entry is an 'internal' feature
or not.

 **Changes required in the data model:**

The following changes are required in the FEATURE_DEFINITION table-  
1\. 'parent_code' column will be added to indicate whether an entry is a
feature or a sub-feature. A null value in the column indictaes a feature and a
not null value a sub-feature.  
2\. 'type' column will be added to indicate whether an entry is an 'internal'
feature or not. A value of 'R' in the column will indicate that its an
internal feature and a null value indicates its a non 'internal' feature.

 **Current workflow:**

The main steps in displaying the "Feature Setting" screen are the following-  
1\. Browser sends request for 'Feature Setting' page  
2\. WebFlow component calls getClientProfileForm() on ClientProfileController  
3\. ClientProfileController calls getFeaturesByClient() on ClientService  
4\. ClientService calls findByClient() on FeatureManager  
5\. FeatureManager calls findByClient() on FeatureDaoImpl  
6\. FeatureDaoImpl executes named query "getFeaturesByClient" on FEATURE table
and returns the result as List<Feature>  
7\. FeatureManager calls getAll() on FeatureDaoImpl  
8\. FeatureDaoImpl executes named query "getAll" on FEATURE_DEFINITION table
and returns the result as List<FeatureDefinition>  
9\. Consolidated List<Feature> becomes available in getClientProfileForm() on
ClientProfileController  
10.ClientProfileController creates an instance of ClientProfileForm using the
List<Feature>  
11.ClientProfileController returns ClientProfileForm to WebFlow component  
12.WebFlow component provides ClientProfileForm to clientProfileForm.jsp  
13.ClientProfileForm.jsp returns content to WebFlow component  
14.WebFlow component returns content to browser

The main steps in saving feature setting data are the following-  
15\. Browser sends request for saving 'Feature Setting'  
16\. WebFlow component calls updateFeatures() on ClientProfileController  
17\. ClientProfileController calls updateFeatures() on ClientService  
18\. ClientSrevice calls insertOrUpdate() on FeatureManager  
19\. FeatureManager calls insertIrUpdate() on FeatureDaoImpl  
20\. FeatureDaoImpl saves all features in FEATURE table and return  
21\. WebFlow component invokes updateFeaturesConfirm.jsp  
22\. The content from JSP is returned to browser

 **Changes proposed to current workflow:**

The named query "getAll" in step 8 of 'Current Workflow' acts according to
existing data model and therefore is unable to serve the enhancement
requirement.  
A new named query 'getAllNonInternalType' is required that returns features
marked as non-internal where each feature comes with its child features. The
following changes are proposed to the the current workflow for the new named
query -

7\. FeatureManager calls getAllNonInternalType() on FeatureDefinitionDaoImpl  
8\. FeatureDefinitionDaoImpl executes named query "getAllNonInternalType" on
FEATURE_DEFINITION table and returns the result as List<FeatureDefinition>

If features are removed from client, the following steps will be executed
after step 20-  
21\. ClientService calls deactivateByClientAndFeature() on FeatureDaoImpl to
deactivate features from client  
22\. ClientService calls deleteAlerts() on AlertService  
23\. AlertService calls deleteByClientAndFeature() on AlertDaoImpl to remove
alerts from user  
24\. Framework invokes updateFeaturesConfirm.jsp  
24\. The content from JSP is returned to browser

 **Sequence Diagram of Workflow 2**  
  
  

### Workflow 3: Create New Role

 **Requirement:**

Role is a new entity introduced in Infotrac AI. Following are the requirements
during creating a new Role-  
1\. Each client will define multiple roles for itself.  
2\. A role has a unique name within a client and maps to multiple features
available to the client.

 **Current data model:**

The system does not have a table corresponding to a role.

 **Changes required in the data model:**

The system saves Role data in ROLE table and the corresponding feature data in
FEATURE_ACCESS table.

 **Current workflow:**

Currently role is a hardcoded property within a user object. There is no
workflow avaialble for managing roles.

 **Proposed workflow:**

The main steps to display "Create new Role' screen are the following-  
1\. Browser sends request for 'Create new Role' page  
2\. Framework calls getCreateRoleForm() on RoleController  
3\. RoleController calls getFeatures() on ClientService that returns
List<Feature>  
4\. RoleController creates an instance of CreateRoleForm using the
List<Feature>  
5\. RoleController returns CreateRoleForm to Framework  
6\. Framework provides CreateRoleForm to createRoleForm.jsp  
7\. Framework returns content to browser

The main steps in saving new role data are the following-  
8\. Browser sends request to save role data  
9\. Framework calls create() on RoleController  
10.RoleController calls createOrUpdate() on RoleService  
11.RoleService calls insertOrUpdate() on RoleDaoImpl to save role data  
12.RoleDaoImpl executes insertOrUpdate() to save role data in ROLE table  
13.RoleService calls insertOrUpdate() on FeatureAccessDao to save feature
access data in FEATURE_ACCESS table  
14.Framework invokes roleCreateConfirm.jsp  
15.Framework returns content to browser

 **Sequence Diagram of Workflow 3**  
  

### Workflow 4: Update Role

 **Requirement:**

Role is a new entity introduced in Infotrac AI. Following are the requirements
during updating a Role-  
1\. A role has a unique name within a client and maps to multiple features
available to the client.

 **Current data model:**

The system does not have a table corresponding to a role.

 **Changes required in the data model:**

The system saves Role data in ROLE table and the corresponding feature data in
FEATURE_ACCESS table.

 **Current workflow:**

There is no workflow available for updating roles.

 **Proposed workflow:**

The main steps to display "Update Role' screen are the following-  
1\. Browser sends request for 'Update Role' page  
2\. Framework calls getRoleProfileForm() on RoleController  
3\. RoleController calls getRole() on RoleService that returns the role  
4\. RoleController calls getFeatureAccess() on RoleService that returns the
List<FeatureAccess>  
5\. RoleController creates an instance of RoleProfileForm using the role  
6\. RoleController returns RoleProfileForm to Framework  
7\. Framework provides RoleProfileForm to roleProfileForm.jsp  
8\. Framework returns content to browser

The main steps in saving role data are the following-  
9\. Browser sends request to save role data  
10\. Framework calls update() on RoleController  
11.RoleController calls createOrUpdate() on RoleService  
12.RoleService calls insertOrUpdate() on RoleDaoImpl to save role data  
13.RoleDaoImpl executes insertOrUpdate() to save role data in ROLE table  
14.RoleService calls insertOrUpdate() on FeatureAccessDao to save feature
access data in FEATURE_ACCESS table  
15.Framework invokes roleUpdateConfirm.jsp  
16.Framework returns content to browser

If features are removed from role, the following steps will be executed after
step 13-  
14\. RoleService calls deactivateByRoleAndFeature() on FeatureAccessDao to
remove feature access data in FEATURE_ACCESS table  
15\. RoleService calls deleteAlerts() on AlertService  
16\. AlertService calls deleteByUserAndFeature() on AlertDaoImpl to remove
alerts from user  
17\. Framework invokes roleUpdateConfirm.jsp  
18\. Framework returns content to browser

 **Sequence Diagram of Workflow 4**  
  
  
  
  

### Workflow 5: List Roles

 **Requirement:**

Role is a new entity introduced in Infotrac AI. Following are the requirements
for listing Roles-  
1\. Each role in the list displays its corresponding features.  
2\. A role can be deleted or updated from the list.

 **Current data model:**

The system does not have a table corresponding to a role.

 **Changes required in the data model:**

The system saves Role data in ROLE table and the corresponding feature data in
FEATURE_ACCESS table.

 **Current workflow:**

There is no workflow available for listing roles.

 **Proposed workflow:**

The main steps to display "Role List' screen are the following-  
1\. Browser sends request for 'Role List' page  
2\. Framework calls getRoleListForm() on RoleController  
3\. RoleController calls getRoles() on RoleService  
4\. RoleService calls findByClient() on RoleDaoImpl  
5\. RoleDaoImpl executes namedQuery 'byClient' on ROLE table and returns
List<Role>  
6\. RoleController creates an instance of RoleListForm using the List<Role>  
7\. RoleController returns RoleListForm to Framework  
8\. Framework provides RoleListForm to roleListForm.jsp  
9\. Framework returns content to browser

 **Sequence Diagram of Workflow 5**  

  

### Workflow 6: Create New User

 **Requirement:**

The following changes are required during creating a new 'Basic' customer
user-  
1\. Currently the system displays 'Feature Access' screen after clicking on
'Save' button on 'Create User' screen. The system should not move on to
"Feature Access' duruing creating a new Basic customer user and should save
user data in the database after clicking 'Save' button on 'Create User'
screen.

 **Current data model:**

The system saves user data in USR table and clients' feature access setting in
the FEATURE_ACCESS table.

 **Changes required in the data model:**

No changes are required in the USR or FEATURE_ACCESS table. Since 'Feature
Access' is no longer a part of create user process, no feature access record
will be created during creating a user.

 **Current workflow:**

The main steps in displaying 'Create User' form are the following-  
1\. Browser sends request to display 'Create User' page  
2\. WebFlow component calls getCreateUserForm() on CreateUserController  
3\. CreateUserController calls getManageableRoles() on UserService that
returns List<Role>  
4\. CreateUserController calls getManageableLevels() on UserService that
returns List<AdminLevel>  
5\. CreateUserController calls CreateUserForm() with List<Role> and
List<AdminLevel> on CreateUserForm that returns CreateUserForm

The main steps in moving on to 'Feature Access' screen from 'Create User'
screen are the following-  
6\. Browser sends request to save user data  
7\. WebFlow component executes isWholesaleBasicUser action state that returns
NO  
8\. WebFlow component calls isCustomerBasicUser() on CreateUserController  
9\. CreateUserController calls getFeaturesByClient() on ClientService that
returns List<Feature>  
10.CreateUserController sets List<Feature> to CreateUserForm  
11.WebFlow component invokes configFeatureAccess.jsp  
12.WebFlow component returns content to browser

The main steps in saving new user data are the following-  
13\. Browser sends request to save user data  
14\. WebFlow component calls create() on CreateUserController  
15\. CreateUserController calls createOrUpdate() on UserService  
16\. UserService calls insertOrUpdate() on FeatureAccessManager to save
feature access data  
17\. WebFlow component invokes createUserConfirm.jsp  
18\. WebFlow component returns content to browser

 **Changes proposed to current workflow:**

The following steps from the current workflow needs to be changed-  
3\. UserController call to getManageableRoles() on UserService should be
removed by call to getRolesByClient() on RoleService  
4\. UserController call to getManageableLevels() on UserService should be
removed as AdminLevel is no longer used  
5\. CreateUserForm() is called without List<AdminLevel> on CreateUserForm  
6-12. These steps no longer applies during create user, since features are not
displayed during creating a user.  
16\. UserService call to insertOrUpdate() on FeatureAccessManager should be
removed

 **Sequence Diagram of Workflow 6**  
  

### Workflow 7: Update User Role Setting

 **Requirement:**

The following changes are required during updating a 'Basic' customer user
role setting-  
1\. The system should display roles available for the client  
2\. The system should allow multiple roles to be selected for the client

 **Current data model:**

The system does not allow many-to-many relationship between users and roles.

 **Changes required in the data model:**

1\. The system saves user role mapping info in USER-ROLE table. Thi is an
intersection table between USR and ROLE table.

 **Current workflow:**

No workflow is vaialable to map roles to a user.

 **Proposed Workflow:**

The main steps in displaying 'Update User Role Setting' screen are the
following-  
1\. Browser sends request to display 'Update User' page  
2\. Framework calls getUserProfileForm() on UserController  
3\. UserController calls getById() on UserService that returns the user  
4\. UserController creates an instance of UserProfileForm with the user  
5\. Framework invokes userProfileForm.jsp using UserProfileForm  
6\. Framework returns content to browser

The main steps to update user role mapping info are the following-  
7\. Browser sends request to save user data  
8\. Framework calls update() on UserController  
9\. UserController calls createOrUpdate() on UserService  
10.UserService calls createOrUpdateUserRoles()  
11.UserService calls insertOrUpdate() on UserRoleDaoImpl to save role setting
data  
12.Framework returns content to browser

If roles are removed from user, the following steps will be executed after
step 11-  
12\. UserService calls deleteAlerts() on AlertService  
13\. AlertService calls deleteByUserAndFeature() on AlertDaoImpl to remove
alerts from user  
14\. Framework returns confirmation content to browser

 **Sequence Diagram of Workflow 7**  
  
  

### Workflow 8: View current login user's profile

 **Requirement:**

1\. In logged in usres' profile on top right box on home page, the system
should display all roles that belongs to the user

 **Current workflow:**

The main steps in displaying 'User Profile' box are the following-  
1\. Browser sends request to display the home page  
2\. The framework calls handleRequestInternal() on HomeController  
3\. HomeController calls getById() on UserService that returns the user  
4\. The framework invokes home.jsp using User with other form-backing objects  
5\. The framework returns content to browser

 **Proposed Workflow:**

After step 3 the following should be executed-  
4\. HomeController calls getRolesByUser() on UserService that returns roles
mapped to the user  
5\. The framework invokes home.jsp using User with other form-backing objects  
6\. The framework returns content to browser

 **Sequence Diagram of Workflow 8**  
  
  

## Application components

  
  

### Class Diagram

### Domain components

1.  **FeatureAccess**  
This component corresponds to "FEATURE_ACCESS" table in the existing data
model and will have the following changes:

Property| Status| Description  
---|---|---  
User user| Existing| This property will be removed as there will be no FK to
"USR" table.  
Feature feature| Existing| This property will be removed as there will be no
FK to "FEATURE" table.  
FeatureDefinition featureDefinition| New| This property will be added to
represent FK to "FEATURE_DEFINITION" table.  
Role role| New| This will be added to represent FK to "ROLE" table.  
  
2.  **FeatureDefinition**

This component corresponds to "FEATURE_DEFINITION" table in the existing data
model and will have the following changes:

Property| Status| Description  
---|---|---  
String parentCode| New| This will be added as "FEATURE_DEFINITION" will have
FK to itself.  
List<FeatureDefinition> children| New| This will be added to return the list
of sub-feature-definitions that belongs to a feature definition.  
FeatureDefinitionType type| New| This will be added to represent the type of
FeatureDefinition e.g. whether this is an internal feature or not.  
  
3.  **Role**  
This component exists in non-persistent form. This will be annotated
accordingly to correspond to the new "ROLE" table to be introduced in the
existing data model and will have the following properties:

Property| Status| Description  
---|---|---  
int Id| New| This property represents the PK to ROLE table.  
String code| New| This property represents the short description of the role.  
String name| New| This property represents the name of the role.  
Client client| New| This property represents the FK to "CLIENT" table.  
boolean active| New| This property represents whether the Role is active or
not.  
Calendar createdTime| New| This represents the instance the role was created.  
User createdBy| New| This represents the user who created the role.  
Calendar lastModified| New| This represents the instance the role was last
modified.  
User updatedBy| New| This represents the user who modified the role.  
  
4.  **UserRole**  
This will be a new component. It will correspond to the new "USER_ROLE" table
to be introduced in the existing data model and will have the following
properties:

Property| Status| Description  
---|---|---  
int Id| New| This property represents the PK to "USER_ROLE" table.  
User user| New| This property represents the FK to "USR" table.  
Role role| New| This property represents the FK to "ROLE" table.  
boolean active| New| This property represents whether the record is active or
not.  
Calendar createdTime| New| This represents the instance the user role setting
was created.  
User createdBy| New| This represents the user who created the user role
setting.  
Calendar lastModified| New| This represents the instance the user role setting
was last modified.  
User updatedBy| New| This represents the user who modified the user role
setting.  
  
5. **Alert**  
This component corresponds to "ALERT" table in the existing data model and
will have the following changes:

Property| Status| Description  
---|---|---  
Feature feature| Existing| This will be removed as an alert is identified by
the user and feature definition.  
FeatureDefinition featureDefinition| New| This will be added as an alert is
identified by the user and feature definition.  
  
  

### DAO components

1.  **FeatureDefinitionDao interface**  
This is a new component. It serves as an interface to FeatureDefinitionDaoImpl
which maps to "FEATURE_DEFINITION" table and have the following methods:

Method| Status| Description  
---|---|---  
public List<FeatureDefinition> getAll()| New| This method returns all internal
and non-internal feature definitions  
public List<FeatureDefinition> getAllNonInternalType()| New| This method
returns all non-internal feature definitions  
  
2.  **FeatureDao interface**  
This component serves as an interface to FeatureDaoImpl mapped to "FEATURE"
table and have the following changes:

Method| Status| Description  
---|---|---  
public List<FeatureDefinition> getAll()| Existing| This method needs to be
removed as it is appropriate to have this method in FeatureDefinitionDao  
  
3.  **FeatureAccessDao interface**  
This component serves as an interface to FeatureAccessDaoImpl mapped to
"FEATURE_ACCESS" table and have the following changes:

Method| Status| Description  
---|---|---  
public List<FeatureAccess> findByUser(User user)| Existing| This method will
be removed as in "FEATURE_ACCESS" there will be no FK to "USR" table  
public void deleteAllByUser(User user)| Existing| This method will be removed
as in "FEATURE_ACCESS" there will be no FK to "USR" table  
public List<FeatureAccess> findByRole(Role role)| New| This method will be
added as "FEATURE_ACCESS" will have FK to "ROLE" table. This returns a list of
feature access mapped to the given role.  
public List<Role> findByClientAndFeature(Client client, Feature feature)| New|
This method returns a list of roles mapped to the given client and feature.  
public void deactivateByRoleAndFeature(Role role, Feature feature)| New| This
removes the list of feature access mapped to the given role and feature.  
public void deleteByRole(Role role)| New| This method will be added as
"FEATURE_ACCESS" will have FK to "ROLE" table. This removes the list of
feature access mapped to the given role.  
public void deleteByClientAndFeature(Client client, Feature feature)| New|
This removes the list of feature access mapped to the given client and
feature.  
  
4.  **RoleDao interface**  
This is a new component. It serves as an interface to RoleDaoImpl which maps
to "ROLE" table and have the following methods:

Method| Status| Description  
---|---|---  
public Role getById(int id)| New| This method returns the role by the given id  
public void insertOrUpdate(Role role)| New| This method adds a new role or
updates an existing role  
public void delete(Role role)| New| This method deletes the given role  
public List<Role> findByClient(Client client)| New| This method returns a list
of roles mapped to the given client  
  
5.  **UserRoleDao interface**  
This is a new component. It serves as an interface to UserRoleDaoImpl which
maps to "USER_ROLE" table and have the following methods:

Method| Status| Description  
---|---|---  
public void insertOrUpdate(UserRole userRole)| New| This method adds a new
userRole or updates an existing list of userRroles  
public void delete(UserRole userRole)| New| This method deletes the given
userRole  
public void deleteAllByRole(Role role)| New| This method deletes the list of
userRoles mapped to the given role  
public List<UserRole> findByUser(User user)| New| This method returns a list
of userRoles mapped to the given user  
public List<UserRole> findByRole(Role role)| New| This method returns a list
of userRoles mapped to the given role  
  
6.  **AlertDao interface**  
This component serves as an interface to AlertDaoImpl mapped to "ALERT" table
and have the following changes:

Method| Status| Description  
---|---|---  
public void deleteByClientAndFeature(Client client, FeatureDefinition
featureDefinition)| New| This method deletes alerts for the given client and
feature definition  
public void deleteByClient(Client client)| New| This method deletes alerts for
the given client  
public void deleteByUserAndFeature(User user, FeatureDefinition
featureDefinition)| New| This method deletes alerts given by the user and
feature definition  
public void deleteByUser(User user)| New| This method deletes alerts for the
given user  
  
  

### DAOImpl components

1.  **FeatureDefinitionDaoImpl**
      * This component handles "FEATURE_DEFINITION" table entries and have methods modified or implemented according to FeatureDefinitionDao interface.
2.  **FeatureDaoImpl**
      * This component handles "FEATURE" table entries and have methods modified according to FeatureDao interface.
3.  **FeatureAccessDaoImpl**
      * This component handles "FEATURE_ACCESS" table entries and have methods modified or implemented according to FeatureDefinitionDao interface.
4.  **RoleDaoImpl**
      * This new component handles "ROLE" table entries and have methods modified or implemented according to RoleDao interface.
5.  **UserRoleDaoImpl**
      * This new component handles "USER_ROLE" table entries and have methods modified or implemented according to UserRoleDao interface.
6.  **AlertDaoImpl**
      * This new component handles "ALERT" table entries and have methods modified or implemented according to AlertDao interface.

### Service components

1.  **ClientService**

Method| Status| Description  
---|---|---  
public void insert(Client client, List<Feature> features)| Existing| As per
the new requirement, client has to be created in a single step without
associating feature setting. Therefore feature handling logic should be
removed from this method.  
public List<Feature> getFeatures(Client client, boolean activeOnly)| New| This
method returns the list of active features to be displayed on "Create New
Role" page for the given client.  
  
2.  **RoleService**

Method| Status| Description  
---|---|---  
public void createOrUpdate(Role role)| New| This method creates a new role or
updates an existing role for the client and maps the corresponding features to
role.  
public Role getRole(int id)| New| This method returns the role for the given
ID.  
public List<Role> getRoles(Client client)| New| This method returns all roles
mapped to the given client.  
public List<FeatureAccess> getFeatureAccess(Role role, boolean activeOnly)|
New| This method returns active and inactive feature access list for the given
client and role.  
public void delete(int id)| New| This method deletes the role of given id.  
public List<Role> getRoles(Feature feature)| New| This method returns the list
of roles mapped to the given feature.  
public List<User> getUsers(Role role)| New| This method returns the list of
users mapped to this role.  
  
3.  **UserService**

Method| Status| Description  
---|---|---  
public void insert(User user, List<ClientAccess> clientAccess,
List<FeatureAccess> featureAccess, User creator)| Existing| As per the new
requirement, user has to be created in a single step without associating role
setting. Therefore role handling logic should be removed from this method.  
public List<FeatureAccess> getFeatureAccessByUserAndClient(User user, Client
client, boolean activeOnly)| Existing| This method returns list of feature
access based on user and client according to existing data model. In the new
data model feature access will be according to roles.  
public void updateFeatureAccess(User owner, List<FeatureAccess>
featureAccess)| Existing| This method maps list of feature access to user
according to existing data model. In the new data model feature access will be
according to roles.  
public List<UserRole> getRolesByUser(User user)| New| This new method returns
list of roles mapped to the user according to new data model. These roles are
displayed as checked roles on "Role Setting" page for the user.  
List<FeatureDefinition> findFeatureByUser(User user)| New| This new method
returns the list of feature definitions accessible to the user.  
public List<Role> getManageableRoles(Client client, User user)| Existing| This
method shall no longer be used.  
public List<AdminLevel> getManageableLevels(Client client, User user)|
Existing| This method shall no longer be used.  
public void createOrUpdateUserRoles(List<UserRole> userRoles)| New| This new
method creates or updates user role settings.  
  
4.  **FeatureAccessManager**

Method| Status| Description  
---|---|---  
public List<FeatureAccess> findByUserAndClient(User user, Client client,
boolean activeOnly)| Existing| This method should be modified to return the
list of feature access to user taking the client and its roles into
consideration.  
  
5.  **FeatureManager**

Method| Status| Description  
---|---|---  
public List<Feature> getFeatures(Client client, boolean activeOnly)| New| This
method returns the list of active features to be displayed on "Create New
Role" page for the given client.  
  
6\. AlertService

Method| Status| Description  
---|---|---  
public void deleteAlerts(Client client, List<Feature> features)| New| This
method deletes alerts for the given client and features  
public void deleteAlerts(Client client)| New| This method deletes alerts for
the given client  
public void deleteAlerts(Role role, List<FeatureAccess> featureAccess)| New|
This method deletes alerts for the given role and feature access  
public void deleteAlerts(Role role)| New| This method deletes alerts by the
given role  
public void deleteAlerts(User user, List<UserRole>)| New| This method deletes
alerts by the given user and user roles  
public void deleteAlerts(User user)| New| This method deletes alerts for the
given user  
  
  

### Controller components

1.  **ClientController**

Method| Status| Description  
---|---|---  
public CreateClientForm getCreateClientForm()| Existing| As per the new
requirement, client has to be created in a single step without associating
feature setting. Therefore feature handling logic from this method will be
moved to ClientController.  
public void create(CreateClientForm form)| Existing| As per the new
requirement, client has to be created in a single step without associating
feature setting. Therefore feature handling logic from this method will be
moved to ClientController.  
public ClientProfileForm getClientProfileForm(String cid, List<Client>
clientsUnderRoot)| Existing| This method will be modified to enable it to
handle features for feature setting with client.  
  
2.  **UserController**

Method| Status| Description  
---|---|---  
public CreateUserForm getCreateUserForm(User currentUser, Client client)|
Existing| As per the new requirement, user has to be created in a single step
without associating role setting. Therefore role handling logic from this
method will be moved to UserController.  
public void create(CreateUserForm form, User currentUser)| Existing| As per
the new requirement, user has to be created in a single step without
associating role setting. Therefore role handling logic from this method will
be moved to UserController. This method maps features to user according to
existing data model. This has to be modified / removed as per new data model.  
public UserProfileForm getUserProfileForm(int userId, User currentUser,
List<User> users)| Existing| This method will be modified to enable it to
handle roles for roles setting with user.  
public void loadFeatureAccess(UserProfileForm form)| Existing| This method
maps features to user according to existing data model. This has to be
modified / removed as per new data model.  
public void updateFeatureAccess(UserProfileForm form)| Existing| This method
maps features to user according to existing data model. This has to be
modified / removed as per new data model.  
  
3.  **RoleController**

Method| Status| Description  
---|---|---  
public CreateRoleForm getCreateRoleForm(Client client)| New| This method
returns the role form bean to be used for "Create Role" page.  
public void create(CreateRoleForm form)| New| This method creates a new role
for the client and maps the corresponding features to role.  
public RoleProfileForm getRoleProfileForm(Client client)| New| This method
returns the role form bean to be used for "Update Role" page.  
public void update(RoleProfileForm form)| New| This method updates an existing
role for the client and maps the corresponding features to role.  
public void delete(int id)| New| This method deletes the role of given id.  
public RoleListForm getRoleListForm(Client client)| New| This method returns
the role form bean to be used for "Role List" page.  
  
  

### Model components

1.  **CreateRoleForm**  
This new component is the bean corresponding to "Create Role" form and has the
following private properties:

Property| Status| Description  
---|---|---  
int id| New| This represents the ID of the Role.  
Client client| New| This represents the Client property of the Role.  
String code| New| This represents the short description of the Role.  
String name| New| This represents the name of the Role.  
List<FeatureAccess> featureAccessList| New| This represents the feature access
list of the role.  
  
2.  **RoleProfileForm**  
This new component is the bean corresponding to "Update Role" form and has the
same properties as CreateRoleForm.

3.  **UserProfileForm**  
This component is the bean corresponding to "Create User" form and has the
following changes:

Property| Status| Description  
---|---|---  
List<UserRole> userRoles| New| This property maps the roles to user.  
  
  

### JSP components

Component| Status| Description  
---|---|---  
createRoleForm.jsp| New| This component is for creating a new role.  
roleProfileForm.jsp| New| This component is for updating a role.  
roleList.jsp| New| This new component is for displaying existing roles of the
client.  
  
  

## Integration Points & Interface

 **TODO: (If Applicable)**  List out Integration Points and corresponding
interface

From Component| To Component| Details| Error Handling  
---|---|---|---  
InfoTRAC| PUI| DT_JOB_ID need to be synchronized by...| If DT_JOB_ID during
PUI processing is not found in ...  
  
* * *

# Summarized Change Log

Date| Who| Changes to Design Doc  
---|---|---  
3/11/2013| Ben C| Added some TODO notes and examples  
3/08/2013| Ben C| Initial Draft  
  
* * *

  

# Sign-Off

Group| Date| Who| Comment  
---|---|---|---  
Product Manager (Business)|  
|  
|  
  
Account Service (AS)|  
|  
|  
  
Dev./Impl. Manager (Technical)|  
|  
|  
  
Production Control (PC)|  
|  
|  
  
Data Processing (DP)|  
|  
|  
  
Accounting/Invoicing|  
|  
|  
  
  
  

# Appendix

<add as you need>

        

  1. [Noticed Issues](https://i3dev.easyredmine.com/projects/urf_mgmt/wiki/Noticed_issues)
  2. [Code Review](https://i3dev.easyredmine.com/projects/urf_mgmt/wiki/Code_review)
  3. [URF Api design](https://i3dev.easyredmine.com/projects/urf_mgmt/wiki/Urf_api_design?parent=URF_mgmt)

  

250
[250250](https://i3dev.easyredmine.com/projects/infotrac/wiki/Existing_func_spec_2012)
250 250  250


