title: InfoSENSE - Why We Chose Boot-Kafka-Spark Boilerplate
body: ## Nothing but Spring Boot

InfoSENSE is basically an api service, so Spring Boot was a better choice for
it's ease of use and features.  
  

## Kafka or ActiveMQ

Kafka and ActiveMQ may have some overlaps but they were originally designed
for different purposes. So comparing them is just like comparing an Apple and
an Orange.

ActiveMQ is a general-purpose message broker that supports several messaging
protocols such as AMQP, STOMP, MQTT. It supports more complicated message
routing patterns as well as the Enterprise Integration Patterns. In general it
is mainly used for integration between applications/services especially in a
Service Oriented Architecture.

Kafka is a distributed streaming platform with very good horizontal scaling
capability. It allows applications to process and re-process streamed data on
disk. Due to it's high throughput it's commonly used for real-time data
streaming. For the real time feature and as we wont need the extra features
ActiveMQ provides we went for kafka for a light and clean publish-subscribe
messaging system.  
  

## Spark or Hadoop

On InfoSENSE Kafka is a publish-subscribe messaging system, whereas
Spark/Hadoop is where we can implement several Big Data components for
processing and storage. On the point to big data computational processing we
chose Spark on hadoop.

Apache Spark is much-advance cluster computing engine than Hadoop MapReduce.
Spark can handle any type of requirements (batch, interactive, iterative,
streaming, graph) while MapReduce limits to Batch processing.

Spark is a lot faster (it is said to be 10 to 100 times faster. Not tested
myself) because of reducing the number of read/write cycle to disk and storing
intermediate data in-memory whereas Hadoop Mapreduce reads and writes from
disk, as a result, it slows down the processing speed.

Apart from the speed, Spark seems to be easy to program as it has tons of
high-level operators with RDD whereas in Hadoop mapreduce we need to hand code
each and every operation which makes it very difficult to work with.

Following link contains more to the point differences between Hadoop mapreduce
and Spark.

  
<https://techvidvan.com/tutorials/apache-spark-vs-hadoop-mapreduce/>

  

In short, It's the business needs that should determine the choice of a
framework. Linear processing of huge datasets is the advantage of Hadoop
MapReduce, while Spark delivers fast performance, iterative processing, real-
time analytics, graph processing, machine learning and more. In many cases
Spark may outperform Hadoop MapReduce. The great news is the Spark is fully
compatible with the Hadoop eco-system and works smoothly with Hadoop
Distributed File System, Apache Hive, etc.

 **So we went with Apache Spark for a faster data processing. Also Spark has
included MlLib (Machine learning Library) feature which we will need in the
3rd phase of our project.**


