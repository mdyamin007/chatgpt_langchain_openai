title: New Version AFP2WEB + AFP2PDF Consolidation
body:   

# Introduction

  

## Purpose/Objective Summary

The current version of afp2web used by print services is outdated and prone to
issues. In addition, there are multiple Perl and Shell scripts (with minor
differences) that call afp2web. The goal of this project is two part: first,
we will create a core set a programs to interact with afp2web; second we will
accommodate all of the applications that are using afp2web.  
  

## Scope

  

### In-Scope

1\. Web service deployment of AFP2WEB on the Preprocessing03 server.  
2\. Create an effective alternative for the pdfi option.  
3\. Build an automatic index file generator to accommodate the different needs
of the client(s).  
4\. Integrate all searchable DVD programs to use this structure.  
5\. Integrate all commercial CD programs to use this structure.  
  

### Out-of-Scope

1\. Extend integration to ISWK programs.  
2\. Build an AI to automatically generate the file needed for all
configuration customization  
  

## Assumptions

This tool is meant to be integrated into the new paper process flow structure.
As such, all input and output from these processes should connect to
integration points in the new structure. With this assumption, we also assume
features involved including but not limited to searchable DVD and commercial
CD, should be able to use the results from this process to deliver the final
product.

## Dependencies

1\. Python 2.6+  
2\. lxml module for Python.

* * *

  

# Requirements

## Business Requirements & Use Cases

 **TODO:**   **(Required)**  List out all needs/requirement from business/end-
user perspective. Assign an ID for each requirement/use-case item for easier
reference in future

ID| Title| Details| ScreenMock| Importance  
---|---|---|---|---  
BRQ-01| Generic Search box| (example)  
 **Requirement:**  Instead of showing a drop-down to ask user to choose what
attribute to search against,  
just have a simple search box that will search against all potential
attributes like name/email/address/phone.  
 **Use Case:**  enter "ben" into search box, search results returned should
include both record of "Ben
[Chan/bchan@infoimage.com](mailto:Chan/bchan@infoimage.com)" as well as "Jim
[Wong/jwong@bigben.com](mailto:Wong/jwong@bigben.com)"| <attach file>| one of
following:  
P0-Show Stopper  
P1-High  
P2-Normal  
P3-Low  
P4-Nice To Have  
BRQ-02| ...| ...| ...| ...  
  
  

## Functional Requirements & Use Cases

 **TODO:**   **(Required)**  List out all needs/requirement from
engineering/functional perspective. Associate them with an ID for easier
reference

ID| Title| Details| Bus. Req. Ref.| Importance  
---|---|---|---|---  
FRQ-01| Generic Search by Sphinx| (example)  
 **Requirement:**  Instead of constructing the SQL statements for search,
utilize Sphinx to help build the index and support such generic search.  
 **Use Case:**  enter "ben" into search box, search results returned should
include both record of "Ben
[Chan/bchan@infoimage.com](mailto:Chan/bchan@infoimage.com)" as well as "Jim
[Wong/jwong@bigben.com](mailto:Wong/jwong@bigben.com)"| <optional>| one of
following:  
P0-Show Stopper  
P1-High  
P2-Normal  
P3-Low  
P4-Nice To Have  
FRQ-02| ...| ...| ...| ...  
  
  

## Performance & Scalability Requirements (SLA)

 **TODO: (Required)**  List out all needs/requirement from Performance
perspective. Associate them with an ID for easier reference

ID| Title| Details| Importance  
---|---|---|---  
PRQ-01| Fast Search response| (example)  
 **Requirement:**  All Search operation should return results within 100ms.  
 **Use Case:**  <enter if applicable>| one of following:  
P0-Show Stopper  
P1-High  
P2-Normal  
P3-Low  
P4-Nice To Have  
PRQ-02| ...| ...| ...  
  
  

## QA/Test Requirements

 **TODO:**   **(Required)**  List out all needs/requirement from QA/Testing
perspective. Associate them with an ID for easier reference

ID| Title| Details| Importance  
---|---|---|---  
TRQ-01| Selectable Search Box element| (example)  
 **Requirement:**  The search textbox AND the 'Search' button need to tagged
with 'id' value so that Selenium could select it for entering value and
subsequent submit  
 **Use Case:**  Rely on Selenium to submit random search terms and capture
response time as well as validation search results| one of following:  
P0-Show Stopper  
P1-High  
P2-Normal  
P3-Low  
P4-Nice To Have  
TRQ-02| ...| ...| ...  
  
* * *

  
  

# Design

## Architecture & Workflow Diagram

## Application component functional details

 **TODO:**   **(Required if involve big architectural change)**  List out the
key class/method created/changed for this project. Highlight the changed
portion (e.g. additional param for a method)

 **Overview:**   **TODO:**  Provide an overview of what changes if not already
illustrated in the Architecture diagram above

Component| Class| Method| Params| Comments  
---|---|---|---|---  
...| ...| ...| ...| ...  
  
  

## Integration Points & Interface

 **TODO: (If Applicable)**  List out Integration Points and corresponding
interface

From Component| To Component| Details| Error Handling  
---|---|---|---  
InfoTRAC| PUI| DT_JOB_ID need to be synchronized by...| If DT_JOB_ID during
PUI processing is not found in ...  
  
* * *

  

# Summarized Change Log

Date| Who| Changes to Design Doc  
---|---|---  
11/18/2014| Kevin Y| Initial Draft  
  
  

# Sign-Off

Group| Date| Who| Comment  
---|---|---|---  
Product Manager (Business)|  
|  
|  
  
Account Service (AS)|  
|  
|  
  
Dev./Impl. Manager (Technical)|  
|  
|  
  
Production Control (PC)|  
|  
|  
  
Data Processing (DP)|  
|  
|  
  
Accounting/Invoicing|  
|  
|  
  
  
  

### Attachments


