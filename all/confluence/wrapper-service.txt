title: wrapper-service
body:   

  

**Introduction**

WrapperService is a web-based solution. It works as a wrapper on AFP2web
Server. wrapperService is a middle tier interface that other products/services
communicate for AFP to PDF document conversion.

  

 **Prerequisites for the wrapperService Server**

  * System Prerequisites
  * Software Prerequisites

 **System Prerequisites for the wrapperService Server**

Description

|

Value  
  
---|---  
  
Operating System

|

Linux  
  
Architecture

|

64 bit  
  
  

 **Software Prerequisites for the wrapperService Server**

  * bash/zsh
  * Docker
  * Docker-Compose
  * Docker image url
  * Docker compose file

  

 **Docker Installation Example on Debian Linux 64 bit**

Older versions of Docker were called docker, [docker.io](http://docker.io) ,
or docker-engine. If these are installed, uninstall them:

these are installed, uninstall them:

$ sudo apt-get remove docker docker-engine [docker.io](http://docker.io)
containerd runc  
  
---  
  
Update the apt package index:

$ sudo apt-get update  
  
---  
  
Install packages to allow apt to use a repository over HTTPS:

$ sudo apt-get install \

apt-transport-https \

ca-certificates \

curl \

gnupg-agent \

Software-properties-common  
  
---  
  
  

Add Docker's official GPG key:

$ curl -fsSL <https://download.docker.com/linux/ubuntu/gpg> | sudo apt-key add
-  
  
---  
  
Verify that you now have the key with the fingerprint 9DC8 5822 9FC7 DD38 854A
E2D8 8D81 803C 0EBF CD88, by searching for the last 8 characters of the
fingerprint.

$ sudo apt-key fingerprint 0EBFCD88  
  
---  
  
Use the following command to set up the stable repository

$ sudo add-apt-repository \

"deb [arch=amd64] <https://download.docker.com/linux/ubuntu> \

$(lsb_release -cs) \

stable"  
  
---  
  
Update the apt package index.

$ sudo apt-get update  
  
---  
  
Install the latest version of Docker Engine - Community and containerd, or go
to the next step to install a specific version:

$ sudo apt-get install docker-ce docker-ce-cli
[containerd.io](http://containerd.io)  
  
---  
  
Add your user to the docker group.

$ sudo usermod -aG docker $USER  
  
---  
  
Check the installation

docker --version  
  
---  
  
  

 **Docker-composes Installation Example on Debian Linux 64 bit**

Run this command to download the current stable release of Docker Compose:

sudo curl -L
"<https://github.com/docker/compose/releases/download/1.25.0/docker-
compose-$>(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose  
  
---  
  
Apply executable permissions to the binary:

sudo chmod +x /usr/local/bin/docker-compose  
  
---  
  
  

Note: If the command docker-compose fails after installation, check your path.
You can also create a symbolic link to /usr/bin or any other directory in your
path.

sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose  
  
---  
  
Test the installation.

$ docker-compose --version  
  
---  
  
 **Docker Image**

Pull the docker image from the harbour

[_harbor.infoimageinc.com/wrapper-
service/wrapperservice:latest_](http://harbor.infoimageinc.com/wrapper-
service/wrapperservice:latest)  
  
---  
  
For docker image file follow this url

[_https://gitlab.infoimageinc.com/PD/wrapper-
service.git_](https://gitlab.infoimageinc.com/PD/wrapper-service.git)  
  
---  
  
  

 **Docker Compose**

For docker compose file follow this url (It might require to modify the
docker-compose.yml to map the file storage path with reference to container's
root path)

[_https://gitlab.infoimageinc.com/PD/wrapper-
service.git_](https://gitlab.infoimageinc.com/PD/wrapper-service.git)  
  
---  
  
  

  

 **wrapperService Configuration Property**

docker-compose file refers to the location of **wrapperservice.properties**
file and it has the following properties

afp2web.server=tomcatc-s

afp2web.default-ini-file=afp2web.ini

  

afp2web.custom-ini-enabled-clients=sana,mtro,acbk,utcu,fnbk,exbk

afp2web.mtro-ini-file=mtro_afp2web.ini

afp2web.sana-ini-file=sana_afp2web.ini

afp2web.acbk-ini-file=acbk_afp2web.ini

afp2web.utcu-ini-file=utcu_afp2web.ini

afp2web.fnbk-ini-file=fnbk_afp2web.ini

afp2web.exbk-ini-file=exbk_afp2web.ini

afp2web.sfce-ini-file=sfce_afp2web.ini

  

afp2web.dev-ini-path=/mnt/resource/ini-dev/

afp2web.pilot-ini-path=/mnt/resource/ini-pilot/

afp2web.stage-ini-path=/mnt/resource/ini-stage/

afp2web.prod-ini-path=/mnt/resource/ini-prod/

  

afp2web.default.afp-file-directory=/mnt/PV-NAS/indiv_afp

afp2web.tmp-file-directory=/mnt/wrapper-afp2web/common

afp2web.checkimage-path=/mnt/PV-NAS/peb3/chkimagels

  
afp2web.file-server-username=script

afp2web.file-server-password=3statements*

afp2web.clicktracking-api-url=<https://clk-
dev.infoimageinc.com/getclickTrackURL>

  
afp2web.host-protocol=http

afp2web.host-ip=10.8.9.129

afp2web.host-port=9090

afp2web.async-status-check-time=10000

afp2web.async-status-check-retry-count=20

afp2web.user-action=A2WTransform

afp2web.transform-logging=On

afp2web.quiet-mode=On

afp2web.memory-output-stream=on

afp2web.output-mode=File

afp2web.output-format=pdf

afp2web.response-format=JSON

  

afp2web.server-servlet-session-timeout=30m  
  
---  
  
  * Afp2web.server: Alternative location to the the zipped afp file
  * Afp2web.default-ini-file: Name of default ini file
  * Afp2web.custom-ini-enabled-clients: Comma separated CID of clients which have custom ini file
  * afp2web.{CID}-ini-file: Name of custom ini file [relative to wrapperservice server]
  * afp2web.dev-ini-path= Ini file location for dev environment [relative to wrapperservice server]
  * afp2web.pilot-ini-path= Ini file location for pilot environment [relative to wrapperservice server]
  * afp2web.stage-ini-path= Ini file location for stage environment [relative to wrapperservice server]
  * afp2web.prod-ini-path= Ini file location for prod environment [relative to wrapperservice server]
  * afp2web.default.afp-file-directory: Network shared zipped afp file directory location [relative to wrapperservice server]
  * afp2web.tmp-file-directory: Network shared common input/output directory for temporary afp file and pdf file
  * afp2web.checkimage-path: Network shared check-image file directory location [relative to wrapperserver server]
  * afp2web.file-server-username:
  * afp2web.file-server-password:
  * afp2web.clicktracking-api-url: _<https://clk-dev.infoimageinc.com/getclickTrackURL>_
  * afp2web.host-protocol: afp2web server network protocol
  * afp2web.host-ip: afp2web server host ip address
  * afp2web.host-port: afp2web server port
  * afp2web.async-status-check-time: Duration in between two consecutive afp2web get-status-api
  * afp2web.async-status-check-retry-count: Number of retry to get transformation status from afp2web get-status-api
  * afp2web.user-action: Parameter of afp2web
  * afp2web.transform-logging: Parameter of afp2web
  * afp2web.quiet-mode: Parameter of afp2web
  * afp2web.memory-output-stream: Parameter of afp2web
  * afp2web.output-mode: Parameter of afp2web
  * afp2web.output-format: Parameter of afp2web
  * afp2web.response-format: Parameter of afp2web
  * afp2web.server-servlet-session-timeout: Parameter of afp2web

  

 **Take wrapperService online**

Let us open your terminal in corresponding machine, traverse the same
directory where have the the docker-compose.yml file and execute the following
command

docker-compose up -d  
  
---  
  
Look inside the wrapper.log file for wrapperService log. Following is the
swagger url of the wrapperService

[ _http://localhost:8081/wrapperservice/swagger-
ui.html_](http://10.8.9.129:8080/wrapperservice/swagger-ui.html)

  

 **wrapperService API(s)**

wrapperService API is used for transforming the AFP documents to PDF format
synchronously and asynchronously. wrapperService has two APIs

GET /v1/document/{cid}/pdf

POST /v1/document/{cid}/transform-afp

  

  

  
  
true


