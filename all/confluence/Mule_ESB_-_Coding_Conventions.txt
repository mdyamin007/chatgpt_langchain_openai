title: Mule ESB - Coding Conventions
body:   

## 1\. Introduction

Having a constant coding style accross the whole project has proved to be a
good thing for developer productivity, clean code, less bugs and to avoid
unexpected behaviours. Right now Mule is missing this kind of knowledge.  
  

  

## 2\. 3rd Party Tools

Third party open source tools - like Checkstyle - can be used for the coding
standard and convention purpose.  
Checkstyle also has a maven plugin which could be dropped in the standard
build cycle quite easily.  
  

  

## 3\. JavaDoc comments

The JavadocType, JavadocMethod accompained with JavadocStyle should be
mandatory, PackageHtml should be highly advised.

    
    
    <!-- http://checkstyle.sf.net/config_javadoc.html -->
    <module name="JavadocMethod"/>
    <module name="JavadocType"/>
    <module name="JavadocVariable"/>
    

  
  

  

## 4\. Naming conventions

All the standard naming convention should be enforced, may be just the
AbstractClassName (which enforce Abstract prefix or Factory suffix) and
ConstantName (which enforce all CAPS) should be excluded, even if the latter
is quite useful on a wide project like Mule is.

    
    
    <!-- http://checkstyle.sf.net/config_naming.html -->
    <module name="LocalFinalVariableName"/>
    <module name="LocalVariableName"/>
    <module name="MethodName"/>
    <module name="PackageName"/>
    <module name="ParameterName"/>
    <module name="StaticVariableName"/>
    <module name="TypeName"/>
    <module name="MemberName"/>
    <!-- <module name="ConstantName"/> -->
    

  
  

## 5\. Imports

We should AvoidStarImport even if it makes java files longer is a source of
good information and provide clear statements of what class are really used.  
IllegalImport, RedundantImport and UnusedImports should be obvious choice.

    
    
    <!-- http://checkstyle.sf.net/config_import.html -->
    <module name="AvoidStarImport"/>
    <module name="IllegalImport"/>
    <module name="RedundantImport"/>
    <module name="UnusedImports"/>
    

  
  

## 6\. Size

Just some checks for the sake of sanity files longer the 2000 lines and
methods with more then 7 parameters makes the code not so easy to read.  
Few users may be using the high-resolution display/monitor, but majority would
prefer to see 80-chars long line.  
So, MethodLength check should be enforced.

    
    
    <!-- http://checkstyle.sf.net/config_sizes.html -->
    <module name="FileLength"/>
    <module name="ParameterNumber"/>
    

  
  

## 7\. Whitespace

I think these are part of the default Sun coding convention.  
We should set tabWidth property to 4

    
    
    <!-- http://checkstyle.sf.net/config_whitespace.html -->
    <module name="EmptyForIteratorPad"/>
    <module name="NoWhitespaceAfter"/>
    <module name="NoWhitespaceBefore"/>
    <module name="OperatorWrap"/>
    <module name="TabCharacter"/>
    <module name="WhitespaceAfter"/>
    <module name="WhitespaceAround"/>
    

  
  

## 8\. Modifier order

Follow the order of the Java Language specification and avoid redudant
modifier on interface and annotations.

    
    
    <!-- http://checkstyle.sf.net/config_modifiers.html -->
    <module name="ModifierOrder"/>
    <module name="RedundantModifier"/>
    

## 9\. Block checks

The braces should be around every block just like there should be no empty
blocks, left curly should go on a same-line and  
right curly alone, as described below:

    
    
    if (){
         //here is my  - if condition block statements...
     } else { 
         //here is my - else condition statements...
     }
    
    
    
    <!-- [http://checkstyle.sf.net/config_blocks.html] -->
    <module name="AvoidNestedBlocks"/>
    <module name="EmptyBlock"/>
    <module name="NeedBraces"/>
    <module name="LeftCurly">
    <property name="option" value="nl"/>
    </module>
    <module name="RightCurly">
    <property name="option" value="alone"/>
    </module>
    

  
  

## 10\. Coding

This should be fairly usual eventhough sometimes InlineConditionals are not
that bad.

    
    
    <!-- [http://checkstyle.sf.net/config_coding.html]  -->
    <module name="AvoidInlineConditionals"/>
    <module name="DoubleCheckedLocking"/>
    <module name="EmptyStatement"/>
    <module name="EqualsHashCode"/>
    <module name="HiddenField"/>
    <module name="IllegalInstantiation"/>
    <module name="InnerAssignment"/>
    <module name="MagicNumber"/>
    <module name="MissingSwitchDefault"/>
    <module name="RedundantThrows"/>
    <module name="SimplifyBooleanExpression"/>
    <module name="SimplifyBooleanReturn"/>
    

  
  

## 11\. Design

To enforce some encapsulation and keep up on some standard coding design which
are known to be good for extension.

    
    
    <!-- [http://checkstyle.sf.net/config_design.html]  -->
    <module name="DesignForExtension"/>
    <module name="FinalClass"/>
    <module name="HideUtilityClassConstructor"/>
    <module name="InterfaceIsType"/>
    <module name="VisibilityModifier"/>
    

  
  

## 12\. Misc

Some miscellaneous check could be added, like the ArrayTypeStyle and
FinalParameter. The comments/reference to the exernal checker could be added.  
Keeping in view of international nature of Mule the Translation check
should/could be added to the Checker.

    
    
    <!-- [http://checkstyle.sf.net/config_misc.html]  -->
    <module name="TodoComment"/>
    <module name="UpperEll"/>
    <module name="Translation"/> <!-- Reference to the Checker -->
    

* * *

**Checkstyle 5.6**

Checkstyle is a development tool to help programmers write Java code that
adheres to a coding standard. It automates the process of checking Java code
to spare humans of this boring (but important) task. This makes it ideal for
projects that want to enforce a coding standard.

Refer: [Checkstyle web-site](http://checkstyle.sourceforge.net/)


