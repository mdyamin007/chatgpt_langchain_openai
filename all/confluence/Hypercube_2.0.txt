title: Hypercube 2.0
body: true

# Hypercube 2.0 (What and Why)

  

## Overview & General

Hypercube 1.0 ( <https://i3dev.easyredmine.com/projects/hypercube_meteor-
multi-tenant/wiki> ) has some limitations and code manageability issues as
described below. Also the server side scripts are not reusable as the
boilerplate is in isomorphic structure. Also meteor blaze is template specific
view renderer which lacks control over the small components, so the code
becomes redundant and messy. That is why there is need for a 'Hypercube 2.0'
where the server side should be reusable micro-service and the view engine
should be component based. We have chosen sharded architecture over
isomorphic. Details will be discussed in the related section in the other wiki
links. This wiki will focus on the advantages of react-node architecture over
existing meteor system.  
  

  

## Related Wiki Links

  *   * 

## Issues faced in Hypercube 1.0:

  1. Property files haven't been written in a manageable way. They should be managed from frontend just like Infrotrac.
  2. The source code is messy, hard to read and unmanageable since so many if-else blocks have been written to support custom logic.
  3. We need proper regression testing.
  4. HTML code isn't written following ADA standard.
  5. For a simple change we are to make new template every time, hence producing lots of redundant code which becomes unmanageable in a matter of time since we are using blaze as html rendering technology.
  6. Lots of post processing tasks and complex logic are written in blaze templates which could be handled through API calling.
  7. We need to to load balance the whole project as it serves lots of concurrent request.
  8. We need to address complex work flow such as rendering PDF.
  9. nefficient API calling.

  

## Limitations using Meteor in Hypercube 1.0:

  1. We can't authenticate a user if the client is not talking with server over DDP which is really bad when we want to provide API endpoints to our customers.
  2. If we have transactions running when we restart our server, we are dead.
  3. We are tied to MongoDB since to access our our data on the client side, we have to subscribe to our MongoDB collection.
  4. If we have so many subscription to our MongoDB collection and we observe too much collections/fields at the same time and we have a heavy write load then our meteor app will need so much CPU support.
  5. Meteor keeps a fat session synchronized between the client and server, poses a few scalability questions mainly about distributing the session state across multiple servers.

  

## Why React:

  * React allows developers to break down the complex UI into simpler  **components**  and reuse the codes to complete their projects faster.
  * React is very a  **simple**  and  **lightweight**  library that only deals with the view layer.
  * React provides such a beautiful  **declarative API**  which enables developers to declaratively describe their User Interfaces and model the state of those interfaces.
  * React is just JavaScript. When writing code in React we don't have to do that much react-ish things at all. there is a very small API to learn, just a few functions and how to use them.
  * It is quite  **un-opinionated** , so we are free to choose the tools and technologies we prefer to use with it.
  * React has  **Unidirectional** /*One directional* data flow, so data changes is more  **predictable**  and easy to debug.
  * React components can be easily  **reused**.
  * Components can easily get unit-tested so by definition we can deliver well-structured, more safe and robust code.
  * With React we can  **reduce coupling**  and  **increase cohesion**.
  * Components are the future of web development.
  * React is  **SEO-friendly**.
  * React support server side rendering ( **SSR** ).
  * React uses  **Virtual DOM**  that makes the app really fast.
  * React is Fast when it comes to displaying a big amount of components.
  * Debugging is getting more easy with specialized Chrome extension.
  * React is maintained by Facebook and Instagram but also has a great open-source community. The brains behind Facebook are maintaining this project.

## Hypercube 2.0 enhancement categories:

Task| Type  
---|---  
Integrate Node.js| Platform  
Integrate React| Platform  
Template Layout| Component Design  
Client Feature/Options| Configuration Management  
Commercial Admin User Functionality| New Feature  
Commercial User 3rd Party| New Feature  
Internaionalization| New Feature  
ADA Compliance| Existing Feature Enhancement  
Responsive Site| Existing Feature Enhancement  
Banner Ads| New Feature  
General Notification/Message Area| New Feature  
API Interaction Re-Factor| Component Design  
SSO Plugins/Adapters| Existing Feature Enhancement  
Direct Sign On| Existing Feature Enhancement  
User Profile| Existing Feature Enhancement  
Account/Document Navigation| Existing Feature Enhancement  
Enrollment| Existing Feature Enhancement  
Keyword Search| Existing Feature Enhancement  
Batch Download| Existing Feature Enhancement  
ESignature| Existing Feature Enhancement  
Bounce Back Handling| Existing Feature Enhancement  
Pop Up Alerts| Existing Feature Enhancement  
Document Posting (TXT, Index file, etc)| Configuration Management  
Auth File Proccesing| Existing Feature Enhancement  
EStatement Check Linking| Existing Feature Enhancement  
View Check Module| Existing Feature Enhancement  
  
  


