title: Offer Management
body: # Wiki

  
  
  

  
  
  
  
  
  
  
 \- Everything it does..  
  
  
  
  
  
Docker-K8S-AWS R&D

  

 (Depricated)  
Offer Management Requirements (Depricated)  
 (Depricated)  
 (Depricated)  
 (Depricated)

[Pilot Server
Information](https://confluence.infoimageinc.com/display/PD1/Pilot+server+environment+information)

## Summary

In InfoREACH eco system we have 5 different applications being developed in
parallel. They are  
\- InfoREACH - Offer Management  
\- InfoPUB  
\- ClickTracker  
\- InfoSENSE  
\- Targeting Engine

Other than these, the eco system is utilizing 3 more services from the offer
management application. They are  
\- Template Service  
\- Notification Service  
\- InfoService

Following diagram briefly describes the operational flow of the InfoREACH
system.

  
  

  

# Introduction

InfoREACH system is cooperating and codependent on 5 componenets.  
 **1\. InfoREACH - Offer Management**  : Marketing application. Multi-tenant
application to create offers, create targeting rules, creating campaigns and
configure user bahaviour based offer workflow, audience report, campaign
report, offer report, multi channel notification configuration, landing page
workflow creation to send out with offers, creating user engagement forms to
incorporate with landing pages and many more...  
 **2\. InfoPUB**  : While InfoReach serves the fi admin/users, InfoPUB is for
the end users to view the landing pages flow, fill out user engagement forms,
and rolll out the web/mobile ads to the targeted end users.  
 **3\. ClickTracker**  : Keeps track of the user actions of users for
different applications in different notification channels.  
 **4\. Targeting Engine** :  
\- Creating audience collection based on provided formulas in InfoSENSE which
will be a summary version of all data fetched and stored through InfoSENSE.  
\- Creating eligibleAudience collection based on the rules created from
InfoREACH for a particular campaign and the user behaviour specific offer
workflow.  
 **5\. InfoSENSE**  : Process data files, purse and normalize the data then
store them in a strucutured manner.  
  

  

## Purpose/Objective Summary

  1. We are trying to create system which allow to create new Offer based on different rules to find the appropriate invitee.
  2. A campaign can hold multiple offers, an offer can hold multiple channels, one channel can hold multiple versions.
  3. These offers can be configured for targeted audiences to reach in mutiple channels.
  4. Introduce user behaviour based targeting.
  5. Also CID information should be captured keeping in view the Infotrac model wherein we can allow the feature to be enabled for certain CIDs and disabled for certain CIDs. IF enabled for parent/whole seller CID the offer catalog page should be visible to child CIDs as well.

  
  

## Scope

### In-Scope

  1. Till now we do not store any data that comes from any bank or cu. Target is to crate a data lake to use these data for other products for these banks/cu (e.g. offer management).
  2. CU/Bank admin and users can create and update Offer.
  3. CU/Bank users can able to see the list of offers created and also be able to search through the list of offers by offer name/offer type.
  4. Bank/CU User should be able to create/edit offers using Term Variables/User Variables.
  5. User can see the Campaign performance based on customer responses.
  6. System can be configured to launch campaigns based on user behaviour around them.
  7. Machine learning implementation to target offers to the pattern alike customers.
  8. Machine learning implementation to target audiences automatically based on their interest and behavior.

  

### Out-of-Scope

  

## Dependencies

 **InfoREACH -Offer Management**

  1. MeteorJs
  2. LDAP
  3. bcrypt
  4. Iron Router
  5. Blaze template Engine
  6. MongoDB
  7. d3 js
  8. jQuery
  9. Babel
  10. flow js
  11. EcmaScript 6
  12. i3Editor
  13. Bootstrap

 **InfoPUB**

  1. MeteorJs
  2. Iron Router
  3. Blaze template Engine
  4. MongoDB
  5. jQuery
  6. Babel
  7. EcmaScript 6
  8. Bootstrap

 **ClickTracker**

  1. NodeJS
  2. CryptoJS
  3. MongoDB
  4. Babel
  5. EcmaScript 6
  6. Swagger

 **Targeting Engine**

  1. Spring Boot
  2. SwaggerUI
  3. MongoDB
  4. Tomcat
  5. Maven

 **InfoSENSE**

  1. Spring Boot
  2. SwaggerUI
  3. MongoDB
  4. Apache Kafka
  5. Apache Spark
  6. Tomcat
  7. Maven

  
  

# Requirements

  

## Business Requirements & Use Cases

(01.07.2019)

  

## Partial Data Model only for campaign and offer (ER diagram)

  

 _ **ER Diagram(partial)**_

  

  

  

 _ **Database Model(Json format for mongoDb)**_

  

 **Campaign:**

  

  

 **Offer:**

  

  

 **Audience:**

  
  
  

  

## Application component functional details

  

## REST API Specification:

  

### InfoREACH App:

GET: /getOffers (Returns Offer list)  
GET: /getCampaigns (Returns Campaigns list)  
GET: /getClients (Returns Client list)  
GET: /getTargetingRules (Returns Targeting Rules list)  
GET: /getUserEngagementForms (Returns User Engagement Form list)  
GET: /getAdSettings (Returns AdSettings list)  
GET: /getUserEngagementFormData (Returns User Engagement Form Data list)  
GET: /getDetailedOfferAnalyticsData (Returns Offer Analytics Data list)  
GET: /getDetailedCampaignAnalyticsData (Returns Campaign Analytics Data list)  
GET: /getAudiences (Returns Audience list)  
GET: /getEligibleAudiences (Returns Eligible Audience list)  
GET: /getAudienceSegments (Returns Audience Segment list)  
GET: /getAudienceFormulas (Returns Audience Formula list)  
GET: /getAudienceUpload (Returns Audience Upload list)  
GET: /getUserVariables (Returns User Variables list)

Note: These are all DataTables API.

  

### ClickTrack:

POST: /getClickTrackURL (API is used to get trackable tiny url)  
GET: /{tinyURL} (API is used to track the clicks/views and perform 302
redirect)  
GET: /getTrackableUrlByMapId/{mapId} (API call to get request details and
tinyUrl for a mapId)  
GET: /getClickTrackSummary/{cid} (API call which will be use to get report)  
GET: /getClickTrackDetail/{cid} (API call which will be use to get report)  
POST: /getClickTrackURL (API is used to get trackable tiny url)

  

### Target Engine:

GET: /targetengine/api/v1/audience/{clientid}/?audienceId={audienceId} (This
API returns only one Audience data based on Client ID and Audience ID)  
GET: /targetengine/api/v1/audience/{clientId}/getAudienceByCid/ (This API
returns Audience list based on Client ID)  
GET:
/targetengine/api/v1/audience/{clientId}/getAudienceCountByRuleIds/?ruleIds={targetRulesId,....}  
PUT: /targetengine/api//v1/audience/{clientId}/campaign/ (This API creates
Eligible Audience for the Campaign. It takes a JSON Object in body
{"campaignId":"{campaignId}"})  
GET:
/targetengine/api/v1/transaction/{clientId}/?transactionId={transactionId}
(This API checks if the Eligible Audience for the Campaign has been created or
not)

  

  

  

true


