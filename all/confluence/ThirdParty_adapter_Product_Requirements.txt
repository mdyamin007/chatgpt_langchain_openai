title: ThirdParty adapter Product Requirements
body:   

  

Target release| Release name or number  
---|---  
Epic|  
  
Document status|

DRAFT  
  
Document owner|  
  
Designer| Lead designer  
Developers| Lead developer  
QA| Lead tester  
  
  

## Introduction

This is a new service dedicated to handling core update features. all the new
core that will be coming in the future will be added to this service and this
service will handle the communication between infoimage and core.

## Goals

  * This is a new service dedicated to handling core update features. all the new core that will be coming in the future will be added to this service and this service will handle the communication between infoimage and core.

## Background and strategic fit

Previous when we had only symXchange as our core for updating core features.
Now more organizations are requesting this feature with many different cores.
when it was only symXchange we could easily manage it by passing query param
to API calls and managing core API calls from infoService level, but with new
cores coming in it's will be more difficult to support so many business logic
and code will become unmanageable with so much custom logic. so, we are
separating the whole updating core logic to a different service so that
whenever a new core is coming we can set that up with their own strategy and
business logic easily.  

so this application will work as a mediator for infoservice and core.

## Assumptions

  * this will be an internal service mainly used from infoservice, prism and PUI
  * we will be able to configure as many cores as we want for this service and based on core we can manage their own business logic
  * infoservice and third Party adapter service will communicate through event always.

## Requirements

### Basic Business Requirements

ID

|

Title

|

Functionality  
  
---|---|---  
BR_01| Notify core when anything update on infoimage side|

If any Notification or delivery-related data is changed from either the user
site or the admin site infoimage should send that information to the core so
that core can update on their side as well  
  
BR_02| support different business logic| based on core we need to update
different business logic as well as different API calls  
  
### Data Model

  

javaConfluenceEventMessage

  

javaConfluenceEventForProducerDTO

    
    
      
    

javaConfluenceEventForConsumerDTO

  

javaConfluenceInfoConfig property

### Functional Requirements

Title| Title| Functionality  
---|---|---  
FR_01|

Configuration on infoConfig to set up  Core.

  

| This will determine if we need to call update core service from infoservice
or not, if the flag value is true then infoservice will produce an event for
the thirdPartyAdapter service to consume that event  
FR_02| Configuration on infoConfig to setup core related information| this
will be a JSON structured configuration that will contain all the information
that is needed to call the core from thirdPartyAdapter service. such as URL,
and authentication relation information, this will hold all the other
configuration  
FR_03|

if api call happened->

 **/api/v1/user/{cid}**

 **/api/v1/user/{cid}/account/enrollment/**

means something on NP or DP has updated

| if anything update on NP or DP for infoservice (same goes to PRISM and PUI)
it will be notified to ThirdPartyAdapter via event driven.  
FR_04| based on type of update. if NP/DP| NP/DP service will be called by
eventType  
FR_05| the process to send an acknowledgment back to infoservice| after
calling the core update apis thirdPartyAdapter service should be able to sent
an acknowledgment back to infoservice so that infoservice can update the
status of the event to SUCCESS/FAILED/REJECTED for further reference  
  
  
FR_06| The process to retry in event of a failure| core API calls can be
failed for so many reasons, in the such event, there should be a mechanism so
that thirdPartyAdapter can retry for that failed event. This will be achieved
by adding the failed event back to the MQ so that thirdPartyAdapter can pick
that and restart the whole process  
  
### Endpoints

ID| title| URL| Method  
---|---|---|---  
infoservice-01 (For Prism, PUI clients)| call create event api|
/api/v1/createEvent| POST  
  
### Technology:

ThirdPartyAdapter:

  1. Spring Boot for Backend (version: 2.7.3)
  2. ActiveMQ Artemis for message broker (version: 2.19.1)
  3. MongoDB for event tracking and managing status

### Need Access:

  1. We need access to this URL: <http://184.191.169.146:52148/>. so that we can test. 

## Questions

Below is a list of questions to be addressed as a result of this requirements
document:

Question| Outcome  
---|---  
  
  1. Why do we need new endpoint for infoservice to produce event ? 

|  
  
2\. how to manage different property for different core?|  
  
  
  


