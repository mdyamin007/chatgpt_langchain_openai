title: Gitlab Overview
body: [](https://about.gitlab.com/)

# Overview

* * *

GitLab is a [single application for the entire DevOps
lifecycle](https://about.gitlab.com/what-is-gitlab/) that allows teams to work
together better and bring more value to your customers, faster.

GitLab does this by shortening your devops cycle time, bridging silos and
stages, and taking work out of your hands. It also means a united workflow
that reduces friction from traditionally separate activities like application
security testing.

# Gitlab Features

* * *

  * Issue tracking & milestones
  * Merge Requests
  * Wiki Management
  * 3rd party integration
  * Locally hosted Git repositories

# Benefits

* * *

  *  **Branches are lightweight** and merging is  _easy_ , we can set gateway to  **validate/review**  the code by onshore/offshore owner, then allow to merge with master with  **pull request**  like feature. No merge before evaluation can be possible and no manual code merging will be needed.
  * It's much easier to  **develop concurrently**  and collaboratively than with Subversion, we can manage  **separate development branch**  for each developer for every project even for each enhancement. So for that project like hypercube or infotrac where may developer work on various tasks concurrently will not get effected by each other and we don't need to merge other developers code/ a large amount of code at a time. It also makes  **offline** committing possible.
  * Git tracks  **content rather than files**
  * With Git. A Subversion-style workflow is easily mimicked.
  * Git repositories are much  **smaller in file size** than Subversion repositories. There's only one ".git" directory, as opposed to dozens of ".svn" repositories 
  * The  **staging** area is awesome as well, it allows one to see the changes he will commit, commit partial changes and do various other stuff.
  *  **Stashing** is invaluable when developer do "chaotic" development, or simply want to fix a bug while he is still working on something else (on a different branch).
  * One can  **rewrite history** , which is great for preparing patch sets and fixing your mistakes

# Gitlab vs Github

* * *

Key difference is that Github all source code is made open unless it's a paid
account. Gitlab can have internally managed repositories and has additional
features for the DevOps lifecycle.

 ** **

# Gitlab Hosted paid version differences

* * *

For InfoIMAGE cases, I would recommend Bronze to help us get native Jenkins
support as well as multiple code approval reviews. Free is enough for now
while we integrate this tool.


