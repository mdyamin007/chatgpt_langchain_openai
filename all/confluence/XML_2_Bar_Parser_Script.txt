title: XML 2 Bar Parser Script
body: Converts XML file to a bar delimited file using a JSON template

## Usage

Compatible with Python 2.7+

    
    
    python xml2bar_parser_v2_new.py    input.xml    template.json    output.bar

## Parameters

parameters| type| default| example| description  
---|---|---|---|---  
 **input_file**|  _mandatory_|  
|  abc.xml| any XML file path  
 **template_file**|  _mandatory_|  
|  ABCD_template.json| properly formatted JSON's file path  
 **output_file**|  _mandatory_|  
|  /../something.dat| output delimited file path  
  
|  
|  
|  
|  
  
 **delimiter**|  _optional_|  || delimiter="~"| a delimiter that will be used
to concat fields  
 **trim**|  _optional_|  true| trim=false| if values should be trimmed of
spaces before putting them in the output file  
 **multiprocessing**|  _optional_|  false| multiprocessing=true| parallelize
conversion for speed  
 **processes**|  _optional_|

number of processor

core available

| processes=2|

the number of the parallel processes (workers) that will act like a poll.

only works if "multiprocessing=true"  
  
 **chunks**|  _optional_|  100| chunks=100|

the number of elements that will be converted by a single process in a pool.

If each element takes less time to convert, increase this. This will reduce
I/O overhead.

only works if "multiprocessing=true"  
  
### Prerequisites

This python library needs to be installed before running this script

  1. Python 2.7+
  2. LXML Python library (Currently works on rht, preprocessing02)
  3. OrderedDict (Built-in in Python 2.7+)
  4. Knowledge about XML XPath Syntax
  5. Knowledge about JSON Syntax

## TOC

  * [Home](https://confluence.infoimageinc.com/home)
  *   *   * [Case Studies](https://confluence.infoimageinc.com/case-studies/case_home)
    * [Extraction outside of the `root` tag](https://confluence.infoimageinc.com/case-studies/case1)
    * [Using conditions inside XPath](https://confluence.infoimageinc.com/case-studies/case2)
  * [Example Projects](https://confluence.infoimageinc.com/project-examples/projects)

## Pros

  * Central script to handle any kind of XML files
  * Tree-like logic building for easier understanding
  * Simplifies data for papyrus, needs less complex logic to handle in the DFA

## Cons

  * Ignores namespaces in the XML file for simplified extraction
  * Namespace based XPath won't work
  * Depending on your business logic, the template file can get very complicated (better than manually coding)

## Project Uses this script

bashtrue

  

    
    
    


