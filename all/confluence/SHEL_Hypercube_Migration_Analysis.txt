title: SHEL Hypercube Migration Analysis
body:   

Document Status|

YellowDRAFT  
  
---|---  
Document Owner|

  
  
  
  

# Shell Federal Credit Union

32circle

#  **Frontend:**

##  **ROOT**

  
|  
  
---|---  
 **Client Name**|  Shell Federal Credit Union  
 **Schema**|  cu  
 **Login Method**|

  * net-teller
    * uniqueId.jsp
    * connectionString.jsp
    * nt_hblogin.jsp

  
 **Enrollment Step**|

N/A  
  
 **Welcome Email**|  N/A  
 **Menu**|

  * Monthly Statements
  * Notices
  * e-Tax
  * Disclosure
  * Profile
  * Exit

  
 **Account Types**|

N/A  
  
 **Statement Types**|

  * default (Monthly Statements)
  * enotice (Notices)
  * etax (e-Tax)

  
 **Archival Period**|

  * Default: 25
  * Enotice: 3
  * Etax: 13

  
 **Paperless Configuration**|  noSelective  
 **Delivery Preference**|

  * Paperless (E)
  * Paper (B)

  
 **Notification Preference**|  Email only  
 **NP Link Type**|  byUFA  
 **Batch Download  **| N/A  
 **DSO login**|  Yes  
 **User-Account Relation**|  One to One  
  
###  **Database Migration**

 **USR_SESSION** : !usr_id used as sess_login_id. So no need to migrate.

 **USR_MAPPING** : Inserted data for a new user. So no need to migrate.

 **NOTIFICATION_PREFERENCE** : Inserted data into NP table for new user. So no
need to migrate.

###  **SSO**

  *  **net-teller:**
    *  **nt_hblogin.jsp**
      * Fields: _**CIF** =shel | **fI_Number** =7585 | **uniqueID** | **dateTimeValue** =02022017 | amPm | **connectionString** | referringApplication | **vVal** | nVal | MemberType | **acctNum**._
      * From web.xml: _pw=A1!$ot9h3 | sharedKey=1f4c97c46b502fa00c3f200fd3828486._
      * Find DefaultUserProfile by cif_num and org_id from the USR and USR_SESSION table.
        * If the user exists:
          * If user is DSO, Switching DSO to SSO with source=usrId, loginName=!usrId, password=pw, DSO=null, SSO=new Date, status='active', and detailedData. Store data into the **USR** and **USR_SESSION** table.
          * Otherwise, Store data into the **USR** and **USR_SESSION** table with source=usrId, DSO=null, SSO=new Date.
        * If the user does not exist:
          * Create new user with firstName='[NEW ACCOUNT]', orgId, orgName, loginName=!usrId, password=pw, details, dso=null, status='active', sso=new date then Insert data into the **USR** and **USR_SESSION** table.
          * Insert data into the **USR_MAPPING** table with org_id, cif_num=acctNum, usr_id.
      * Find the account from the FIN_ACCOUNT table by acctNum and org_id.
        * If the account is not found:
          * Insert data into the **FIN_ACCOUNT** table with orgId, acctNum, ownerName='Member', ovnerContactId=null, acctRegId=null.
          * Insert data into the **PAPERLESS2** table with acctId, p_lalest_status='B', p_modified_by=usrId, p_old_status='N', stmt_type='default'.
      * Check UFA relation exists or not:
        * If not found, Insert data into the **USR_FIN_ACCOUNT** table with usr_is, acctId, status='active', timestamp.
      * Reset email reminders in the **EMAIL_REMINDER** table with the first_reminder_date=null and second_reminder_date=null.
      * Get params from web.xml: cid='shel', timeout=10:
        * Create encodedKey with useId and timeStamp.
        * Create newCookie with cid and encodedKey, and setMaxAge=10min.
      * If the SSO date is not null redirect to  **/home.jsp**  page.

 **Note:** No SSO enrollment. Do not data insert in the
NOTIFICATION_PREFERENCE table while SSO login.

###  **Menu Tabs**

  *  **Monthly Statements:**
    * Shows statements: Date, Status, Monthly Inserts.
    * When clicking on statement  **date**  open a statement details pdf in the new tab.
    * When clicking on **Member Newsletter  **open InsertServlet in the new tab.
    *  **View Account:**  Here shows the **[account number]**  in the dropdown menu.
      * Here _MULTIPLE_ACCT_TYPE=false_ ; // If true will show account type also beside account number.
    * Shows the disclosure verbiage.
    * When clicking on the  **Account Reconciliation**  button open a disclosure.pdf in the new tab.

  *  **Notices:**
    * Shows statements: Date, Status, Description.
    * When clicking on statement  **date**  open a statement details pdf in the new tab.
    *  **View Account:**  Here shows the **[account number]**  in the dropdown menu.
      * Here _MULTIPLE_ACCT_TYPE=false_ ; // If true will show account type also beside account number.
    * Shows the disclosure verbiage.
    * When clicking on the  **Account Reconciliation**  button open a disclosure.pdf in the new tab.

  *  **e-Tax:**
    * Shows statements: Date, Description.
    * When clicking on statement  **date**  open a statement details pdf in the new tab.
    *  **View Account:**  Here shows the **[account number]**  in the dropdown menu.
      * Here _MULTIPLE_ACCT_TYPE=false_ ; // If true will show account type also beside account number.
    * Shows the disclosure verbiage.
    * When clicking on the  **Account Reconciliation**  button open a disclosure.pdf in the new tab.

  *  **Disclosure:**
    * When clicking on the disclosure menu open **/disclosure.jsp** in the new tab. 

  *  **Profile**  

    * Delivery Preference: Non-updatable.
    * Notification Preference Email only: Non-updatable
    * Email Address: Non-updatable

  *  **Exit:**
    * When clicking on the Exit menu redirect the **/logout.jsp** page and showing the confirmation option for logout or not.

 **statements/menu_inc.jsp:**

  * List the stmt_types from the ESD_DOC table by ACCT_ID and ARCHIVAL_PERIOD.
  * Find the enotice statements from the ENOTICE table by ACCT_ID and ENOTICE_STAMP.
  * Find the etax statements from the ETAX table by ACCT_ID and ETAX_STAMP.
  * Adding menu_tabs based on stmt_types.

 **include/header.jspf:**

  * Shows the menu_tabs while added in the menu_inc.jsp
  * Shows the others menu_tabs that do not depend on stmt_types.
  * ShowBanner if exist but for SHEL there has no banner.

###  **DSO**

DSO has the following features:

  * Login
  * Forget your password?
  * Enrollment
  * Menu Tabs (Profile)

####  **Login**

  * During login required fields are:
    * Username
    * Password 
  * Redirects to a page called _**signon.jsp**_. 
    * Input the account information for check the account validity:
      * Account Number
      * Last 4 Digits of SSN
      * Date of Birth
    * There are two options there: 
      * I'm on a public computer. Please log me in without creating any token.
      * Please log me in and create a token on my computer.
        *  **Note** : The options do not work properly. For every login redirect to **/signon.jsp** page.
  * Redirect to /token_recovery_action.jsp:
    * Online Statements enrollment
    *  **View Account:**  Here shows the **[account number]**  in the dropdown menu.
      * Here _MULTIPLE_ACCT_TYPE=false_ ; // If true will show account type also beside account number.
    * Email address: Updatable.

####  **Forget your password?**

  * Af first, Security check by entering the  _Username, last 4 digits of SSN,  _and _  Date of Birth_.
  * After that enter the  _New Password_  and  _Confirm New Password._

 **Enrollment**

  * The user goes through the enrollment based on the following condition:
    1. Based on the DSO date the user goes through the 5 steps of enrollment.
  *  **Enrollment Step 1:**
    * eStatement Verification- PDF View

  *  **Enrollment Step 2:**
    * Agree to Terms and Conditions or Do not agree to go back.

  *  **Enrollment Step 3:**
    * Account Verification
      * Account Number
      * Social Security Number
      * Date of Birth
      * Security Code

  *  **Enrollment Step 4:**
    * Login Information
      * Login Name
      * Password
      * Confirm Password

  *  **Enrollment Step 5:**  Preferences
    * The user can choose the delivery preference  ** _Paperless Statements Only_**  or  ** _Paper Only_**.
    * Notification Preference Email Only.
    * Email Address Updatable.
    * When choosing the delivery preference  ** _paper only_**  then doesn't show the notification preference and email address.

 **Menu Tabs**

  *  **Profile**
    * User Information:
      * Login Name
      * Password
      * Confirm Password
      * Last Login
    * The user can update the  _Password_ _._
    * Delivery preference Updatable
    * Notification options Non-updatable.
    * Email Address is Updatable.

  

* * *

##  **Processing UI**

### BACKEND PROCESSES

SHEL has 6 processes,

  1. AFP
  2. AUTH
  3. ENOTICE4
  4. PAPERLESS
  5. ECL
  6. ETAX

### Settings

  * global.multipleStmtType=true
  * global.multipleDocType=false
  * global.autoRegister=true
  * global.ssoKey=A1!$ot9h3
  * global.enableAccountType=false
  * global.email.storage=notifyPref

### Statement Types and Index file prefix

  * global.ms1=default
  * global.ms2=default
  * global.etax=etax
  * global.dla=enotice

### AFP Process

Flags:

  * afp.compression=false
  * afp.isZipped=true
  * afp.copyZipBuffer=65536
  * afp.storage.path=a

#### Handler: AfpStatementData9

  * Fields:  **fileName |**   **acctNum |**  beginDate | closingDate | numOfPages | **acctName |** SSN | appType | messageIds |  **hasCheckStr |** insertId | regionCode | crippleFlag | zipFileName.

**  **Bold**  indicates all are mandatory fields.

#### Registrar: HypercubeEStmtRegistrar

  * autoRegister=true, enableAccountType=false, acctLookUp=false
  * Find  **account  **from the  **FIN_ACCOUNT**  by org_id and acct_number.
  * If  **account**  is null create an account where orgId, acctNum, acctName, lastModified=currentdate, status='A'
  * As global.autoRegister is true, creates a new  **USR**  and  **USR_SESSION**  record. 
  * Insert into  **USR_MAPPING**  with org_id, cif_num, usr_id.
  * Insert into  **USR_FIN_ACCOUNT  **user_id, account_id, status,  email, source.
  * Insert into  **PAPERLESS**  with acctId, modifiedBy='1', modifiedDate, newStatus='B', oldStatus='N', stmtType.
  * Insert data into the **ESTMT_DOC** with Acct_Id, Esd_BeginDate, Esd_ClosingDate, Esd_Parent_Path, Esd_Filename, Esd_Page_Count, docType, stmtType, SeqNum.
  * Insert data into the **P_JOB_ESTMT** table.
  * Update the **ARCH_FILE** table.
  * Insert into the **ACCOUNT_STMT_TYPE** table with acct_id and stmt_type.
  * Insert data into the **P_ESTMT_COUNT** table.

Database Changes: USR, USR_SESSION, USR_MAPPING, USR_FIN_ACCOUNT, PAPERLESS,
ESTMT_DOC, P_JOB_ESTMT, ARCH_FILE, ACCOUNT_STMT_TYPE, P_ESTMT_COUNT.

### AUTH Process

Flags:

  * auth.classPath=com.infoimage.processing.application.auth.handler.ShelAuthHandler
  * auth.fields=ssn
  * auth.grouping=false
  * auth.checksum.bypass=true
  * auth.permission.level=7

 **Handler** : **ShelAuthHandler**

  * Each line in the process file must have 4 fields. 
  * Fields: _  **acctNum  **| acctName **** |  **ssn  **|  **cif=acctNum** |  **dob**._
  * Remove all leading zeros beginning of the acctNum.
  * SSN must have 9 lengths.
  * If acctName does not found, the default acctName will be "Member".

 **  **Bold**  indicates all are mandatory fields.

#### Registrar: ShelAuthRegistrar

  * Find user from the USR and USR_SESSION table by org_id and acctNum.
  * If the user is not found:
    * Create a new user and Insert data into the **USR** and **USR_SESSION** table with firstName, ssn, dob, loginId=!usrId, dso=null, pw=ssoKey, permissions=1, usrDetails, orgId, orgName.
    * Insert data into the **USR_MAPPING** table with org_id, cif_num, and usr_id.
  * If the user is found, Update the user with ssn, firstName, and dob.
  * Find the account from the FIN_ACCOUNT by org_id and acct_num.
    * If the account is not found create an account and Insert data into the  **FIN_ACCOUNT**  table with org_id, acct_num, acct_name, and lastModified.
  * Find paperless from the PAPERLESS2 table by acct_id and stmt_type.
    * If paperless not found, Insert data into the  **PAPERLESS**  table with acctId, modifiedBy="0", modifiedDate, newStatus="B", oldStatus="N", stmtType.
  * Find ufa from the USR_FIN_ACCOUNT and FIN_ACCOUNT tables by user_id and acct_id.
    * If ufa is not found create new userFinAccount with usr_id, acct_id, org_id, status="active", acctNum and Insert data into the  **USR_FIN_ACCOUNT**  table.

Database Changes: USR, USR_SESSION, USR_MAPPING, FIN_ACCOUNT, PAPERLESS,
USR_FIN_ACCOUNT.

### ENOTICE4 Process

Flags:

  * enotice4.compression=false
  * enotice4.acctTypeRequired=false
  * enotice4.isZipped=true
  * enotice4.copyZipBuffer=32768
  * enotice4.createAccount=false
  * enotice4.automatedEmailNotification=true

#### Handler: ENoticeData7

  * Each line in the process file must contain 11 or 12 fields. 
  * First(Record Type) and last(Record Terminator) field must be "L". 
  * Fields:  ** _L_** _  | acctNum | acctType | acctName | afpFileName | type | closingDate | imageCount | postCardFlag | _ ** _zipFileName_** _| region|_ ** _L_**  
  * If the account name is not present in the index file, the account number will be set as the account name after masking the first 2 or 4 characters. 
  *  postCardFlag value has to be 0 or 1. 

 **  **Bold**  indicates all are mandatory fields.

#### Registrar: HypercubeENoticeRegistrar

  * createAccount=false, needApproval=false
  * Fin account from the FIN_ACCOUNT table, If account is found
    * Check the  ** _acctName_**  provided by the index file. If it does not match with the account name in the database, update it in the  **FIN_ACCOUNT**  table. 
    * Does not update the account name if the name is either "MEMBER" or "CUSTOMER" or "USER". 
  * If paperless is not found, Insert data into the  **PAPERLESS**  table with stmtType="enotice". 
  * Insert data into the **ARCH_FILE**.
  * Inserts enotice data in  **ENOTICE**.
  * Inserts data into the  **P_JOB_ENOTICE**  table. 
  * Inserts data into the  **P_ESTMT_COUNT**  table. 

Database changes: FIN_ACCOUNT, PAPERLESS, ARCH_FILE, ENOTICE, P_JOB_ENOTICE,
P_ESTMT_COUNT.

### PAPERLESS Process

Flags:

  * paperless.classPath=com.infoimage.processing.application.paperless.handler.DefaultPaperlessHandler

#### Handler: DefaultPaperlessHandler

  * Fields: _**acctNum** | **status**_.
  * The status length will be 1.
  * Insert data into the **PAPERLESS** table with acct_number, status, usr_id='1', org_id, stmt_type.
  * Insert data into the **P_ESTMT_COUNT** table.

**  **Bold**  indicates all are mandatory fields.

Database uses: PAPERLESS, P_ESTMT_COUNT.

### ECL Process

Flags:

  * ecl.classPath=com.infoimage.processing.application.ecl.handler.DefaultEclHandler3
  * ecl.log=true
  * ecl.purge=false

#### Handler: DefaultEclHandler3

  * emailStorage=notifyPref.
  * Update contact_info.
  *  Get the list of notifyPref from the **NOTIFICATION_PREFERENCE** table.
  * Each line in the process file must contain 2 fields.
  * Fields: _**acctNum |**   **email**._
  * Removed all leading zeroes from the account number.
  * As ecl.purge=false,  Delete the notifyPref from the NP table.

 **  **Bold**  indicates all are mandatory fields.

Database changes: NOTIFICATION_PREFERENCE.

### ETAX Process

Flags:

  * etax.compression=false
  * etax.createAccount=false
  * etax.isZipped=true
  * etax.copyZipBuffer=32768
  * etax.isSharingAfps=true
  * etax.automatedEmailNotification=true

#### Handler: ETaxData3

  * Fields:  _acctName |   **acctNum**  |  **type**  |  **afpFileName |  **date | suffix | appType | SSN | zipFileName._
  * As isZipped=true, the total field must have 8.
  * AppType must have 2 lengths.

 **  **Bold**  indicates all are mandatory fields.

#### Registrar: ETaxRegistrar3

  * Find account from  **FIN_ACCOUNT**  by org_id and acct_number and type.
  * As etax.createAccount=false, No account will be created if not found.
  * Insert into the  **PAPERLESS  **with acctId, modifiedBy='1', modifiedDate, newStatus='B', oldStatus='N', stmtType='default'.
  * Insert data into the **ARCH_FILE** table.
  * Insert into  **ETAX**  with type, acctId, archiveId, timeStamp ssn, isCorrection.
  * Insert data into the  **P_JOB_ETAX**  table.
  * Insert data into the  **P_JOB_EMAIL**  table.

Database changes: PAPERLESS, ETAX, ,ARCH_FILE, P_JOB_ETAX, P_JOB_EMAIL.

### Email Notification Process

Flags:

  * email.default.needApproval=false
  * email.enotice.needApproval=false
  * email.hiddenMessage=notification_preference_id
  * email.default.needApproval=false
  * email.default.resetApproval=false
  * email.enotice.needApproval=false
  * email.enotice.resetApproval=false

  * notification.isSendEmailViaAPI=false
  * notification.isEmailManageByEstmt=false
  * email.enotice.isSelectivePaperless=true
  * email.allowedEmail=ignorethisemailisd@[gmail.com](http://gmail.com),failed@sendto.nobody,weirdo@[fancyweird.com](http://fancyweird.com)

#### Handler: NotifyPrefEmailHandler

  * isSelectiveTemplate= **false** , isSelectiveMailServer= **false** , isSendEmailViaAPI= **false** , isEmailManageByEstmt= **false** , attachmentFeature= **false** , isSendViaAPI= **false,** needApproval= **false** , resetApproval= **false** ,isSelectiveNotifyPref= **false** , isSelectivePaperless= **true** , hasSubType= **false** , isGroupingNotification= **false** , sendAttachment= **false**.

### BACKEND REPORTS

The backend process has 2 reports,

  1. Enrollment Report
  2. Undeliverable Report

###  **Enrollment Report**

  * Flags

    * enrollment.classPath=com.infoimage.processing.application.file.upload.handler.EnrollmentReportCU
    * enrollment.method=client_pickup
    * enrollment.clientPickupPath=/d/SECURE3/Usr/SHEL/client_pickup
    * enrollment.notifyClient=true
    * enrollment.email.recipients=isd-staff@[infoimageinc.com](http://infoimageinc.com)
    * enrollment.email.templatePath=/com/infoimage/processing/application/file/upload/email/client_pickup4.txt
    * enrollment.pickup_time=5
    * enrollment.queryName=SELECT_ENROLL_STATUS_ACCT_BASED_DSO
  *  **Handler: EnrollmentReportCU**
    * Get records from the usr_session, usr_fin_account, fin_account, notification_preference, p_job_time, p_job_time, paperless2 tables.
    * Update the p_job_time table for the proc_time.

Database Uses: USR_SESSION, USR_FIN_ACCOUNT, FIN_ACCOUNT,
NOTIFICATION_PREFERENCE, P_JOB_TIME, PAPERLESS2.

  

 **Undeliverable Report**

  *  **Flags**
    * undeliverableReport.classPath=com.infoimage.processing.application.file.upload.handler.bounceback.CUUndeliverableReport
    * undeliverableReport.deBug=false
    * undeliverableReport.method=client_pickup
    * undeliverableReport.clientPickupPath=/usr/local/processing-ui/temp/shel
    * undeliverableReport.notifyClient=true
    * undeliverableReport.insertToDB=true
    * undeliverableReport.email.subject=SHEL: Undeliverable Report Available
    * undeliverableReport.email.templatePath=/com/infoimage/processing/application/file/upload/email/client_pickup4.txt
    * undeliverableReport.pickup_time=5
    * undeliverableReport.mailersvr.host=ha_zimbra
    * undeliverableReport.emailServer.cluster=true
    * undeliverableReport.mailersvr.user=test
    * undeliverableReport.senderEmailAddress=test@[mailerserver.com](http://mailerserver.com)
    * undeliverableReport.mailersvr.password=creditunion
    * undeliverableReport.email.server=zimbra
    * undeliverableReport.paperless_status.update=false
    * undeliverableReport.email_status.update=true
    * undeliverableReport.email.to_be_processed=Inbox
    * undeliverableReport.email.message_id=notification_preference_id
    * undeliverableReport.email.start_flag=<!-- Message Number:
    * undeliverableReport.email.end_flag=->
    * undeliverableReport.email.pui_usr_id=1
    * undeliverableReport.email.accts_to_skip=0

  *  **Handler: CUUndeliverableReport**
    * paperless_status.update=false 
    * emailServer.cluster=true
      * Grabbing email cluster list from the **HA_SERVER** table.
    * email_status.update=true
      * Update  **CONTACT_INFO**  table with ci_is_eaddr1_valid='N'
    * insertToDB=true
      * Insert into  **SUMMARY_REPORTS**  table with org_id, start_date, end_date, report_type, file_type, report_count.
      * Get from  **SUMMARY_REPORTS**  table by org_id, report_type.

Database Uses: HA_SERVER, CONTACT_INFO, SUMMARY_REPORTS.



* * *

## Analysis Summary (ROOT)

Scope| Feature| SHEL Business| Hypercube| Note  
---|---|---|---|---  
 **Enrollment(DSO)**|  User enrollment|

  * The user goes through the enrollment based on the following condition:
    1. Based on the DSO date the user goes through the 5 steps of enrollment.

|  23572 complete Supported  23573 incomplete Not Supported 23574 incomplete
Supported alternatively |  
  
Enrollment Step 1|

  * eStatement Verification- PDF View

|  23575 complete Supported  23576 incomplete Not Supported 23577 incomplete
Supported alternatively |  
  
Enrollment Step 2|

  * Agree to Terms and Conditions or Do not agree to go back.

|  23578 complete Supported  23579 incomplete Not Supported 23580 incomplete
Supported alternatively |  
  
Enrollment Step 3|

  * Account Verification
    * Account Number
    * Social Security Number
    * Date of Birth
    * Security Code

|  23581 complete Supported  23582 incomplete Not Supported 23583 incomplete
Supported alternatively |  
  
Enrollment Step 4|

  * Login Information
    * Login Name
    * Password
    * Confirm Password

|  23584 complete Supported  23585 incomplete Not Supported 23586 incomplete
Supported alternatively |  
  
Enrollment Step 5|

Preferences

  *     * The user can choose the delivery preference  ** _Paperless Statements Only_**  or  ** _Paper Only_**.
    * Notification Preference Email Only.
    * Email Address Updatable.
    * When choosing the delivery preference  ** _paper only_**  then doesn't show the notification preference and email address.

|  23587 complete Supported  23588 incomplete Not Supported 23589 incomplete
Supported alternatively |  
  
**Login(DSO)**|  
|

  * During login required fields are:
    * Username
    * password 

|  23593 complete Supported  23594 incomplete Not Supported 23595 incomplete
Supported alternatively |  
  
Account validity|

  * Input the account information for check the account validity:
    * Account Number
    * Last 4 Digits of SSN
    * Date of Birth

|  23596 complete Supported  23597 incomplete Not Supported 23598 incomplete
Supported alternatively |  
  
Token Recovery|

For first-time login, It redirects to a page called _**token_recovery**_.
There are two options there:

  1. I'm on a public computer. Please log me in without creating any token.
  2. Please log me in and create a token on my computer.
    *  **Note** : The options do not work properly. For every login redirect to **/signon.jsp** page.

|  25531 incomplete Supported  25532 complete Not Supported 25533 incomplete
Supported alternatively | This is supported by MFA (Multi-factor
Authentication) in the hypercube.  
  
  *  **Forget your password? (DSO)**

|  
|

  * Af first, Security checks by entering the _Username, last 4 digits of SSN,_ and _Date of Birth_.
  * After that enter the _New Password_ and _Confirm New Password._

|  23599 complete Supported  23600 incomplete Not Supported 23601 incomplete
Supported alternatively |  
  
**Statements**|

  * Monthly Statements
  * Notices
  * e-Tax

  

|

  * Statement Date
  * Status
  * Monthly Inserts

Note: For e-Tax, Shows date and description only.

|  23602 complete Supported  23603 incomplete Not Supported 23604 incomplete
Supported alternatively |  
  
  
View Account:

Here shows the **[account number]** in the dropdown menu.

|  23605 complete  Supported  23606 incomplete Not Supported 23607 incomplete
Supported alternatively |

  
  
  
Disclosure verbiage

|

  

|  23608 complete  Supported  23609 incomplete Not Supported 23610 incomplete
Supported alternatively |  
  
Account Reconciliation|

  * When clicking on the  **Account Reconciliation**  button open a disclosure.pdf in the new tab.

|  23611 complete  Supported  23612 incomplete Not Supported 23613 incomplete
Supported alternatively |  
  
**Profile(SSO)**|  Delivery Preference|

  * The user can't update the delivery preference.

|  23617 complete  Supported  23618 incomplete Not Supported 23619 incomplete
Supported alternatively |  
  
Notification Preference|

  * Notification Preference email only and Non-Editable.

|  23620 complete  Supported  23621 incomplete Not Supported 23622 incomplete
Supported alternatively |  
  
Email Address|

  * The email address is Non-Editable.

|  23623 incomplete  Supported  23624 complete Not Supported 23625 incomplete
Supported alternatively | Non-editable is supported but Non-editable for SSO
and Editable for DSO is not supported.  
 **Profile(DSO)**|

Password

|

The user can update the _Password._

|  23626 complete  Supported  23627 incomplete Not Supported 23628 incomplete
Supported alternatively |  
  
Delivery Preference|

  * The user can update the delivery preference.

|  23629 complete  Supported  23630 incomplete Not Supported 23631 incomplete
Supported alternatively |  
  
Notification Preference|

  * Notification Preference email only and Non-Editable.

|  23632 complete  Supported  23633 incomplete Not Supported 23634 incomplete
Supported alternatively |  
  
Email Address|

  * The email address is Editable.

|  23635 incomplete  Supported  23636 complete Not Supported 23637 incomplete
Supported alternatively | Editable is supported but Non-editable for SSO and
Editable for DSO is not supported.  
 **Disclosure**|  
|

  * When clicking on the disclosure menu open **/disclosure.jsp** in the new tab.

|  23638 complete  Supported  23639 incomplete Not Supported 23640 incomplete
Supported alternatively |  
  
**Exit**|  
|

When clicking on the Exit menu redirect the **/logout.jsp** page and showing
the confirmation option for logout or not.

  

|  23641 complete  Supported  23642 incomplete Not Supported 23643 incomplete
Supported alternatively |  
  
  
  

## Analysis Summary (PUI)

Process and Reports| Prefix| Backend Business| Mismatch with Hypercube
Business| Changes Needed| Note  
---|---|---|---|---|---  
AFP|

  *  **ms1** =default
  *  **ms2** =default

|

#### Handler: AfpStatementData9

  * Fields:  **fileName |**   **acctNum |**  beginDate | closingDate | numOfPages | **acctName |** SSN | appType | messageIds |  **hasCheckStr |** insertId | regionCode | crippleFlag | zipFileName.

**  **Bold**  indicates all are mandatory fields.

#### Registrar: HypercubeEStmtRegistrar

  * autoRegister=true, enableAccountType=false, acctLookUp=false
  * Find  **account  **from the  **FIN_ACCOUNT**  by org_id and acct_number.
  * If  **account**  is null create an account where orgId, acctNum, acctName, lastModified=currentdate, status='A'
  * As global.autoRegister is true, creates a new  **USR**  and  **USR_SESSION**  record. 
  * Insert into  **USR_MAPPING**  with org_id, cif_num, usr_id.
  * Insert into  **USR_FIN_ACCOUNT  **user_id, account_id, status,  email, source.
  * Insert into  **PAPERLESS**  with acctId, modifiedBy='1', modifiedDate, newStatus='B', oldStatus='N', stmtType.
  * Insert data into the **ESTMT_DOC** with Acct_Id, Esd_BeginDate, Esd_ClosingDate, Esd_Parent_Path, Esd_Filename, Esd_Page_Count, docType, stmtType, SeqNum.
  * Insert data into the **P_JOB_ESTMT** table.
  * Update the **ARCH_FILE** table.
  * Insert into the **ACCOUNT_STMT_TYPE** table with acct_id and stmt_type.
  * Insert data into the **P_ESTMT_COUNT** table.

Database Changes: USR, USR_SESSION, USR_MAPPING, USR_FIN_ACCOUNT, PAPERLESS,
ESTMT_DOC, P_JOB_ESTMT, ARCH_FILE, ACCOUNT_STMT_TYPE, P_ESTMT_COUNT.

|

  

|

  

|  
  
AUTH|  
|

 **Handler** : **ShelAuthHandler**

  * Each line in the process file must have 4 fields. 
  * Fields: _  **acctNum  **| acctName **** |  **ssn  **|  **cif=acctNum** |  **dob**._
  * Remove all leading zeros beginning of the acctNum.
  * SSN must have 9 lengths.
  * If acctName does not found, the default acctName will be "Member".

 **  **Bold**  indicates all are mandatory fields.

#### Registrar: ShelAuthRegistrar

  * Find user from the USR and USR_SESSION table by org_id and acctNum.
  * If the user is not found:
    * Create a new user and Insert data into the **USR** and **USR_SESSION** table with firstName, ssn, dob, loginId=!usrId, dso=null, pw=ssoKey, permissions=1, usrDetails, orgId, orgName.
    * Insert data into the **USR_MAPPING** table with org_id, cif_num, and usr_id.
  * If the user is found, Update the user with ssn, firstName, and dob.
  * Find the account from the FIN_ACCOUNT by org_id and acct_num.
    * If the account is not found create an account and Insert data into the  **FIN_ACCOUNT**  table with org_id, acct_num, acct_name, and lastModified.
  * Find paperless from the PAPERLESS2 table by acct_id and stmt_type.
    * If paperless not found, Insert data into the  **PAPERLESS**  table with acctId, modifiedBy="0", modifiedDate, newStatus="B", oldStatus="N", stmtType.
  * Find ufa from the USR_FIN_ACCOUNT and FIN_ACCOUNT tables by user_id and acct_id.
    * If ufa is not found create new userFinAccount with usr_id, acct_id, org_id, status="active", acctNum and Insert data into the  **USR_FIN_ACCOUNT**  table.

Database Changes: USR, USR_SESSION, USR_MAPPING, FIN_ACCOUNT, PAPERLESS,
USR_FIN_ACCOUNT.

|

  

|

  

|  
  
ENOTICE4|

 **dla** =enotice

|

#### Handler: ENoticeData7

  * Each line in the process file must contain 11 or 12 fields. 
  * First(Record Type) and last(Record Terminator) field must be "L". 
  * Fields:  ** _L_** _  | acctNum | acctType | acctName | afpFileName | type | closingDate | imageCount | postCardFlag | _ ** _zipFileName_** _| region|_ ** _L_**  
  * If the account name is not present in the index file, the account number will be set as the account name after masking the first 2 or 4 characters. 
  *  postCardFlag value has to be 0 or 1. 

 **  **Bold**  indicates all are mandatory fields.

#### Registrar: HypercubeENoticeRegistrar

  * createAccount=false, needApproval=false
  * Fin account from the FIN_ACCOUNT table, If account is found
    * Check the  ** _acctName_**  provided by the index file. If it does not match with the account name in the database, update it in the  **FIN_ACCOUNT**  table. 
    * Does not update the account name if the name is either "MEMBER" or "CUSTOMER" or "USER". 
  * If paperless is not found, Insert data into the  **PAPERLESS**  table with stmtType="enotice". 
  * Insert data into the **ARCH_FILE**.
  * Inserts enotice data in  **ENOTICE**.
  * Inserts data into the  **P_JOB_ENOTICE**  table. 
  * Inserts data into the  **P_ESTMT_COUNT**  table. 

Database changes: FIN_ACCOUNT, PAPERLESS, ARCH_FILE, ENOTICE, P_JOB_ENOTICE,
P_ESTMT_COUNT.

|  
|  
|  
  
  
PAPERLESS

|  
|

#### Handler: DefaultPaperlessHandler

  * Fields: _**acctNum** | **status**_.
  * The status length will be 1.
  * Insert data into the **PAPERLESS** table with acct_number, status, usr_id='1', org_id, stmt_type.
  * Insert data into the **P_ESTMT_COUNT** table.

**  **Bold**  indicates all are mandatory fields.

Database uses: PAPERLESS, P_ESTMT_COUNT.

|  
|  
|  
  
  
ECL

|  
|

#### Handler: DefaultEclHandler3

  * emailStorage=notifyPref.
  * Update contact_info.
  *  Get the list of notifyPref from the **NOTIFICATION_PREFERENCE** table.
  * Each line in the process file must contain 2 fields.
  * Fields: _**acctNum |**   **email**._
  * Removed all leading zeroes from the account number.
  * As ecl.purge=false,  Delete the notifyPref from the NP table.

 **  **Bold**  indicates all are mandatory fields.

Database changes: NOTIFICATION_PREFERENCE.

|  
|  
|  
  
  
ETAX

|  **etax** =etax|

#### Handler: ETaxData3

  * Fields:  _acctName |   **acctNum**  |  **type**  |  **afpFileName |  **date | suffix | appType | SSN | zipFileName._
  * As isZipped=true, the total field must have 8.
  * AppType must have 2 lengths.

 **  **Bold**  indicates all are mandatory fields.

#### Registrar: ETaxRegistrar3

  * Find account from  **FIN_ACCOUNT**  by org_id and acct_number and type.
  * As etax.createAccount=false, No account will be created if not found.
  * Insert into the  **PAPERLESS  **with acctId, modifiedBy='1', modifiedDate, newStatus='B', oldStatus='N', stmtType='default'.
  * Insert data into the **ARCH_FILE** table.
  * Insert into  **ETAX**  with type, acctId, archiveId, timeStamp ssn, isCorrection.
  * Insert data into the  **P_JOB_ETAX**  table.
  * Insert data into the  **P_JOB_EMAIL**  table.

Database changes: PAPERLESS, ETAX, ,ARCH_FILE, P_JOB_ETAX, P_JOB_EMAIL.

|  
|  
|  
  
EMAIL NOTIFICATION|

  * notification.isSendEmailViaAPI=false
  * notification.isEmailManageByEstmt=false

|

#### Handler: NotifyPrefEmailHandler

  * isSelectiveTemplate= **false** , isSelectiveMailServer= **false** , isSendEmailViaAPI= **false** , isEmailManageByEstmt= **false** , attachmentFeature= **false** , isSendViaAPI= **false,** needApproval= **false** , resetApproval= **false** ,isSelectiveNotifyPref= **false** , isSelectivePaperless= **true** , hasSubType= **false** , isGroupingNotification= **false** , sendAttachment= **false**.

|  
|

  * isSendEmailViaApi=true

|  
  
Reports|

  

|

Enrollment Report

  *  **Handler: EnrollmentReportCU**
    * Get records from the usr_session, usr_fin_account, fin_account, notification_preference, p_job_time, p_job_time, paperless2 tables.
    * Update the p_job_time table for the proc_time.

Database Uses: USR_SESSION, USR_FIN_ACCOUNT, FIN_ACCOUNT,
NOTIFICATION_PREFERENCE, P_JOB_TIME, PAPERLESS2.

|  
|  
|  
  
  
  * undeliverableReport.email_status.update=true
  * undeliverableReport.notifyClient=true
  * undeliverableReport.paperless_status.update=false
  * undeliverableReport.insertToDB=true
  * undeliverableReport.emailServer.cluster=true

|

Undeliverable Report

  *  **Handler: CUUndeliverableReport**
    * paperless_status.update=false 
    * emailServer.cluster=true
      * Grabbing email cluster list from the **HA_SERVER** table.
    * email_status.update=true
      * Update  **CONTACT_INFO**  table with ci_is_eaddr1_valid='N'
    * insertToDB=true
      * Insert into  **SUMMARY_REPORTS**  table with org_id, start_date, end_date, report_type, file_type, report_count.
      * Get from  **SUMMARY_REPORTS**  table by org_id, report_type.

Database Uses: HA_SERVER, CONTACT_INFO, SUMMARY_REPORTS.

|  
|  
|  
  
  
  

  


