title: Message Manager File List
body: ## Enhancements docs

  1.   2.   3. MM Test Automation
    * [Message Manager Test Automation Project Specification and Design](http://redmine.infoimage.com/attachments/download/127/DesignDoc-LinHan.mht)
    *     *     *     *     * Part I Wrap-Up
      *       *       *   4.   5.   6. 

  

## MM2.2

  * Design Documentation (MM2.2 Programming Design 01.26.11.doc)

  

## MM3.0

  * MM3.0 Documentation - backed up from DSI WebSite - 
  * MM3.0 Test Cases -  _ready for review_  - 
  *   *   * Message Manager Full Flow Test Steps
    *     *   *   * Test Plans

  
  

### Click Tracking

  * Test Plan
    *     * Parallel Test Plan - Please update <http://develop.infoimage.com/attachments/download/1236/ClickTrackingForMM3-ParallelRun-Plan.xlsx>

### PDF URL Video Streaming

  * 

  

## MM3 Enhancement

  

### Business Requirements:

 **1\. 2-Pass Proofing of MM3 Campaign:**  
A campaign should be approve by 2 user.The User who have permission of
creating/editing campaign can submit a campaign. Then the campaing is eligible
for 2 pass approval. The campaign only be approved by a user who have an
'Approve campaign' permission after the campaign has been reviewed by a user
who has a 'Review Campaign' permission.

 **2\. HTML to IMP conversion:**  
In MM2.2 text message typed in message area were saved in database as html
with formating. These html were converted to a special formated file - .imp
and send to IS service for further processing. This feature has to implement
in MM3.

 **3\. Video Message:**  
Have to add an video message area in MM3 campaign. A static image or any other
image file accompained by the video file should represent the video in the
pdf. Video should be send to IS service for processing.

 **4\. Dynamic Variable:**  
MM3 message area contains dynamic variable. The dynamic variable in message
area are place holder for some values. Papyrus will replace these variable
with some appropriate value.

 **5\. QR Code as Dynamic Variable:**  
Add dynamic variables support for qrcode, barcode etc. Brcode, QR code are
special type of dynamic variable rather than normal string variables. A schema
should be defined to separate these special type of variables from the normal
string variables.

 **6\. Role Based Multi Level Approval of Message Manager 3 :**  
Allow a sequence of people to approve the campaign gradually one after another
based on their approval stage.In this case there at most 10 stage of approval
may possible. Ensure to  **utilize the URF framework**  to handle the multi
level of approval on the campaign approval  
  

  

### Explanation

 **1\. 2-Pass Proofing of MM3 Campaign**  
 **Architecture & Workflow Diagram**  

 **'Submit'**  Button :  
visible to user who has create/edit campaign permission and -  
Only for those campaign which 'submit' status of MESSAGE_CYCLE_MAP  
has not set true

 **'Review'**  Button :  
Only show the 'Review' button if user have a role that carry the '2-Pass
proofing of mm3 Campaign'  'Review campaign' permission and  
for those campaign that has status = 'submit' true

 **'Approva'**  Button :  
Only show the 'Approve' button if user have a role that carry the '2-Pass
proofing of mm3 Campaign'  'Approve campaign' permission and  
for those campaign that has 'review' and 'reviewed_by' field populated, but
'approved' field is empty

 **Data Model changes (ER diagram & ddl.sql)**  
Add 'review', 'reviewed_by' and 'submit' column in 'MESSAGE_CYCLE_MAP'.  
When a campaign is reviwed then a flag is set true and saved in 'review'

 **Simple Sequence Diagram**  
For review  

For approve  

 **2\. HTML to IMP conversion:**  
 **Workflow:**  
Imp content generation:  
While a message content is saved from a message area there occurred 2 things -

(a) generation of html message content.  
The message content from the text area the html message content is generated
with all text formating.  
In messageService.fileMessage(Message) method there is a call to
Converter.getHtmlContent() which generate the html message content.

(b) generation of imp message content.  
imp message Content is also generated by MessageService.fileMessage(Message)  
In MessageService.fileMessage(Message) there is a call to
Converter.getImpContent() which generate the imp message content.

Saving imp content into database:  
both imp message content(impMessageContent) and html message
content(htmlMessageContent) are saved saved in M_MESSAGE.IMP_MESSAGE_CONTENT
and M_MESSAGE.HTML_MESSAGE_CONTENT respectively.

Zip file generation with .imp file:  
When the campaign get approved there a zip file is created with the imp
content and the file zip file is send to the papyrus for processing. Zip file
generation occurred with the following steps -

(a) impMessageContent retreived from database. Whith this imp messageContent a
file is created with the follwing name - stmtSymbol _
selCriteria.getCriteria()_ areaSymbol priority.imp in
ZipFileZeneratorVer2.generateZip() method.

(b) the imp file generated at step (a) is added to a zip file by
ZipFileZeneratorVer2.doZip() method. A check sum is generated for the zip
file. The chekcsum and some other important parameters are written into a txt
file named - 'clientId_ orgStmtType.getStmtSymbol()_startDate_ endDate.txt' .  
finally the zip file is made with the name 'clientId_
orgStmtType.getStmtSymbol()_startDate_ endDate.zip' . That means the zip file
contains tow file -  
(i) .imp file containing impContent  
(ii) .txt file containing the checksum of the zipfile

Sending the zip file to IS:  
finally the zipfile(which contains the .imp file) is send to the papyrus
service with sendConnand() in ApproveCycleController.approveCycle() method -  
String pdfFileName = sendCommand(generator.generate());

 **Simple Sequence Diagram**  

 **3\. Video Message:**  
  
 **Workflow and architecture:**  
 **1.**  In feature setupu > create message area, create a new message area
for video message. The format of the message area (eg. - imp or image) is
saved in M_MESS_CRITERIA.MMC_FORMAT column. Add a new transient type in
MessageCriteria for representing the video message format - 'VIDEO_MESSAGE'  
Save the message area informatoin in M_MESS_CRITERIA and MESSAGE_AREA table

 **2.**  In create campaign step 3 add the url for the video and upload a
static image representing the video. Save the video url in
M_MESSAGE.VIDEO_URL. Save the static image for the video in  
M_IMAGE.MI content.

 **3.**  The zip file send to the papyrus service contains the image are image
in .tif format and the html content in .imp format. Since now the video file
is not uploaded itself, only the url is used, we can add the url of video in
.imp file.  
in .imp file there are some column unused. url of the video file can be added
at column 1. IMP file can be created as stated in html to imp conversion

 **4.**  finally the zip file can be sent to the papyrus service with the
checksum with approveCampaignHelper.send() method.

 **Data Model Changes:**  
Add new column M_MESSAGE.VIDEO_URL to save the url of the video

 **Simple Sequence Diagram**  
The following sequence diagram contains some important methods -  

 **4\. Dynamic Variable:**

 **Workflow and architecture:**  
 **1**. Under 'Feature Setting' of 'Client Management' tab add a field that
takes all dynamic variable for provided for a client. A new method
clientService.updateProvidedDyncVar() is used to save the provided dynamic
variable to a client. All provided dynamic variable are saved in FEATURE.META
column.  
All provided variable are added under a new attribute of metadata called
providedApp. After addding all apps the metadata should look likes -

{"providedVars":"fname, lname, street, city, promolink/qrcode, price/barcode"}

 **2.**  Under 'Message Manager - Edit Message Area' provide a control to get
all of the available variables for the message area.  
Some checkbox can be used to select dynamic variables for the message area.  
Chosen dynamic variables are stored in MESSAGE_AREA.CHOSEN_VAR column.  

 **3.**  Populate the TinyMC dynamic variable dropdown list with the values
from MESSAGE_AREA.CHOSEN_VAR column. Create the message with the dynamic
variable. Save the message in M_MESSAGE.MESSAGE_CONTENT.

 **4.**  Generate imp with dynamic variable as follows-  
message in message area:  
Hi {name}  
.  
.  
Thnaks {sender} {city},{street}

and converted IMP content is-  
ALIGN LEFT FONT ARIAL_10 'Hi {name},' NEWPARAGRAPH ALIGN LEFT FONT ARIAL_10
'.' NEWPARAGRAPH ALIGN LEFT FONT ARIAL_10 '.' NEWPARAGRAPH ALIGN LEFT FONT
ARIAL_10 'Thanks' NEWPARAGRAPH ALIGN LEFT FONT ARIAL_10 '{sender}'
NEWPARAGRAPH ALIGN LEFT FONT ARIAL_10 '{city}, {street}'

 **Data Model Changes**  
add new attribute "providedVars" to FEATURE.META for saving all variables for
a client and MESSAGE_AREA.CHOSEN_VAR for saving all variable attached to a
message area.Data can be save as json string.For example- in
FEATURE.PROVIDED_VAR column we can save all variables for client as
{providedVars: name, city, street, ...}

Simple Sequence Diagram

 **5\. QR Code as Dynamic Variable:**  
when qrcode and barcode use as dynamic variables they should be seperated from
plain variables. To distinguish them from plain variables (eg. - {fname},
{city} ) we can place a TYPE of variable followed by a back slash (\\) and
then the variable name itself. For example a qrcodeo for promolink can be
represent as 'qrcode\promolink', barcode for price can be represented as
'barcode\price' etc. Since dynamic variables are saved as json string, to be
safe from conflict with ':' avoid any ':' in variable name. Variables name may
contain only underscore('_') and alphanumeric character. TYPE name contain
only alphanumeric character.

According to these schema following are some valid and invalid variable names:  
valid names: {fname}, {client_name}, {username2}, {barcode\ssn} etc  
invalid names: {fname:} - contains colon {client-name} - contains hyphen

 **6\. Role Based Approvall of MM3 Campaign:**

 **Workflow and architecture:**

1\. Under 'Client Management>Feature Setting' show a dorpdonw - 'Role Based
Approval: Enabled/Disabled' besides the feature 'Message Manager 3.0'. The
defautl value for the dropdown is 'Disabled'. Store the dropdown value as a
json in FEATURE.META for the 'Message Manager 3.0' . The key to access the
'Enabled/Disabled' should be 'mm3RolBsdApprvl'. So the json should be -
{'mm3RolBsdApprvl':'Y'}  

2\. If at step 1 the 'Role Based Approval' is 'Enabled' then the 'Message
Manager 3.0' box will show a new check box - 'Message Manager - Role Based
Approval'. If any role contains this permission then this role can
approve/review a campaign ONLY at a certain stage/level assigned with it. The
stage/leve assignment with the role is discribed below.  

3\. The 'Application' tab under account center shows all the campaign
available for the client. This tab will be available for a client if the
client have the 'Message Manager 3.0' permission with the 'Role Based
Approval: Enabled' (please see at step 1).  

4\. If a user click on 'Edit Approval Role' under 'Account Center>Application'
tab then the application approval role list will appear  

All settings of approval roles are saved in INFOTRAK.APPL_APPROVAL_ROLES. If a
user clicked on 'Edit Approval Role' beside 'Monthly Statements' then the
above screen will be appeared. But Both the 'Online Proofing' and 'Message
Manager 3.0' have a application with the name 'Monthly Statement'. The
APPL_APPROVAL_ROLES.APP_TYPE column will store the application type - that is
whether the application from 'Online Proofing' or 'Message Manager 3.0'

5\. The approval screen contains list of stage-role doropdown. The latest
approve/review saved in INFOTRAK.PROOFING_LOG_TRAILS.APPROVE_TIME and the
final approve date is stored at INFOTRAK.MESSAGE_CYCLE_MAP.APPROVED_TIME
column.  

 **Data Model Changes:**  
1\. Add new column INFOTRAK.APPL_APPROVAL_ROLES.APP_TYPE to store the
application type. The application type should be the feature definition code
(eg. - featdure definition code of 'Online Proofing' or 'Message Manager
3.0').

2\. In 'INFOTRAK.PROOFING_LOG_TRAIS' table, add these columns - APP_TYPE,
DB_SRC, SRC_TBL, SRC_COLUMN. So for online proofing, the values will be
APP_TYPE="OnlineProofing", DB_SRC="estmtDb", SRC_TBL="proofing_log",
SRC_COLUMN="proofing_log_id". For Message Manager3, the values will be
APP_TYPE="msgMgr3pt3", DB_SRC="infotrac", SRC_TBL="message_cycle_map",
SRC_COLUMN="mcm_id"

3\. Add a new column INFOTRAK.MESSAGE_CYCLE_MAP.APPROVED_TIME to store the
final approval time.

### Attachments

250250250250250

  

  

true


