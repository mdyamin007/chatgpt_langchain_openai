title: How-to: Setup SSO Test Page for a Client
body: This is the instruction to modify the SSO Test Page code to configure the SSO
test endpoints.

decimal  
  
---  
  
## Step-by-step guide

  1. Open up /usr/local/tomcat/tomcat-processing/i3webapps/ROOT/sso/js/clientList.js on ca-pui-dv-01.infoimageinc.com for editing.
  2. Create the JSON object for the cid of interest if it does not already exists.

Initial Block Exampletrue

  

  3. Fill out the data object.

Data Exampletrue

  

    1. orgName
    2. orgDisplayName
    3. portNum (only for Prism clients to connect to the correct Tomcat)
      1. 9680: default

      2. 9780: bank
      3. 9880: cu

    4. schema
      1. default
      2. bank
      3. cu
    5. server
      1. tomcat
      2. hypercube
  4. Fill out the sso array object

SSO Array Exampletrue

  

    1. Set up one object for each endpoint we need to test.
      1. id: 1,2,3,4,5,...  An integer value incrementing depending on how many test endpoint we are setting up.
      2. vendor: the name of the endpoint to be recognized by the user, e.g. diSSO, sso7, q2
      3. info: extra verbiage to display for additional information
      4. form: the SSO form with the various steps: encrypt, ssoKeyGen, ssoExchange.  

        * encrypt is optional, but ssoKeyGen and ssoExchange are always required
    2. Set up a second endpoint for Staging, since it will use Production password and clientCode. And since these values must be hidden, setting up a Staging endpoint will be helpful, so that the user will not have to manually change the password using Inspect Elements.

  

When changing the clientList.js, it is good practice to pass the client
configuration you're editing through a JSON validator to ensure that there are
no missing parentheses, brackets, or commas. Otherwise, the entire test page
will break!

  

* * *

## General Info

The SSO Test Page is hosted in the same Tomcat instance as the Dev PUI. The
code location is: /usr/local/tomcat/tomcat-processing/i3webapps/ROOT/sso/.

The javascript file containing the JSON object that is used to build the SSO
elements is /usr/local/tomcat/tomcat-processing/i3webapps/ROOT/sso/js/
**clientList.js**. This is the file one should modify when trying to set up a
new SSO test endpoint.

## SSO Test Page Components

The clientList.js file simply defines a single  **cid** object which is an
array of JSON objects that represent each of our clients.

  

jsCID Object Overviewtrue

The above is an example of one of the JSON object inside clientList.js. The
"sso" object is truncated to "..." to provide a simple high level overview
first.

The JSON object contains two mapped values:

Name| Description| Technical Details  
---|---|---  
 **value**|  The search value that will be used in the search bar on the SSO
Test Page. This is how "ACBK" is populated in the search bar for selection.|
This value should be defined in  **uppercase**.  
 **data**|  The data to be used to generate the SSO test tabs and load initial
values.| See below.  
  
 **data**  contains:

Name| Description| Technical Details  
---|---|---  
orgName| The four-letter code InfoIMAGE assigned to the client, commonly know
as the cid| This value should be defined in  **lowercase**.  
orgDisplayName| The full name of the financial institution.| This value is
currently not used.  
portNum| The port number to access the Prism application directly on the
development and staging environments, which do not have proxies.|

This value is only valid for Prism clients.  
  
schema| The database schema that contains the client's data.|  
  
server| The "server" on which the web application for the client is hosted.
The SSO Test Page will default to the value defined here.|

*There's an "Nginx" value, but it should behave exactly like Hypercube.  
  
sso| The JSON array that contains data to generate the SSO test tabs.| See
below.  
  
 **sso  **contains:

Name| Description| Technical Details  
---|---|---  
id| Integer ID for the test tab.| Start at 1, 2, 3,...  
vendor| The name of the vendor for whom the SSO form is for.| This is for user
recognition. It is not being used by any code. E.g. define diSSO so that the
user knows that it is for diSSO.  
info| Additional verbiage that will be displayed.|

This is for in case the SSO steps for the client are unique, and we need to
provide more details.  
  
  
form| The JSON object to define how to generate the UI that facilitate the SSO
steps.| See below.  
  
 **form** contains:

Name| Description| Technical Details  
---|---|---  
name| The name of the action to take.|

  * encryptForm: the data encryption step for clients that require a data hash
  * genKeyForm: the SSO KeyGen step
  * exchangeForm: the SSO Exchange step

  
action| The URL endpoint for the action.|

  

| encryptForm| encrypt.jsp (always)  
---|---  
genKeyForm|

  * Hypercube: ssoKeyGen; or ssoKeyGen/[method] e.g. ssoKeyGen/sso7
  * Prism: depending on the client and how we set up the endpoint. One example is IFSIBhblogin.jsp

  
exchangeForm|

  * Hypercube: ssoExchange (always)
  * Prism: depending on the client and how we set up the endpoint. One example is IFSIBssoexchange.jsp

  
  
  
  
  
method| The HTTP Method (GET or POST)|

  * get
  * post

Typically we should do POST for security.  
  
target| The frame to display the response from each action.|

  

| encryptForm| _encryptFormFrame  
---|---  
genKeyForm| _genKeyFormFrame  
exchangeForm|

N/A (does not need to be defined). We want the exchange step to open a new
tab.

However, we can use _iFrame if we want to test out what happen in an iFrame,
but this has limited utility since the site won't be displayed in a user-
friendly manner.  
  
  
  
  
input| Elements of fields to input.|

List out all the input required to complete the HTTP request.

  *  **displayName** : This value will be displayed on the SSO Test Page UI for the user
  *  **name** : This value will be used as the name of the parameter in the HTTP request. For example, account number in SSO KeyGen need to be passed as selected_acct1 for certain endpoints.
  *  **value** : This is the default value to prepopulate the test page.
  *  **isHidden** : This is optional. If set to true, this value won't be displayed on the SSO Test Page UI. Passwords and client codes must always be hidden for security reason. Other constant values should also be hidden, since they shouldn't be changed by the user.

  

Sample Inputtrue

  
  
  
  

Complete Exampletrue

  

  

  

  

  

  


