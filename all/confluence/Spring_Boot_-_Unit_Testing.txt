title: Spring Boot - Unit Testing
body: This documents the strategies discovered so far.

# General Best Practices

  1. One test class per class, e.g. HeartbeatController should have a HeartbeatControllerTest.  
  2. Code should be written to be testable. If something is hard to write unit tests for, it's most likely the way the code is written.
    1. Single Responsibility: tests can be concise and targetted when the object does not handle a lot of responsibilities. This extends to functions. Functions with a lot of logic and side effects will be harder to test. 
      1. Single Responsibility extends to even the test classes themselves, which should only test the corresponding class. All other dependencies should be mocked. While we are testing a class, we should assume that all other classes used within the class-to-be-tested are functioning properly. Otherwise, a test for a class may fail not because of errors within that class, but within dependent classes.
    2. Dependency injection: any dependencies should be injected via either the constructor or as part of the function's parameters. This will allow tests to mock the dependencies.
  3. Do not reinvent the wheel. As with any programming, there is most likely an existing out-of-the-box solution.

* * *

# Writing Testable Code

Code that follows standard design patterns tend to be more testable than code
that does not follow those established design patterns. For example, Single
Responsibility minimizes the scope of any given class, and thus, most likely
minimize the complexity of the functions within those classes. Functions that
are simple and without many side effects are easy to test.

## Single Responsibility Example

falseGood

Good

  

* * *

  


