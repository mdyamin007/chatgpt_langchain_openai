title: SonarQube and SonarLint for Eclipse
body: ### **SonarQube**

[ SonarQube](https://www.sonarqube.org/) is an open source platform which was
originally launched in 2007 and is used by developers to manage source code
quality. Sonar was designed to support global continuous improvement strategy
on code quality within a company and therefore can be used as a shared central
system for quality management. It makes management of code quality possible
for any developer in the team. As a result, in recent years it has become a
world's leader in Continuous Inspection of code quality management systems.

Sonar currently supports a wide variety of languages including Java, C/C++,
C#, PHP, Flex, Groovy, JavaScript, Python, and PL/SQL (some of them via
additional plugins). And Sonar is very useful as it offers fully automated
analyses tools and integrates well with Maven, Ant, Gradle, and continuous
integration tools.

Sonar uses FindBugs, Checkstyle and PMD to collect and analyze source code for
bugs, bad code, and possible violation of code style policies. It examines and
evaluates different aspects of your source code from minor styling details,
potential bugs, and code defects to the critical design errors, lack of test
coverage, and excess complexity. At the end, Sonar produces metric values and
statistics, revealing problematic areas in the source that require inspection
or improvement.

Here is a list of some of SonarQube's features:

  * It doesn't show only what's wrong. It also offers quality management tools to help you put it right.
  * SonarQube addresses not only bugs but also coding rules, test coverage, code duplications, complexity, and architecture providing all the details in a dashboard.
  * It gives you a snapshot of your code quality at the certain moment of time as well as trends of lagging and leading quality indicators.
  * It provides you with code quality metrics to help you take the right decision.
  * There are code quality metrics that show your progress and whether you're getting better or worse.

SonarQube is a web application that can be installed standalone or inside the
existing Java web application. The code quality metrics can be captured by
running mvn sonar:sonar on your project.

SonarLint for Eclipse on Afp2Pdf:

* * *

###  **Checkstyle**

Code reviews are essential to code quality, but usually, no one in the team
wants to review tens of thousands lines of code. But the challenges associated
with manually code reviews can be automated by source code analyzers tool like
[Checkstyle](http://checkstyle.sourceforge.net/).

Checkstyle is a free and open source static code analysis tool used in
software development for checking whether Java code conforms to the coding
conventions you have established. It automates the crucial but boring task of
checking Java code. It is one of the most popular tools used to automate the
code review process.

Checkstyle comes with predefined rules that help in maintaining the code
standards. These rules are a good starting point but they do not account for
project-specific requirements. The trick to gain a successful automated code
review is to combine the built-in rules with custom ones as there is a variety
of tutorials with how-tos.

Checkstyle can be used as an[ Eclipse
plugin](https://marketplace.eclipse.org/content/checkstyle-plug) or as the
part of a built systems such as[
Ant](http://checkstyle.sourceforge.net/anttask.html),[
Maven](https://maven.apache.org/plugins/maven-checkstyle-plugin) or[
Gradle](https://docs.gradle.org/current/userguide/checkstyle_plugin.html) to
validate code and create reports coding-standard violations.

  

* * *

###  **PMD**

[ PMD](https://pmd.github.io/) is a static code analysis tool that is capable
to automatically detect a wide range of potential bugs and unsafe or non-
optimized code. It examines Java source code and looks for potential problems
such as possible bugs, dead code, suboptimal code, overcomplicated
expressions, and duplicated code.

Whereas other tools, such as Checkstyle, can verify whether coding conventions
and standards are respected, PMD focuses more on preemptive defect detection.
It comes with a rich and highly configurable set of rules that you can easily
configure and choose which particular rules should be used for a given
project.

The same as Checkstyle, PMD can be used with
[Eclipse](https://marketplace.eclipse.org/content/eclipse-pmd),[ IntelliJ
IDEA](https://plugins.jetbrains.com/plugin/1137-pmdplugin),[
Maven](https://maven.apache.org/plugins/maven-pmd-plugin),[
Gradle](https://docs.gradle.org/current/userguide/pmd_plugin.html) or[
Jenkins](https://wiki.jenkins.io/display/JENKINS/PMD+Plugin).

Here are a few cases of bad practices that PMD deals with:

  * Empty try/catch/finally/switch blocks.
  * Empty if/while statements.
  * Dead code.
  * Cases with direct implementation instead of an interface.
  * Too complicated methods.
  * Classes with high Cyclomatic Complexity measurements.
  * Unnecessary 'if' statements for loops that could be 'while' loops.
  * Unused local variables, parameters, and private methods.
  * Override hashcode() method without the equals() method.
  * Wasteful String/StringBuffer usage.
  * Duplicated code - copy/paste code can mean copy/paste bugs, and, thus, bring the decrease in maintainability.

  

* * *

###  **FindBugs**

  

[ FindBugs](http://findbugs.sourceforge.net/) is an open source Java code
quality tool similar in some ways to Checkstyle and PMD, but with a quite
different focus. FindBugs doesn't concern the formatting or coding standards
but is only marginally interested in best practices.

In fact, it concentrates on detecting potential bugs and performance issues
and does a very good job of detecting a variety of many types of common hard-
to-find coding mistakes, including thread synchronization problems, null
pointer dereferences, infinite recursive loops, misuse of API methods etc.
FindBugs operates on Java bytecode, rather than source code. Indeed, it is
capable of detecting quite a different set of issues with a relatively high
degree of precision in comparison to PMD or Checkstyle. As such, it can be a
useful addition to your static analysis toolbox.

FindBugs is mainly used for identifying hundreds of serious defects in large
applications that are classified in four ranks:

  * scariest
  * scary
  * troubling
  * of concern

  

  

  


