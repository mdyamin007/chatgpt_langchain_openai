title: Mule Studio - Tutorial
body:   

## Installing Mule Studio

### Check System

[Page in construction - work in progress...]

    
    
    Your operating system is one of the following:  
          Windows  
          MAC OSX 10.6 or later  
          Linux 
    
    
    You have one of the following Java Development Kits (JDK) installed on your system:  
          JDK SE 6 Update 26 (Standard Edition 1.6.0_26) or later  
          JDK EE 6 Update 3 (Enterprise Edition 1.6u3) or later   
            &lt;Download a Java Development Kit - external link&gt;

  

### Download

    
    
    The Mule Studio installation package contains everything you need to create and run Mule applications a bundled runtime   
        version of Mule ESB. Download the Community Edition for free. Download the Enterprise Edition for a free 30 day trial.

  

### Unpack and Launch

    
    
    1.    On your local drive, navigate to .zip file you downloaded for Mule Studio, then unzip the file.  
      2.    Optional: Move the unzipped MuleStudio folder to your Program Files or Applications folder.  
      3.    In the MuleStudio folder, double-click the MuleStudio executable file to launch both Mule ESB and Mule Studio. 
    
    
        Windows: MuleStudio.exe  
            Mac OSX: MuleStudio.app  
            Linux: MuleStudio
    
    
    4.    Before opening the GUI, Mule Studio displays a pop-up dialogue to allow you to designate the workspace folder in   
            which Mule will store all your project-specific files. Enter the filepath to the location on your local drive in  
            which you want to store your Mule projects, then click OK. 
    
    
    &lt;figure-1&gt;
    
    
    5.    Mule Studio opens a Welcome Page to help you get started. 
    
    
    &lt;figure-2&gt;
    
    
    6.    Click one of the following three links to get kicking:   
            New Mule Project -- Studio opens a wizard to help you open a new project.  
            New Mule Project based on a template -- Studio opens a wizard to help you open a new project from a template.  
            Go to Mule Studio -- Studio opens without opening a new project.

  
  

## Mule Studio Essentials

    
    
    Mule Studio is an Eclipse-based, integration development environment. It offers two development environments you can   
        use to create Mule  applications: 
    
    
    1.    a visual, drag-and-drop editor  
        2.    an XML editor 
    
    
    Whatever you develop or configure in one editor is reflected in the other. Same tool, different editor.
    
    
    &lt;figure-3&gt;

  
  

### What is the relationship between Mule ESB and Mule Studio?

 **Mule ESB**  is the core Enterprise Service Bus application. You can install
and use Mule ESB without Mule Studio (  
a.k.a. Mule ESB standalone, or Mule ESB runtime) and interact with it --
building and running integration  
applications and Web services -- via an independent external integration
development environment (IDE),  
like IntelliJ, Eclipse, or JDeveloper.

 **Mule Studio**  is the graphical user interface you can use to access Mule
ESB's functionality. Rather than  
writing XML code in an IDE to create Mule applications, you can use Studio,
Everyman's visual integration  
development environment. Use Studio (a.k.a. Mule ESB Designtime) to drag and
drop elements into place to  
quickly model, configure, then deploy applications on-premise or in the cloud.

<figure>  
  

  

### How Do I Use Studio?

<figure>

 **A. Model**  
The visual editor enables a developer to arrange building blocks on a
composition canvas to create Mule flows, which form the basis of a Mule
applications. Simply drag-and-drop building blocks on the canvas to create a
sequence of events that facilitate the processing of Mule messages.

 **B. Configure**  
The visual editor provides dialog boxes to configure building blocks. The
dialogs accept plain English entries, rather than formatted XML, so developers
don't have to bother with XML syntax when configuring each building block.  
Developers already comfortable with XML may prefer to use the XML editor to
set configuration details by writing XML statements directly into the XML
configuration file. Studio makes XML coding easier by providing syntax
guidance (suggestions for auto-completion) and providing drop-down menus that
list the available options for XML attributes.

 **C. Debug**  
Studio includes a debugger to run a Mule application and watch the source code
and examine the variables during execution. Set break points in an
application, then let Mule get to work.

 **D. Deploy**  
Deploy a new Studio application locally to test it, or externally to put it to
work in a production environment. A developer can also deploy a Studio
application to the application repository in the Mule Management Console or
deploy to CloudHub.

 **How Do I Use the Visual Editor?**

Studio's visual editor is divided into four quadrants:

> 1\. Package Explorer  
> 2\. Canvas  
> 3\. Outline  
> 4\. Console

<figure>

The  **Package Explorer**  displays project folders and files in a tree
format. Click to expand or contract Mule project folders  
and examine the files that make up a Mule project.

The  **Canvas**  provides a space that facilitates arrangement of Studio
components into Mule flows. The  **Palette** , on the  
right-hand edge of the canvas, displays a list of Mule building blocks that
you can click and drag onto the canvas  
to build your application. At the base of the canvas, Studio offers three tabs
which offer different ways to interface  
with your application:

 Message Flow: the drag-and-drop interface that facilitates arrangement of
Studio components into Mule flows  
 Global Elements: the interface for creating or editing reusable
configurations for Mule building blocks  
 Configuration XML: the XML editor interface displays the XML statements that
correspond to the building blocks arranged on the Message flow canvas  
The Outline displays a miniaturized overview of the whole canvas, along with a
box cursor that scrolls with the display in the canvas pane. This provides a
high-level, bird's eye view of your complete Mule application as it extends
beyond the borders of the canvas.  
The Console displays a list of events and problems (if any) that Studio
reports as you create or run your Mule application. The JavaDoc and
Declarations tabs display additional categories of information related to your
code.  
What Do I Build with Studio?  
Use Mule Studio to arrange building blocks on the canvas to create flows
which, together, form an application to process messages.  
Confused? Let's break it down:  
Building Blocks  
A building block is a pre-packaged unit of business logic that come bundled
with Mule. As the name implies, it is a block (a block of code, really) that
you can arrange with other blocks to form a structure. In this case, you are
arranging building blocks to form a Mule flow.  
Building blocks fall into one of three categories depending on their function
within a Mule flow:  
Type Function Examples  
Message Processors filter, alter, route, or validate messages Payload Filter,
Choice Flow Control, Email to String Transformer  
Message Sources also known as Inbound Endpoints, accept messages into flows
and trigger message processing (Technically, message sources, which receive
messages, rather than process them, do not qualify as message processors.)
HTTP endpoint, Ajax endpoint  
Component pre-packaged or custom-coded, integrate specific functionality (The
custom code can be developed as a Java class, a Spring bean, or as a Ruby,
JavaScript, Groovy, or Python script.) Logger, Echo, Java  
To arrange building blocks to form a flow, simply drag and drop them from the
palette onto the canvas.

<figure>

After you have arranged building blocks building blocks into a flow, you must
configure each building block individually.  
Double click the building block to open its  **Properties**  pane, then supply
the values for the configuration fields (see image below).  
Studio saves all of your configurations in the XML file for your application.
To see the XML version of your flow, click the  
 **Configuration XML**  tab below the canvas.

<figure>

Flows  
A flow resides at the heart of every Mule application, orchestrating message
processing and, at times, triggering other flows. Typically, a message source
receives a message, which triggers the main message processing flow. Each
building block in the flow evaluates or processes the message until the
message has passed through all the building blocks in the flow. Refer to the
image above to see an example of a simple flow labelled EchoFlow.  
For more information on the types of flows and variations in behavior, see
Mule Application Architecture.  
Applications  
Applications are collections of flows that work together to process a message.
Simple applications consist of a single flow of message processors, but
complex applications can contain several flows. Within the context of Mule
Studio, the terms "application" and "project" are used interchangeably.  
Messages  
Messages are the functional data units, or packets, that Mule applications
process. For example, each customer order submitted to a Mule purchase
fulfillment application qualifies as a message. Each message contains a header
and a payload, the latter of which may contain XML, JSON, files, streams,
maps, Java objects, or any other type of data.  
XML Editor Tips and Tricks  
Because Mule Studio leverages the Eclipse IDE, the Configuration XML editor
incorporates many Eclipse features provided. The following is a list of handy
tips and tricks for using Mule Studio's XML editor.  
Show Attribute Options  
1\. Double click to select an attribute of an element, such as the host
attribute of the HTTP endpoint element.  
2\. Press Ctrl+space bar to open a list of suggested attributes you can
configure for the element (see below).  
3\. Use the up and down scroll arrows to browse through the suggestions.  
4\. When you have highlighted the attribute you wish to use, press enter to
insert it into the XML configuration.

Suggest Elements  
1\. Enter an element's left bracket ( < ), then press Ctrl+space bar.  
2\. Recognizing that you are entering a new element, Studio lists all possible
element for that particular situation.  
3\. Use the up and down scroll arrows to browse through the suggestions.  
4\. When you have highlighted the element you wish to use, press enter to
insert it into the XML configuration.

\---------------------------------  
h2. Basic Studio Tutorial

This exercise is designed to introduce you to Mule Studio and help you get
comfortable building applications.

We're going to build a simple, single-flow spell checker application. The app
calls the Google Spell Checker API  
which performs the spell check, then returns suggestions for misspelled words.
When you have finished building it,  
you can submit XML files to the application to spell check the contents.

Launching Studio  
If you have already launched Studio as part of the installation process, and
it is now running, skip the rest of this section and proceed directly to:
Opening a New Project.  
1\. Navigate to the directory on your local drive in which you installed
Studio.  
2\. Double-click the executable file to launch Studio.  
 MuleStudio.exe in Windows  
 MuleStudio.app in Mac OS  
 MuleStudio in Linux  
3\. When Studio presents the Workspace Launcher dialog, click OK to accept the
default workspace.

<figure>

4\. If this is the first time you have launched Studio, you may see a Welcome
screen as per below. Click Go to Mule Studio to dismiss the screen.

Creating a New Project  
1\. From the Studio application menu, click File > New > Mule Project.  
2\. Studio open the New Mule Project wizard. Type "Spell Checker" in the Name
field.  
3\. Click anywhere in the Description text box, then type comments pertaining
to the project, if you wish. Note that Studio populates the Server Runtime
field with the server which comes bundled with

4\. Click Next to proceed.  
5\. Studio prompts you to create a new flow in your new project. It auto-fills
the flow Name field and flow File Name field using the name of the Mule
project you entered. Adjust the field values and add a description of the flow
if you wish, then click Finish.  
6\. In the Package Explorer, Spell Checker.mflow appears under the flows
folder and mule-project.xml appears under the src folder. The .mflow file
stores flow information for the

Setting Up Folders  
The Spell Checker application requires the creation of two new folders:  
 an InXML folder to accept end user spell check requests  
 an OutXML folder to return the spell check suggestions to the end user.  
The Spell Checker application polls the InXML folder every three seconds for
end user file submissions. When it finds one, it processes the request (i.e.
performs the spell check through the Google API), then puts the spell-checked
file in the OutXML folder for the end user to view. As an end user, using this
application is like feeding a document into the "IN" slot of a machine, then
receiving the changed document in the machine's "OUT" tray.  
1\. Navigate to your MuleStudio folder on your local drive.  
2\. Navigate to the Examples > SpellChecker folder.  
3\. In the SpellChecker folder, create two new folders, one labeled InXML, one
labeled OutXML.  
Modeling a Mule Flow  
This first step in creating an application involves "modeling" the flow on
your canvas. Drag and drop the flow's building blocks into place on the canvas
to visual construct, or model, your flow. Then, with all the pieces in place
in the order you want, you can individually configure each building.  
1\. Click and drag a File endpoint, which resides in the palette's Endpoints
group, onto the canvas.  
2\. Click and drag an HTTP endpoint onto the canvas, dropping it next to the
File endpoint. An arrow appears which indicates the direction of the message
flow between the File component and the HTTP component.

3\. Place an Echo component (in the palette's Component group) next to the
HTTP endpoint, then place another File endpoint next to the Echo component.

Configuring the Flow Components  
Nearly all Mule components provide configuration options, which you can set in
one of two ways:  
 via the building block Properties dialogs in Studio's visual editor  
 via XML code in Studio's XML editor  
The steps below details the procedure to configure the building blocks in the
visual editor.  
File Inbound Endpoint  
1\. Double-click the first File endpoint in your flow to open the Properties
dialog (see image below). Note that Studio has automatically identified this
building block as an Inbound Endpoint.  
2\. In the Display Name field, you have the option to enter a descriptive name
for the endpoint such as Incoming File, which will appear directly under the
File endpoint icon on the canvas.  
3\. In the Path field, enter the filepath of the InXML folder you created such
as, Users/aaron/MuleStudio/examples/SpellChecker/InXML. This tells the
application where to look for new files from the end user.  
4\. In the Polling Frequency field, change the value from 1000 to 3000. This
tells the application how often to poll the folder for new files; in this
case, every 3000 milliseconds, or 3 seconds.  
5\. Click OK to complete the File endpoint configuration.

HTTP Endpoint  
This endpoint retrieves information from a the Google Spell Checker API.  
1\. Double-click the first File endpoint in your flow to open the Properties
dialog.  
2\. Optionally, enter a Display Name for the HTTP endpoint, such as Invoke
API.  
 In the Host field, type the URL of the Google Spell Check API:
[www.google.com/tbproxy/spell?lang=en](http://www.google.com/tbproxy/spell?lang=en)  
 In the Port field, type the port number the Google Spell Check server uses:
80  
 Use the drop-down menu in the Method field to select the method for
communicating with the Google Spell Check server:POST  
3\. Click OK to complete the HTTP endpoint configuration.

Echo Component  
The Echo Component, which displays the API's messages in the Studio console
when the application runs, requires no configuration. Optionally, you can open
the Properties dialog, then enter a Display Name for the component.  
File Outbound Endpoint  
1\. Double-click the last File endpoint in your flow to open the Properties
dialog.  
2\. Optionally, enter a Display Name for the endpoint such as, Outgoing File.  
3\. In the Path field, enter the file path of the OutXML folder you created
such as, Users/aaron/MuleStudio/examples/SpellChecker/OutXML. This tells the
application where to save files.  
4\. In the Output pattern field, enter #[function:datestamp:dd-MM-
yy]_#[function:systime].xml This instructs Mule to combine a date stamp and a
time stamp when creating a file name for the output data it writes to the
OutXML directory.  
5\. Click OK to complete the endpoint configuration.

6\. Click Save to save the changes to the Spell Checker project.

    
    
    Click the Configuration XML tab at the base of the canvas to switch from the visual editor to the XML editor.   
    If you edit the XML code, Studio reflects your changes in the visual editor. This is known as "two-way editing".

Running the Application  
Having built, configured and saved your new application, you must run it on
the Mule server (included as part of the bundled download of Mule Studio)
before you use it.  
1\. In the Package Explorer pane, right-click the SpellChecker.mflow file,
then select Run As > Mule Application.  
2\. Mule immediately kicks into gear, starting your application and letting it
run. When startup is complete, Studio displays a message in the console that
reads, Started app 'spell_checker'.

Using the Application  
Mule is now polling your InXML folder for XML files. To start a flow process,
you need to copy an XML file into this folder (i.e. submit a file to be
checked for spelling). Conveniently, an XML file with misspelled content is
included with the bundled download of Mule Studio. The following steps details
how to submit this file to the Spell Check app to check for spelling.  
1\. Navigate to the Spell Checker folder on your local drive. For example,
Users/aaron/MuleStudio/examples/SpellChecker).  
2\. The spellcheck.xml file in that folder contains some purposefully
misspelled text: "Creeating mi fiirst Mulle Studio aplication!"  
3\. Copy this file, then paste it into the InXML folder. (Don't simply move
the file because Mule will delete the file from the InXML folder as soon as it
accepts it into the flow.) Notice that as soon as you do this:  
 the Studio console displays numerous messages (it's processing your file!)  
 the spellcheck.xml file disappears from your InXML folder  
 a new file appears in the OutXML folder  
 the new file name includes the date-and-time stamp pattern we specified in
the outbound endpoint configuration  
4\. Double-click to open the new file in the OutXML folder. The file contains
suggested spelling corrections for the misspelled words the Google API found
in the inbound XML file.  
5\. The Spell Checker application continues to run, polling the InXML folder,
waiting for new XML files to process.

What you put in:  
  
<spellrequest textalreadyclipped="0" ignoredups="0" ignoredigits="1"
ignoreallcaps="1">  
<text>Creeating mi fiirst Mulle Studio aplication!</text>  
</spellrequest>

What you get out:  
  
<spellresult error="0" clipped="0" charschecked="44">  
<c o="0" l="9" s="0">Creating Crating Greeting Cremating Curating</c>  
<c o="13" l="6" s="0">first foist fist fiesta fest</c>  
<c o="20" l="5" s="0">Muller Mlle Mule Mull Miller</c>  
<c o="33" l="10" s="0">application applications allocation placation
implication</c>  
</spellresult>

Using the Application Again  
Simply copy the spellcheck.XML once more and place it in the InXML folder. If
you wish, you can change the misspelled contents (the phrase between the
<text> tags) to create new misspelled words for Google to check.  
Stopping the Application  
To stop the application, click the red, square Terminate icon above the
console panel.

Studio Building Blocks  
In Mule Studio, a building block is a visual representation of an element.  
If building a Mule application via XML in an integrated development
environment, a developer configures a series of elements in a specific order
to create a flow. An element, enclosed within angle brackets, defines an
activity that Mule must perform when processing a message. For example, an
<http:inbound endpoint> element receives new messages, then passes them to the
next element in its flow.  
Studio's visual editor displays each element in a flow as a building block.

In the visual editor, three horizontally-aligned building blocks in a flow
represent three vertically-listed elements in the XML editor, as illustrated
by the image below. The dashed-line that surrounds the building blocks
represents the scope of the flow; the arrows indicate the direction of the
message as it passes through a flow.

For example, the following image displays the same flow in both its visual
editor and XML editor formats.

XML Editor Colors  
Green = element name and its delimiters  
Purple = attribute name and its delimiters  
Blue = attribute value and its delimiters

The building blocks in Studio's visual editor fall into one of three
categories:  
1\. Message Sources accept messages into flows and trigger Mule to begin
message processing.  
2\. Message Processors perform some kind of action with a message such as
filtering, transforming, routing, or validating.  
3\. Components perform specific pre-packaged or custom-coded functionality.  
In the Echo example above, the flow contains one message source and two
components. As a message moves through the flow, Mule executes the activities
one by one as defined by the building blocks.

Attributes  
After having created a flow of building blocks in Studio's visual editor, you
must configure the attributes of each. To do so in Studio, you have two
options:  
1\. double-click a building block in the visual editor's canvas to open its
Pattern Properties panel, in which you can define its attributes by entering
values in fields  
OR  
2\. access the XML editor, then define attributes directly in the XML config
file  
Whichever method you choose, Studio automatically and immediately reflects
your configuration changes in both editors, thereby adhering to its two-way
editing functionality. The example below illustrates an element's attribute
configurations in the visual and XML editor.

Message Exchange Patterns  
One of the attributes of a message source is the exchange pattern. The
exchange pattern defines whether the message source simply receives a message,
or receives, then responds to message.  
Exchange Pattern Behavior  
one-way receives messages, initiates processing  
two-way receives messages, initiates processing, then returns response  
With Studio's visual editor, a message source's exchange pattern is indicated
by the small arrow icon perched upon the upper-right corner of the building
block. A double-arrow icon indicates a two-way message exchange pattern
(below, left); a single-arrow icon indicates one-way (below, right).

Understand Global Elements  
In Mule, a Global Element is a reusable, "master" building block that you
configure once, then reference many times from building blocks within multiple
flows. Rather than repeatedly writing the same code to apply the same
configuration to multiple building blocks, you can create one global element
that details your configurations or transport details. Then, you can instruct
any number of building blocks across flows in your Mule application to
reference that global element.

<figure>

Some building blocks require a reference to a global element. For example,
some message sources must reference a global connector element in order to
function as a transport. The majority of building blocks, however, use global
elements merely as a matter of convienience and efficiency.

You can acess a global element in Mule Studio via the visual editor or the XML
editor.  
 In the visual editor, click the Global Elements tab at the base of the
canvas to access a list of all global elements in an application (below,
left).  
 In the XML editor, scroll to the top of the XML config file to see the
global elements configured outside and above all flows in the application
(below, right).

<figure>

Creating a Global Element

Visual Editor  
To create a global element in the visual editor, you can use one of two
methods:  
 Global Elements Tab -- create, edit or delete global elements outside the
context of any flow in your application (below, left).  
1\. Click the Global Elements tab at the base of the canvas to navigate to a
list of the application's Global Elements.  
2\. Click the Create button to add a new global element.  
3\. To configure a building block in flow to reference a global element, use
the drop-down menu next to the Config Reference field to select a global
element from the list of those you have created.

 In a Building Block -- create or edit a global element from within a
building block in your flow (below, right). This method offers the convenience
of creating and referencing global elements in one step as you build your
flow.  
1\. Double-click the building block in a flow that you want to reference a
global element to open its Pattern Properties panel.  
2\. Nex to the Config Reference field, click the icon to create a new global
element, or click the small pencil icon to edit an exiting global element.

3\. After you have created (or edited), then saved your global element, Studio
automatically applies the config reference, and adds the global element to the
list of items on the Global Elements tab.

XML Editor  
To create a global element in the XML editor, write its configuration code at
the top of your XML config file, above -- and outside -- any flows within your
application.  
To configure a building block in flow to reference a global element, add a
config-ref: or connector-ref: attribute to the building block.

Deploying Studio Applications

After modeling, then configuring your Mule Studio application, only two steps
remain to put your application to work: debugging, then deploying.

<figure>

Debugging an Application  
As an Eclipse plugin, Mule Studio incorporates all Eclipse debugging features.
Studio's Debug perspective lets you control the execution of your application
by setting breakpoints, suspending launched applicaitons, stepping through
your code, or examining the contents of variables.  
Refer to see the Eclipse documentation for more information debugging your
application.  
Opening the Debug Perspective  
1\. Above the Package Explorer, Studio displays icons that represent the
project's perspectives. By default, the Studio opens the Mule perspective (see
below) in which you model and configure your application. Click the table icon
next to the Mule perspective, then select Other. . ..

2\. In the perspectives panel, select Debug, then click OK.  
3\. Studio opens the Debug perspective, which looks similar to the Mule
perspective, minus the Package Explorer, and including two new panels above
the canvas (see below).

4\. To close the Debug perspective, right click its icon, the select Close.

Deploying an Application  
You can deploy an application developed in Mule Studio in four ways:  
1\. Deploy on the embedded test server  
2\. Deploy on a Mule Enterprise server  
3\. Publish to the Mule Management Console Application Repository  
4\. Deploy to Cloudhub  
Deploy on the embedded test server  
Run your application locally, on the Mule server embedded in Studio, to test
it. The embedded Mule test server bundled with the Community Edition runs for
12 hours before it must be restarted.

When you specify Run as a Mule Application, Studio automatically builds and
deploys your application to the internal Mule server, which starts
automatically, if necessary.  
1\. In the Package Explorer, right-click your project's name, then select Run
As > Mule Application.  
2\. Studio runs the application on the embedded Mule test server. (Unless you
stop it, Studio runs the application for a period of 12 hours.) View the
application's activities in the Studio console.  
3\. To stop the application from running, click the red, terminate button at
the top edge of the console.

Deploy on an a Mule Enterprise server  
Export the Studio application to a zip file, then run it on a Mule Enterprise
server. This approach is ideal for Mule servers in production environments. |
The zip file contains all the resources (such as code libraries and
application metadata) necessary to run the application, and import it into
Studio again for further development.

Deploying a Studio-built application in production on an Mule Enterprise
server involves three steps:  
1\. export the application from Studio  
2\. launch the Enterprise server  
3\. deploy the application on the Enterprise server  
Exporting an Application from Studio  
Studio lets you save a project as a Mule Deployable Archive (i.e. zip file).
Such a packaged Mule archive provides a convenient method for transferring
files between editions of Studio or backing up Studio projects. The package
includes all information specific to your application(s), including flows,
configuration files, Java classes, referenced HTML files, and more.  
1\. Right-click the project name in the Package Explorer pane, then select
Export . . ..  
2\. In the Export wizard, click Mule to expand the associated node, select
Mule Studio Project to Mule Deployable Archive (includes Studio metadata),
then click Next.

3\. Select an output folder to which your project archive will be saved, then
click Finish.  
Launching the Enterprise Server  
1\. If you do not already have Mule ESB Enterprise Standalone installed on
your system, download Mule ESB 3.3 Enterprise Runtime trial.  
2\. Start Mule.  
Need more detail?  
Deploying an Application on the Enterprise Server  
1\. Navigate to the folder on your local drive into which saved your archived
Studio application, then copy the zip file.  
2\. Navigate to the folder that contains your copy of Mule ESB Standalone,
then paste the application's zip file into the apps folder.  
3\. Mule polls the apps folder every 5 seconds; it picks up the application
you copied to the apps folder, then extracts and deploys it automatically. In
the command line, Mule notifies you that it has deployed the application.

4\. If you wish to undeploy your application but keep Mule ESB running,
navigate to the app directory and delete the file your_application.txt. This
removes your application from the /app directory.  
5\. To stop Mule ESB from running in the command line, hit CTRL-C.  
Publish to the Mule Management Console Application Repository  
Publish the application to the Application Repository in the Mule Management
Console. Once in the repository, the application can be deployed from the
repository to multiple Mule server instances, and even to multi-node Mule
clusters. (The Mule Management Console is only available in Mule ESB
Enterprise Edition.)

Once in the repository, the application can be deployed from the Repository to
multiple Mule server instances and even to multi-node high-availability
clusters. To publish an application to the management console's app repo, you
must first download, then install and set-up Mule ESB Standalone with Mule
Management Console. Access the management console's Quick Start Guide to set
up a console environment, then complete the following steps to publish your
Studio application to its application repository.  
1\. In Studio, right-click the project name in the Package Explorer pane, then
select Mule Management Console > Publish to Application Repository . . ..  
2\. In the publication wizard, input a value for each of the fields to specify
the location, login credentials of your management console, and the settings
for your application.  
3\. Click Finish to publish the app to the repository.  
4\. Follow the directions in the management console Quick Start Guide to
deploy your application to the Mule server (or cluster of servers).

\-------------------------------------  
h2. How Mule Works


