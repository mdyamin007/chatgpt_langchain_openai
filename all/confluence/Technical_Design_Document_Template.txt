title: Technical Design Document Template
body: # Introduction

  

## Purpose/Objective Summary

  1. We are trying to create system which allow to create new Billing, and customize existing Billing.
  2. Billing Automation is a part of system, where Accounting Manager can create and update Billing Category and Billable Item.
  3. User can create Invoce using existing Invoice templet and sent to client, and create report of production counts.

  

## Scope

 **TODO: (Required)**  List out the itemized features of what's inside/outside
of the scope of current project/phase

  

### In-Scope

  1. Account manager can create and update Billing Category and Billing Item.
  2. Billing Item coming from FileSystem.
  3. Only Manager level employee can approve Invoice.
  4. Sales admin can Create, Update, Execute and Export Pricing Exhibit.
  5. User can create and export Report of Production counts.

  

### Out-of-Scope

  1. Feature [#3](https://i3dev.easyredmine.com/issues/3 "Enhancement: TEST: improvement on eSafetyBox \(Closed\)")
  2. Feature [#4](https://i3dev.easyredmine.com/issues/4 "Bug: test \(Closed\)")
  3. ...

## Assumptions

 **TODO: (If Applicable)**  List out assumptions made during this design.  
 **IMPORTANT:**  All assumptions need to be confirmed with corresponding
stake-holder during design review. Assumptions would likely become
Dependencies upon confirmation/design-review

  1. e.g. This tool is meant to be used by internal people only, hence it will only support FF/Chrome. No IE supported needed.

  

## Dependencies

 **TODO: (If Applicable)**  List out all dependency component/service/library
needed for this design

  1. e.g. jQuery Library v1.9.2 or above
  2. e.g. PC need to be responsible for entering XXX values into YYY input file

  

# Requirements

  

## Business Requirements & Use Cases

 **TODO:**   **(Required)**  List out all needs/requirement from business/end-
user perspective. Assign an ID for each requirement/use-case item for easier
reference in future

ID| Title| Details| ScreenMock| Importance  
---|---|---|---|---  
BRQ-01| Accounting Manager side requirements|  **Requirement:**  Allow
Accounting Manager(s) to create, view and update Billing Category and Billable
Item.  
 **Use Case 1:**  Accounting Manager can create and update Billing Category.  
 **Use Case 2:**  Accounting Manager able to view any existing Billing
Category using any combination of Billing Category Details, Facility and
Department.  
 **Use Case 3:**  Accounting Manager can create, view and update Billable
Item.  
 **Use Case 4:**  Accounting Manager able to view any existing Billable Item
using any combination of Billable Item Details, Facility and Billing Category.  
 **Use Case 5:**  Accounting Manager can approve Invoice.  
 **Use Case 6:**  Any invoice with an Invoice Total over $1500 will be
automatically marked to require approval from the Accounting Manager.  
 **Use Case 7:**  If Accounting Manager approved an Invoice than it is
completed and send to client.| <attach file>| one of following: P0-Show
Stopper  
P1-High  
P2-Normal  
P3-Low  
P4-Nice To Have  
BRQ-02| Implementation Manager side requirements|  **Requirement:**  Allow
Implementation Manager(s) to view and update invoice.  
 **Use Case 1:**  Implementation Manager can view and approve Invoice.  
 **Use Case 2:**  If new Invoice is created than it is required to approve by
Implementation Manager.  
 **Use Case 3:**  Person who generates first time invoice needs to require
Implementation Manager to provide approval.  
 **Use Case 4:**  If Implementation manager approved an Invoice than it is
required to approve by Accounting Manager.| <attach file>| one of following:
P0-Show Stopper  
P1-High  
P2-Normal  
P3-Low  
P4-Nice To Have  
  
  

## Functional Requirements & Use Cases

 **TODO:**   **(Required)**  List out all needs/requirement from
engineering/functional perspective. Associate them with an ID for easier
reference

ID| Title| Details| Bus. Req. Ref.| Importance  
---|---|---|---|---  
FRQ-01| Generic Search by Sphinx| (example)  
 **Requirement:**  Instead of constructing the SQL statements for search,
utilize Sphinx to help build the index and support such generic search.  
 **Use Case:**  enter "ben" into search box, search results returned should
include both record of "Ben
[Chan/bchan@infoimage.com](mailto:Chan/bchan@infoimage.com)" as well as "Jim
[Wong/jwong@bigben.com](mailto:Wong/jwong@bigben.com)"| <optional>| one of
following:  
P0-Show Stopper  
P1-High  
P2-Normal  
P3-Low  
P4-Nice To Have  
FRQ-02| ...| ...| ...| ...  
  
  

## Performance & Scalability Requirements (SLA)

 **TODO: (Required)**  List out all needs/requirement from Performance
perspective. Associate them with an ID for easier reference

ID| Title| Details| Importance  
---|---|---|---  
PRQ-01| Fast Search response| (example)  
 **Requirement:**  All Search operation should return results within 100ms.  
 **Use Case:**  <enter if applicable>| one of following:  
P0-Show Stopper  
P1-High  
P2-Normal  
P3-Low  
P4-Nice To Have  
PRQ-02| ...| ...| ...  
  
  

## QA/Test Requirements

 **TODO:**   **(Required)**  List out all needs/requirement from QA/Testing
perspective. Associate them with an ID for easier reference

ID| Title| Details| Importance  
---|---|---|---  
TRQ-01| Selectable Search Box element| (example)  
 **Requirement:**  The search textbox AND the 'Search' button need to tagged
with 'id' value so that Selenium could select it for entering value and
subsequent submit  
 **Use Case:**  Rely on Selenium to submit random search terms and capture
response time as well as validation search results| one of following:  
P0-Show Stopper  
P1-High  
P2-Normal  
P3-Low  
P4-Nice To Have  
TRQ-02| ...| ...| ...  
  
* * *

  

# Design

  

## Architecture & Workflow Diagram

 _ **Workflow Diagram**_

 **TODO:**   **(Required for medium/large feature)**  Draft a diagram to show
how various functional component work with each other, also how data flow from
one component to another.

  

## Data Model changes (ER diagram & ddl.sql)

 _ **ER Diagram**_

 _ **Database Schema**_

  1. Billing Automation database schema: 

 **TODO:**   **(Required if involve LARGE schema change)**  Draft a ER diagram
of the existing AND new data-model design. Highlight the entity/relationship
that is added/changed.

 **TODO:**   **(Required if involve schema change)**  Include a ddl.sql file
that could be executed against old schema in order to create/change
table/columns, as well as handling the corresponding data-migration if
applicable.

  

# Data Model

 **NOTE:**  We need to have following schema in MySQL for billing automation.
For form Builder, we need to decide the database and schema.

 _ **Table: billable_items**_

Property| Type| Description  
---|---|---  
id| long| auto incremented value and primary key.  
itemNo| int| Unique and auto incremented value for billable item no  
billingCategory| BillingCategory| foreign key of BillingCategory  
facility| Facility| foreign key of Facility  
serviceDesc| String| service description of a billable item  
serviceType| String| service type of a billable item  
serviceCode| String| service code of a billable item  
contactDesc| String| contract description of a billable item  
created| Date| billable item creation time  
createdBy| String| user name who creates billable item  
modified| Date| updated time  
modifiedBy| String| updater name  
  
 _ **Table: billing_categories**_

Property| Type| Description  
---|---|---  
id| long| auto incremented value and primary key.  
categoryId| int| numeric value for category no  
department| Department| foreign key of Department  
categoryDesc| String| category description of a billing category  
  
 _ **Table: invoice**_

Property| Type| Description  
---|---|---  
id| long| auto incremented value and primary key.  
client| Client| foreign key of client  
invoiceTemplate| InvoiceTemplate| foreign key of InvoiceTemplate  
status| Enum| status of an invoice  
jobName| String| job Name of an invoice  
invoiceDate| Date| invoice creation date  
dateOfService| Date| service date of an invoice  
paymentDueDate| Date| payment Due Date of an invoice  
requestedBy| String| name of the invoice creator  
PONumber| int| po number of an invoice  
terms| String| terms of an invoice  
comments| String| comments of an invoice  
revisionTimeStamp| Date| revision of an invoice  
requiredApprovalBy| Enum| approval name of an invoice  
approvalDueDate| Date| approval Due Date of an invoice  
managerComments| String| manager Comments of an invoice  
approvedDate| Date| approved date of an invoice  
sentToClientDate| Date| sending date of an invoice  
deliveryMethod| Enum| deliveryMethod for an invoice  
clientEmail| String| client Email of an invoice  
postagePaid| double| postage Paid amount of an invoice  
postageUsed| double| postage Used amount of an invoice  
postageDue| double| postage Due amount of an invoice  
subTotal| double| sub Total of an invoice  
taxExempt| double| tax Exempt of an invoice  
credit| double| credit of an invoice  
invoiceTotal| double| Total invoice of an invoice  
cycle| Date| cycle date of an invoice  
accountTotal| int| Total account of an invoice  
pageTotal| int| Total page of an invoice  
imageTotal| int| Total image of an invoice  
  
 _ **Table: departments**_

Property| Type| Description  
---|---|---  
id| long| auto incremented value and primary key.  
deptDesc| int| description of departments  
  
 _ **Table: facilities**_

Property| Type| Description  
---|---|---  
id| long| auto incremented value and primary key.  
facilityDesc| int| description of facilities  
  
 _ **Table: client**_

Property| Type| Description  
---|---|---  
id| long| auto incremented value and primary key.  
name| long| auto incremented value and primary key.  
type| ClientType| Type of a client  
parent| Client| foreign key of its own  
createdTime| Calendar| created time of a client  
disabledTime| Calendar| disabled time of a client  
disabledBy| User| foreign key of User  
accountManager| User| foreign key of User  
accountCoordinator| User| foreign key of User  
address| User| foreign key of User  
city| User| city of a client  
zip| User| zip of a client  
website| String| website of a client  
phone| String| phone of a client  
fax| String| fax of a client  
clientEmail| User| foreign key of User  
parent| Client| foreign key of its own  
children| List<Client>| list of children  
  
 _ **Table: invoice_billable_item**_

Property| Type| Description  
---|---|---  
id| long| auto incremented value and primary key.  
invoice| Invoice| foreign key of Invoice  
quality| int| quality of billable item  
serviceDesc| String| service descrition  
unitPrice| double| unit price of billable item  
extPrice| double| ext price of billable item  
  
 _ **Table: invoice_template**_

Property| Type| Description  
---|---|---  
id| long| auto incremented value and primary key.  
comments| String| comments of an invoice template.  
effectiveDate| Date| effective Date of an invoice template.  
expirationDate| Date| expiration Date of an invoice template.  
invoiceVersionDate| int| invoice Version Date of an invoice template.  
created| Date| invoice template creation time  
createdBy| String| user name who creates invoice template  
modified| Date| updated time  
modifiedBy| String| updater name  
  
 _ **Table: invoice_template_item**_

Property| Type| Description  
---|---|---  
id| long| auto incremented value and primary key.  
pricingExhibitItem| PricingExhibitItem| foreign key of PricingExhibitItem.  
invoiceTemplate| InvoiceTemplate| foreign key of InvoiceTemplate.  
taxablePercentage| double| taxable Percentage of an invoice template item.  
created| Date| invoice template item creation  
createdBy| String| user name who creates invoice template item  
modified| Date| updated time  
modifiedBy| String| updater name  
  
 _ **Table: pricing_exhibit**_

Property| Type| Description  
---|---|---  
id| long| auto incremented value and primary key.  
client| Client| foreign key of client.  
exhibitName| String| exhibitName of pricing exhibit.  
created| Date| created of pricing exhibit.  
revisionTimestamp| Date| revision date of pricing exhibit  
executeDate| Date| execute Date of pricing exhibit  
approvedDate| Date| approved Date of pricing exhibit  
status| String| status of pricing exhibit  
applications| Date| applications of pricing exhibit  
content| Date| content of pricing exhibit  
comments| String| comments of pricing exhibit  
  
 _ **Table: pricing_exhibit_item**_

Property| Type| Description  
---|---|---  
id| long| auto incremented value and primary key.  
billableItem| BillableItem| foreign key of BillableItem.  
pricingExhibitSection| PricingExhibitSection| foreign key of
PricingExhibitSection.  
pricingType| EnumType| pricingType of pricing exhibit item.  
unitPrice| double| unitPrice of pricing exhibit.  
unitOfMeasure| Enum| unitOfMeasure of pricing exhibit item  
  
 _ **Table: audit_trial**_

Property| Type| Description  
---|---|---  
id| long| auto incremented value and primary key.  
entityID| String|  
  
entityName| String|  
  
user| User| .  
revisionTimestamp| Date|  
  
changedContent| byte[]|  
  
  
 **TODO:**   **(Required if involve big architectural change)**  List out the
key class/method created/changed for this project. Highlight the changed
portion (e.g. additional param for a method)

 **Overview:**   **TODO:**  Provide an overview of what changes if not already
illustrated in the Architecture diagram above

Component| Class| Method| Params| Comments  
---|---|---|---|---  
...| ...| ...| ...| ...  
  
  
  

## Integration Points & Interface

 **TODO: (If Applicable)**  List out Integration Points and corresponding
interface

From Component| To Component| Details| Error Handling  
---|---|---|---  
InfoTRAC| PUI| DT_JOB_ID need to be synchronized by...| If DT_JOB_ID during
PUI processing is not found in ...  
  
* * *

  
  

# Summarized Change Log

Date| Who| Changes to Design Doc  
---|---|---  
3/11/2013| Ben C| Added some TODO notes and examples  
3/08/2013| Ben C| Initial Draft  
  
* * *

  
  

# Sign-Off

Group| Date| Who| Comment  
---|---|---|---  
Product Manager (Business)|  
|  
|  
  
Account Service (AS)|  
|  
|  
  
Dev./Impl. Manager (Technical)|  
|  
|  
  
Production Control (PC)|  
|  
|  
  
Data Processing (DP)|  
|  
|  
  
Accounting/Invoicing|  
|  
|  
  
  
  

###  Attachments

  

250

  


