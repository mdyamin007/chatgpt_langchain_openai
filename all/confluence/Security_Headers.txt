title: Security Headers
body:   

Name| Header| Default Header Description (If not set)| Problem that solve this
Header  
---|---|---|---  
  
### Cache Control

| Cache-Control: no-cache, no-store, max-age=0, must-revalidate  
Pragma: no-cache| Browser caches everything even if it's a secure connections.
| This means that a user may view an authenticated page, log out, and then a
malicious user can use the browser history to view the cached page. This
header prevent doing that.  
  
### Content Type Options

| X-Content-Type-Options: nosniff| Historically browsers, including IE, would
try to guess the content type of a request using content sniffing. This
allowed browsers to improve the user experience by guessing the content type
on resources that had not specified the content type. For example, if a
browser encountered a JavaScript file that did not have the content type
specified, it would be able to guess the content type and then execute it.|
The problem with content sniffing is that this allowed malicious users to use
polyglots (i.e. a file that is valid as multiple content types) to execute XSS
attacks. For example, some sites may allow users to submit a valid postscript
document to a website and view it. A malicious user might create a postscript
document that is also a valid JavaScript file and execute a XSS attack with
it.  
  
### HTTP Strict Transport Security (HSTS)

| Strict-Transport-Security: max-age=31536000 ; includeSubDomains| When you
type in your bank's website, do you enter
[infotrac.infoimageinc.com/](http://infotrac.infoimageinc.com) or do you enter
<https://infotrac.infoimageinc.com/>? If you omit the https protocol, you are
potentially vulnerable to Man in the Middle attacks. Even if the website
performs a redirect to <https://infotrac.infoimageinc.com/> a malicious user
could intercept the initial HTTP request and manipulate the response (i.e.
redirect to <https://infotrack.infoimageinc.com/> and steal their
credentials).| One way for a site to be marked as a HSTS host is to have the
host preloaded into the browser. Another is to add the "Strict-Transport-
Security" header to the response. For example the following would instruct the
browser to treat the domain as an HSTS host for a year (there are
approximately 31536000 seconds in a year):  
  
### X-Frame-Options

  

| X-Frame-Options: DENY| Allowing your website to be added to a frame can be a
security issue. For example, using clever CSS styling users could be tricked
into clicking on something that they were not intending. This sort of attack
is known as Clickjacking.|

There are a number ways to mitigate clickjacking attacks. For example, to
protect legacy browsers from clickjacking attacks you can use frame breaking
code. While not perfect, the frame breaking code is the best you can do for
the legacy browsers.

A more modern approach to address clickjacking is to use X-Frame-Options
header:  
  
### X-XSS-Protection

| X-XSS-Protection: 1; mode=block| Some browsers have built in support for
filtering out reflected XSS attacks. The filtering is typically enabled by
default, so adding the header typically just ensures it is enabled and
instructs the browser what to do when a XSS attack is detected| For example,
the filter might try to change the content in the least invasive way to still
render everything. At times, this type of replacement can become a XSS
vulnerability in itself. Instead, it is best to block the content rather than
attempt to fix it. To do this we can add the following header  
  
  

  

references:

  * <https://spring.io/blog/2013/08/21/spring-security-3-2-0-rc1-highlights-csrf-protection/>
  * <https://spring.io/blog/2013/08/23/spring-security-3-2-0-rc1-highlights-security-headers/>


