title: DataSync Design
body:   

Design| Reason  
---|---  
For each vendor, we should set up a cluster of standalone event-driven
applications that interface with the vendor API.|

This way, this application can be scaled and enhanced independently. It is
possible that we will expand the functionality of these applications to call
other APIs provided by the vendor, not just what we would be using currently.
Additionally, it is possible for all services to call these APIs, opening up
room for potentially for the Print team to use it if and when the situation
arise.

This should be event-driven, so that the syncing can happen asynchronously
from the Infoservice logic, but at the same time still be managed in a queue
so that updates are processed sequentially.

The current symXchange is already doing this in some form. Each cluster, such
as Hypercube or JAAS, will actually call the InfoTRAC cluster to perform the
sync. In a way, the InfoTRAC cluster is being treated as the "Data Sync
cluster" for symXChange. We are taking a step further and decoupling the
entire data sync logic for each vendor into their own application cluster.
symXChange can remain as it is now, but eventually, we should think about
taking that code out into its own application also.  
  
The applications should log the status of each event.| This is in case we need
to provide some sort of report. The tables should be unique per vendor. It is
easier that way to research. Or maybe we should try to standardize the logs
all into the same table and just have a vendor column to determine which is
which.  
For any given data update step, as necessary, introduce a step that calls the
SyncStrategy from a list.|

This step will read the configuration to determine which strategy class to
use, e.g. symXChangeStrategy vs CorrelationStrategy. Maybe use a
StrategyFactory that will define functions like
"getDeliveryPreferenceUpdateSyncStrategy","getNotificationPreferenceUpdateSyncStrategy",
etc. Then the calling function would only need to call the factory to get the
right strategy for the specific vendor.

  

The reason for a list of strategy is to allow for the potential of a client
needing to update two or more cores at the same time.  
  
  

Specific Use Case:

  * Infoservice update delivery preference
  * Infoservice checks to see if the client has a syncing config
  * Infoservice loops through the list of vendor and call the appropriate strategy class for the action involved
  * The strategy class should then known to call the appropriate API
  * Requests go into an MQ
  * MQ then distributes the work to the syncing cluster for the respective vendor

  

Question:

Is it standard design to have some ID to the message, and then use that ID to
prevent certain messages from executing?

For example, if a request to sync Account 1 is made multiple times

  1. Request to sync Account 1 delivery preference to E at 10:00
  2. Request to sync Account 1 delivery preference to P at 10:01

Is there a way to ensure that the first request will have to finish first
before the second request get executed?


