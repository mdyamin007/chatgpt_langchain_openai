title: CONF FILE SPEC
body: # Document Configuration File Specification

* * *

Parameter

|

Input Value

|

Description  
  
---|---|---  
[ _processing_type_ ].preprocess.step.[ _integer_ ]| [ _preprocess_name_ ]|
Define any preprocess(es) to be carried out before the main process.  
  
afp.compress.rootPath

| [ _full pathname_ ]| Root path to store the zipped output files for afp
processing.  
afp.compression| [ _boolean_ ]: true, false| Define whether to compress the
output files for afp processing.  
doc.[ _statement_type_ ].automatedEmailNotification| [ _boolean_ ]: true,
false| For each statement type, define whether to send automated emails
(AutoSend).  
doc.[ _statement_type_ ].estmtselinsert| [ _boolean_ ]: true, false| Define
whether to get DT_JOB_ID from IS DB.  
doc.[ _statement_type_ ].isXml| [ _boolean_ ]: true, false| UNUSED VARIABLE.  
doc.automatedEmailNotification| [ _String_ ]| The text for the automated email
notification.  
doc.compress.rootPath| [ _full pathname_ ]| Root path to store the zipped
output files for non-afp processing.  
doc.compression| [ _boolean_ ]: true, false| Define whether to compress the
output files for processing that is neither afp nor etax.  
doc.convert.system| [ _environment_ ]| The  in which to register the
statements.  
doc.copyZipBuffer| [ _integer_ ]| Define the size of the copy buffer.  
doc.isSharingAfps| [ _boolean_ ]: true, false|

Define whether the afp sharing feature is enabled.  
  
doc.rootPath| [ _full pathname_ ]| Root path to input files for real
documents.  
doc.test.rootPath| [ _full pathname_ ]| Root path to input files for test
documents.  
etax.compression| [ _boolean_ ]: true, false| Define whether to compress the
output files for etax processing.  
global.[ _prefix_ ]| [ _statement_type_ ]| Map filename prefix to a statement
type.  
global.[ _statement_type_ ].blockEmail| [ _boolean_ ]: true, false| For each
statement type, define whether automated emails are enabled.  
global.[ _statement_type_ ].bypassApproval| [ _String_ ]: DP| Allows DP to
bypass approval requirement (needApproval = true).  
global.[ _statement_type_ ].desc|

[ _String_ ]

| For each statement type, define the description.  
global.[ _statement_type_ ].needApproval|

[ _boolean_ ]: true, false

|

Define whether the job needs approval from the client.  
  
global.insertMissingDefault| [ _boolean_ ]: true, false| Define whether to set
default paperless status for members without one (for clients that do not have
selective paperless).  
global.merge.cid| [ _current_cid_ ],[ _new __cid__ ]|[ _current __cid__ ],[
_new __cid__ ]|...| Define the logic to swap cid for merged clients.  
global.multipleDocType| [ _boolean_ ]: true, false| Define whether there are
multiple document types. If false or undefined, AutoSend is always true.
Otherwise, AutoSend = NOT global.[ _statement_type_ ].blockEmail.  
global.multipleStmtType| [ _boolean_ ]: true, false| Define whether there are
multiple statement types.  
  
  

# Permission Configuration File Specification

* * *

Parameter| Input Value| Description  
---|---|---  
permission.handler.classPath|

com.infoimage.processing.application.permission.handler.[ _handler_class_name_
]

|

Path to the permission handler class.

Must be of the same type as the registrar.  
  
permission.registrar.classPath|

com.infoimage.processing.application.permission.registrar.[
_registrar_class_name_ ]

|

Path to the permission registrar class.

Must be of the same type as the handler.

Currently, all CID specific handlers uses the DefaultPermRegistrar.  
  
permission.level| [ _integer_ ]|

Used only for Default.

The permission level to be set for all listed account in the index file.  
  
permission.purge|

[ _boolean_ ]: yes, no

| Define whether the existing permission data will be purged.  
  
  


