title: NCR - SSO Upgrade
description: Add new SSO. See attached specs


author: dipak.mondal
comment: Hi Joe,

Will it be a new auth method or update any existing method? Which cid is going to use it?


author: admin
comment: Fnbk will be the first one. But still use demo for testing. What do you mean new Auth method. This is a new SSO


author: dipak.mondal
comment: Hi Joe,

For every sso we have a auth method such as {{digitalInsightV1}} , BB. So currently fnbk is using {{digitalInsightV1}} so this might be an enhancement of this method. is it?


author: shahadet.hossain
comment: No Dipak. This will be a new method. Any client should be able to use this method and do SSO. So far, you can test with DEMO. After testing we may need to change the current method of FNBK.


author: dipak.mondal
comment: Hi Joe,

These params are need to clarify :

In Data Exchange section params and their value represents?

FI_ID:  This field is the DI internal ID for the subject Financial Institution?
USER_ID: The ID of the subject  user on the Financial Institutions host processing system?

In User Accounts Data xml section params and their value represents?

id:    ?
hostValue:   ?
displayValue:    ?
billPayValue:    ?
pfmValue:     ?
rdcAccountValue:    ?
rawHostValue:     ?


author: admin
comment: FI_ID is constant for a given CID.



Well be getting samples requests to verify the other information. I would say most of the values you put there (id, hostValue,etc) wont be used by us so we can ignore those.


author: admin
comment: Pasting the timeline here

1/14  1/31: Discuss and finalize SSO specification.

2/1  2/25: Development

2/25  2/28: Onshore testing and configuration

3/1  4/12: Integration testing with NCR

4/15  5/3: FNBK SSO testing

5/8  Live


author: dipak.mondal
comment: sample ncr sso and sso method structure

<h2>DEMO</h2>

<form method="post" action="[http://localhost:3000/ssoKeyGen?"|http://localhost:3000/ssoKeyGen?%22]>

FI_ID : <input name="FI_ID" value="12345">

<br/>

USER_ID : <input name="USER_ID" value="1111222233">

<br/>

USER_ACCOUNTS XML<input type="text" name="USER_ACCOUNTS" value="<Accounts><account><type>DD</type><nickName>Checking1</nickName><accountNumber>123451</accountNumber></account><account><type>NA</type><nickName>Checking</nickName><accountNumber>12345</accountNumber></account></Accounts>">

{code}<br/>{code}
SESSION_ID : <input name="SESSION_ID" value="54488111111sfsgdfgd">

<br/>

{code}  Password : <input name="password" value="fh1A8*pPn">{code}
<br/>

CID : <input name="cid" value="demo">

<br/><br/>

<input type="submit">

</form>

<form action="[http://localhost:3000/ssoExchange?"|http://localhost:3000/ssoExchange?%22] method="post">

<input type="hidden" name="cid" placeholder="Enter key" value="demo">

<input type="text" name="key" placeholder="Enter key" value="">

<input type="submit">

</form>





"ncr": \{

{code} "password": "fh1A8*pPn",

 "usrAutoCreate":"y",

 "acctAutoCreate":"y",

 "checkPrimaryUser":"n",

 "removeUFA": "y",

 "acctTypeRequired": "n",

 "captureAcctDesc":"y"{code}
\}

I just used sample value for all input params

please have a look and give me a feedback.


author: dipak.mondal
comment: Hi Joe,

Please check latest updated sso file and sso method structure for GUID



{code:html}<h2>DEMO</h2>

<form method="post" action="http://localhost:3000/ssoKeyGen?">

FI_ID : <input name="FI_ID" value="12345">

<br/>

USER_ID : <input name="USER_ID" value="1111222233">

<br/>

USER_ACCOUNTS XML<input type="text" name="USER_ACCOUNTS" value="<Accounts><account><type>DD</type><nickName>Checking1</nickName><accountNumber>123451</accountNumber></account><account><type>NA</type><nickName>Checking</nickName><accountNumber>12345</accountNumber></account></Accounts>">
<br/>

SESSION_ID : <input name="SESSION_ID" value="54488111111sfsgdfgd">

<br/>
GUID : <input name="GUID" value="ykovmkjizpu-so4drewuh4ckqkjkwvdbob-yiunrtwq">

<br/>
User Type : <input name="user_type" value="P">

<br/>
Password : <input name="password" value="fh1A8*pPn">

<br/>

CID : <input name="cid" value="demo">

<br/><br/>

<input type="submit">

</form>

<form action="http://localhost:3000/ssoExchange?" method="post">

<input type="hidden" name="cid" placeholder="Enter key" value="demo">

<input type="text" name="key" placeholder="Enter key" value="">

<input type="submit">

</form>{code}





{code:json}"ncr": {
      "password": "fh1A8*pPn",
      "usrAutoCreate":"y",
      "acctAutoCreate":"y",
      "checkPrimaryUser":"n",
      "removeUFA": "y",
      "acctTypeRequired": "y",
      "delimiterNotRequireForSubuser": true,
      "captureAcctDesc":"y"
    }{code}




author: dipak.mondal
comment: 

{code:javascript},
        'ssoKeyGen.ncr': function (params, cid, mergedProperties, method) {
        	var fi_id = params.FI_ID;
            if(fi_id == ""){
               return false;
            }
            var xml = params.USER_ACCOUNTS;
            xml = xml.replace(/[\t\v\f\r\u00a0\u2000-\u200b\u2028-\u2029\u3000\n]+/g,"");
            var accountList={};
            try{
                xml2js;
                accountList = xml2js.parseStringSync(xml);
            } catch (e){
                logger.error(cid + " serverMethods/auth.js :: ssoKeygen.ncr - XML parser is not defined or Error while parsing xml in ncr method.");
                return false;
            }
            var password = params.password;
            if (mergedProperties['ssoMethod'][method].password == password){
                logger.info(cid + " serverMethods/auth.js :: ssoKeyGen.ncr - Password match found ");
                var encryptedToken,userId;
                var currentDateTime = new Date();
                var userType = params.user_type;
                var subUserId = params.GUID;
                var primaryUserId = params.USER_ID;
                var delimiterNotRequired = mergedProperties['ssoMethod'][method].delimiterNotRequireForSubuser;
                currentDateTime = +currentDateTime.setSeconds(currentDateTime.getSeconds() + Meteor.App.TOKEN_VALIDITY_TIME);
                var paramJson = {};
                var accounts = [];
                var catchDsc = mergedProperties['ssoMethod'][method]['captureAcctDesc'];
                var isCatchDsc = false;
                if(catchDsc)  {
                    isCatchDsc = catchDsc.toUpperCase() == "Y"?true:false;
                }
                _.each(accountList.Accounts.account, function (item) {
                	if(isCatchDsc) {
                        accounts.push({
                            "acctNum": item.accountNumber[0],
                            "acctType": item.type[0],
                            "acctDesc": item.nickName[0]
                        });
                    }else {
                        accounts.push({
                            "acctNum": item.accountNumber[0],
                            "acctType": item.type[0]
                        });
					}
                });
                if(userType == "N"){
                    if(delimiterNotRequired) {
                        userId = subUserId;
                        paramJson.isSecondary = "Y";
                    } else {
                        userId = primaryUserId + "|" + subUserId;
                    }
                    paramJson.checkPrimaryUser = mergedProperties['ssoMethod'][method]['checkPrimaryUser'];

                } else{
                    userId = primaryUserId;
                    primaryUserId = "";
                    paramJson.checkPrimaryUser = "n";
                }
                paramJson.userId = userId;
                paramJson.primaryUserId = primaryUserId;
                paramJson.cid = cid;
                paramJson.loginType = Meteor.App.findLoginType(mergedProperties, method);
                paramJson.time = currentDateTime;
                paramJson.kaToken  = params.SESSION_ID;
                paramJson.removeUFA = mergedProperties['ssoMethod'][method]['removeUFA'];
                paramJson.acctAutoCreate = mergedProperties['ssoMethod'][method]['acctAutoCreate'];
                paramJson.usrAutoCreate = mergedProperties['ssoMethod'][method]['usrAutoCreate'];
                paramJson.captureAcctDesc = catchDsc;
                paramJson.accNo = accounts;
                Meteor.call("keyGen.encryptForCid", JSON.stringify(paramJson), cid, function (error, cipherText) {
                    encryptedToken = cipherText
                });
                return encryptedToken;
            } else{
                logger.error(cid + " serverMethods/auth.js :: ssoKeyGen.ncr :: Password does not match");
                return false;
            }
        }{code}




author: samira.iffat
comment: A. currently for user Type P   and for example CiF :123  , user is created with CIF without pipeline.

Query 

# In primary Flag in usr mapping table will there be a  P ?



B. currently for user Type N   and for example CiF :123 user is created  and cif with pipeline  like ( userid | GUID) 

Query :

1. In primary Flag in usr mapping table will there be a  S

2. As it is a subuser, is this is the subuser of the Primary user earlier created?  will there be any relation in user_tree table.


author: 5ba31365b1a4b82e99864b79
comment: Hi Samira, Ive talked to Joe, and he told me that this should follow the same logic as bottomline. 



There should be an S in the primary user flag field when user is of type S.



Thanks


author: dipak.mondal
comment: Based on below api request a sub user is creating without any primary user. Is that correct flow or it is mandatory to have a primary user before creating a sub user?

{code}2019-04-17 15:18:36:6750 - info: demo server/methods.js :: ssoEnrollmentApi {"accounts":[{"acctNum":"449944","acctType":"DD","acctDesc":"Checking1"},{"acctNum":"553214","acctType":"NA","acctDesc":"Checking"}]} 1111222299|ykovmkjizts-No4drewuh4ckqkjkwvdbob-yiunrtwq y y 10.1.0.177 N byUfa n y 1111222299 y y
2019-04-17 15:18:36:6750 - info: demo server/methods.js :: ssoEnrollmentApi https://devapi.infoimageinc.com/infoservice/api/v1/user/demo/account/enrollment?cif=1111222299|ykovmkjizts-No4drewuh4ckqkjkwvdbob-yiunrtwq&acctAutoCreate=y&usrAutoCreate=y&acctLookup=N&npLinkType=byUfa&updateHoldStatus=n&checkPrimaryUser=y&primaryUser=1111222299&removeUFA=y&captureAcctDesc=y&isSecondary=y
2019-04-17 15:18:38:0930 - info: demo server/methods.js :: ssoEnrollmentApi - Accounts from sso updated successfully{code}






author: 5ba31365b1a4b82e99864b79
comment: Hi,

By default, the primary user needs to exist, but its not mandatory.

It should be a config setting.



Thanks\!


author: dipak.mondal
comment: [^sso-local.html]

New NCR sso file for one way login instead of submitting generated key


author: admin
comment: We just had a troubleshooting call with NCR. Well need to make some changes on our end. The field USER_ACCOUNTS is not actually where the XML data will be sent. It will actually be under the XML_DATA attribute. Ive attached the AttributeStatement.xml with the test sample that will be coming into infoimage. Can we get the SSO updated to support that?



Also NCR confirmed that the userid attribute will be the CIF number and they will make an update to include the SSN in the userInfo as well. We may need to utilize that field for the NEFCU setup. Ive updated the JIRA ticket as well with the sample XML.


author: dipak.mondal
comment: Hi Joe,

I have made some changes based on your sample xml file on ncr auth method. Looks like given account list xml are not well formated and after converting json we are having following json.

Given XML CDATA:



{code:xml}<userInfo>
	<userGUID>ef2785b5e5004233b8cd8ed558bc03c5</userGUID>
	<userID>tpvcerts1</userID>
	<name>Ferris Bueller</name>
	<email>sf250134@ncr.com</email>
	<phoneNumber></phoneNumber>
</userInfo>
<accounts>
	<number1>0008572</number1>
	<description1>Happy Savings</description1>
	<type1>SAVINGS</type1>
	<number2>0008599</number2>
	<description2>Emergency Savings</description2>
	<type2>SAVINGS</type2>
	<number3>0075</number3>
	<description3>Daily Checking</description3>
	<type3>CHECKING</type3>
	<number4>912685</number4>
	<description4>Business Checking</description4>
	<type4>CHECKING</type4>
	<number5>18694</number5>
	<description5>Health  Emer Checking 2</description5>
	<type5>CHECKING</type5>
	<number6>19595</number6>
	<description6>Money  Market</description6>
	<type6>MONEY_MARKET</type6>
	<number7>19023</number7>
	<description7>Child Savings</description7>
	<type7>SAVINGS</type7>
	<number8>18697</number8>
	<description8>Ferris's Checking</description8>
	<type8>CHECKING</type8>
	<number9>31123</number9>
	<description9>Quote Checking</description9>
	<type9>CHECKING</type9>
	<number10>172023</number10>
	<description10>TEST CHECKING</description10>
	<type10>CHECKING</type10>
	<number11>10</number11>
	<description11>ATM1 - Checking</description11>
	<type11>CHECKING</type11>
	<number12>11</number12>
	<description12>ATM2 - Checking</description12>
	<type12>CHECKING</type12>
	<number13>170000000</number13>
	<description13>Savings 1</description13>
	<type13>SAVINGS</type13>
	<number14>209000000</number14>
	<description14>Savings 2</description14>
	<type14>SAVINGS</type14>
	<number15>270000000</number15>
	<description15>Savings 3</description15>
	<type15>SAVINGS</type15>
	<number16>09</number16>
	<description16>CHECKING ACCOUNT</description16>
	<type16>CHECKING</type16>
	<number17>323219</number17>
	<description17>Line of Credit</description17>
	<type17>LINE_OF_CREDIT_LOAN</type17>
	<number18>4334131080000054</number18>
	<description18>Visa  asiv</description18>
	<type18>CREDIT_CARD_LOAN</type18>
	<number19>200479160</number19>
	<description19>Mortgage  Loan</description19>
	<type19>MORTGAGE_LOAN</type19>
	<number20>2012001076</number20>
	<description20>Mortgage  Loan 2</description20>
	<type20>MORTGAGE_LOAN</type20>
	<number21>302389920</number21>
	<description21>Mortgage  Loan 3</description21>
	<type21>MORTGAGE_LOAN</type21>
	<number22>8881316</number22>
	<description22>Visa</description22>
	<type22>CREDIT_CARD_LOAN</type22>
	<number23>8881317</number23>
	<description23>MasterCard</description23>
	<type23>CREDIT_CARD_LOAN</type23>
	<number24>5454570010000133</number24>
	<description24>Amex</description24>
	<type24>CREDIT_CARD_LOAN</type24>
</accounts>{code}

Converted Accounts JSON:



{code:json}[{
	"number1": ["0008572"],
	"description1": ["Happy Savings"],
	"type1": ["SAVINGS"],
	"number2": ["0008599"],
	"description2": ["Emergency Savings"],
	"type2": ["SAVINGS"],
	"number3": ["0075"],
	"description3": ["Daily Checking"],
	"type3": ["CHECKING"],
	"number4": ["912685"],
	"description4": ["Business Checking"],
	"type4": ["CHECKING"],
	"number5": ["18694"],
	"description5": ["Health  Emer Checking 2"],
	"type5": ["CHECKING"],
	"number6": ["19595"],
	"description6": ["Money  Market"],
	"type6": ["MONEY_MARKET"],
	"number7": ["19023"],
	"description7": ["Child Savings"],
	"type7": ["SAVINGS"],
	"number8": ["18697"],
	"description8": ["Ferris's Checking"],
	"type8": ["CHECKING"],
	"number9": ["31123"],
	"description9": ["Quote Checking"],
	"type9": ["CHECKING"],
	"number10": ["172023"],
	"description10": ["TEST CHECKING"],
	"type10": ["CHECKING"],
	"number11": ["10"],
	"description11": ["ATM1 - Checking"],
	"type11": ["CHECKING"],
	"number12": ["11"],
	"description12": ["ATM2 - Checking"],
	"type12": ["CHECKING"],
	"number13": ["170000000"],
	"description13": ["Savings 1"],
	"type13": ["SAVINGS"],
	"number14": ["209000000"],
	"description14": ["Savings 2"],
	"type14": ["SAVINGS"],
	"number15": ["270000000"],
	"description15": ["Savings 3"],
	"type15": ["SAVINGS"],
	"number16": ["09"],
	"description16": ["CHECKING ACCOUNT"],
	"type16": ["CHECKING"],
	"number17": ["323219"],
	"description17": ["Line of Credit"],
	"type17": ["LINE_OF_CREDIT_LOAN"],
	"number18": ["4334131080000054"],
	"description18": ["Visa  asiv"],
	"type18": ["CREDIT_CARD_LOAN"],
	"number19": ["200479160"],
	"description19": ["Mortgage  Loan"],
	"type19": ["MORTGAGE_LOAN"],
	"number20": ["2012001076"],
	"description20": ["Mortgage  Loan 2"],
	"type20": ["MORTGAGE_LOAN"],
	"number21": ["302389920"],
	"description21": ["Mortgage  Loan 3"],
	"type21": ["MORTGAGE_LOAN"],
	"number22": ["8881316"],
	"description22": ["Visa"],
	"type22": ["CREDIT_CARD_LOAN"],
	"number23": ["8881317"],
	"description23": ["MasterCard"],
	"type23": ["CREDIT_CARD_LOAN"],
	"number24": ["5454570010000133"],
	"description24": ["Amex"],
	"type24": ["CREDIT_CARD_LOAN"]
}]{code}

Problem is accounts array length only one with one object but that should be 24 length with 24 objects. Is it the final xml format then we have to think any other way to manipulate it. I have checked-in my changes in hypercube svn branch. The chance is only in auth.js file. I will do further changes after vacation.


author: dipak.mondal
comment: New sso file based on new sample xml.

[^sso-local (b1c4a463-c50e-4f41-ab13-a8109abee16c).html]




author: admin
comment: NCR made updates on their end. Take a look at the SAML Response.txt attachment for the updated request




author: dipak.mondal
comment: I have started working on it


author: dipak.mondal
comment: Hi Joe,

Here is new sso file based on new SAML response and code is checked in both branch and trunk.

Here is few differences between specification and last response sample:

1: XML_DATA was optional in specification but it contains userInfo such as userId, userGUID, name, email, phone as xml data in response sample

2: name,email,phone was not in specification.

3:  SESSION_ID is missing in response sample

[^sso-local(2).html]




author: dipak.mondal
comment: Hi Joe,



as SAML requested data is following format which is an encrypted data. I think we have to decrypt it using the same process that the process is used to encrypt it. I could not find any information from their provided files. I tried to decrypt using Crypto AES process but no solution. All other code will still remain and this decryption is needed before our current code.

  \{"SAMLResponse":""}

 


author: dipak.mondal
comment: [^SAML Response.xml]

I have checked -in code for NCR decoding issue. Please use this xml file for testing. Currently code is workable . I could not manage time to check few validations like saml response status check, certificate check. i will do it later if current code testing is done.   I have added a new meteor package for base64 decoding {{ostrio:base64@=1.0.0}}. Please update meteor packages, auth.js and util.js files to make it workable. Please let me know anyone find any issues




author: 5ba31365b1a4b82e99864b79
comment: Hi Dipak, can you provide your testing code?

Ive let NCR know they can test hitting the site again, but would like information on how testing is happening on our end.



Thanks\!


author: dipak.mondal
comment: Hi Ethan,

I encoded my given xml using Base64.encode(samlXML) to make it as SAMLResponse and got following key. Then made it as a SAMLResponse based on current pilot log and replaced requestData value using SAMLResponse instead of this.request.body for testing in mainRoutes.js file hence we dont have actual SAMLResponse {{requestData = this.request.body;}} . But saml can request our server in previous way and it will work. If you need more info you can knock me on skype

\{"SAMLResponse":""}


author: 5ba31365b1a4b82e99864b79
comment: Hi Dipak,

Eric at NCR was able to hit our site when sending in an unencrypted SAML assertion, but once testing with an XML encrypted SAML assertion they werent able to hit the site.

I forwarded his response to you and Shahadet through email. Can you look into the XML decryption link he provided?



Thanks guys\!


author: 5b1ee5a72eea651bacdeca2e
comment: Hi Dipak,

With the decryption of the XML, can you test it using a self-signed certificate that you create yourself?  That also means you need to encrypt the XML with your own public key and be able to decrypt it when its passed over in the SSO request.

Thank,

Sean


author: dipak.mondal
comment: [^NCR settings.pdf]
[^NCR settings.docx]

NCR setup related files


author: 5ba31365b1a4b82e99864b79
comment: Hi Naim,



So well be using the same SSL moving on, so we wont need to change that.


author: 5ba31365b1a4b82e99864b79
comment: Hi Dipak, can you share with me a working test html page to hit the site with NCR SSO?


author: dipak.mondal
comment: [^sso-local(2) (fd1207a3-6c48-4816-b6de-77395f37c997).html]

Can you try it?


author: dipak.mondal
comment: NCR related documents

[^NCR doc.docx]


author: dipak.mondal
comment: [^NCR doc.pdf]
